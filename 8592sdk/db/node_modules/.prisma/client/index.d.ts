
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>
/**
 * Model Match
 * 
 */
export type Match = $Result.DefaultSelection<Prisma.$MatchPayload>
/**
 * Model Schedule
 * 
 */
export type Schedule = $Result.DefaultSelection<Prisma.$SchedulePayload>
/**
 * Model Alliance
 * 
 */
export type Alliance = $Result.DefaultSelection<Prisma.$AlliancePayload>
/**
 * Model Team
 * 
 */
export type Team = $Result.DefaultSelection<Prisma.$TeamPayload>
/**
 * Model MatchEntry
 * 
 */
export type MatchEntry = $Result.DefaultSelection<Prisma.$MatchEntryPayload>
/**
 * Model PitEntry
 * 
 */
export type PitEntry = $Result.DefaultSelection<Prisma.$PitEntryPayload>
/**
 * Model Server
 * 
 */
export type Server = $Result.DefaultSelection<Prisma.$ServerPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const EventType: {
  DISTRICT: 'DISTRICT',
  REGIONAL: 'REGIONAL',
  WORLD: 'WORLD',
  SCRIMMAGE: 'SCRIMMAGE',
  OTHER: 'OTHER'
};

export type EventType = (typeof EventType)[keyof typeof EventType]


export const AllianceColor: {
  BLUE: 'BLUE',
  RED: 'RED'
};

export type AllianceColor = (typeof AllianceColor)[keyof typeof AllianceColor]

}

export type EventType = $Enums.EventType

export const EventType: typeof $Enums.EventType

export type AllianceColor = $Enums.AllianceColor

export const AllianceColor: typeof $Enums.AllianceColor

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs>;

  /**
   * `prisma.match`: Exposes CRUD operations for the **Match** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Matches
    * const matches = await prisma.match.findMany()
    * ```
    */
  get match(): Prisma.MatchDelegate<ExtArgs>;

  /**
   * `prisma.schedule`: Exposes CRUD operations for the **Schedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schedules
    * const schedules = await prisma.schedule.findMany()
    * ```
    */
  get schedule(): Prisma.ScheduleDelegate<ExtArgs>;

  /**
   * `prisma.alliance`: Exposes CRUD operations for the **Alliance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alliances
    * const alliances = await prisma.alliance.findMany()
    * ```
    */
  get alliance(): Prisma.AllianceDelegate<ExtArgs>;

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.TeamDelegate<ExtArgs>;

  /**
   * `prisma.matchEntry`: Exposes CRUD operations for the **MatchEntry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MatchEntries
    * const matchEntries = await prisma.matchEntry.findMany()
    * ```
    */
  get matchEntry(): Prisma.MatchEntryDelegate<ExtArgs>;

  /**
   * `prisma.pitEntry`: Exposes CRUD operations for the **PitEntry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PitEntries
    * const pitEntries = await prisma.pitEntry.findMany()
    * ```
    */
  get pitEntry(): Prisma.PitEntryDelegate<ExtArgs>;

  /**
   * `prisma.server`: Exposes CRUD operations for the **Server** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Servers
    * const servers = await prisma.server.findMany()
    * ```
    */
  get server(): Prisma.ServerDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Event: 'Event',
    Match: 'Match',
    Schedule: 'Schedule',
    Alliance: 'Alliance',
    Team: 'Team',
    MatchEntry: 'MatchEntry',
    PitEntry: 'PitEntry',
    Server: 'Server'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "event" | "match" | "schedule" | "alliance" | "team" | "matchEntry" | "pitEntry" | "server"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
      Match: {
        payload: Prisma.$MatchPayload<ExtArgs>
        fields: Prisma.MatchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MatchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MatchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          findFirst: {
            args: Prisma.MatchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MatchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          findMany: {
            args: Prisma.MatchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>[]
          }
          create: {
            args: Prisma.MatchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          createMany: {
            args: Prisma.MatchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MatchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          update: {
            args: Prisma.MatchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          deleteMany: {
            args: Prisma.MatchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MatchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MatchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          aggregate: {
            args: Prisma.MatchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMatch>
          }
          groupBy: {
            args: Prisma.MatchGroupByArgs<ExtArgs>
            result: $Utils.Optional<MatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.MatchCountArgs<ExtArgs>
            result: $Utils.Optional<MatchCountAggregateOutputType> | number
          }
        }
      }
      Schedule: {
        payload: Prisma.$SchedulePayload<ExtArgs>
        fields: Prisma.ScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          findFirst: {
            args: Prisma.ScheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          findMany: {
            args: Prisma.ScheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>[]
          }
          create: {
            args: Prisma.ScheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          createMany: {
            args: Prisma.ScheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ScheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          update: {
            args: Prisma.ScheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          deleteMany: {
            args: Prisma.ScheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ScheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          aggregate: {
            args: Prisma.ScheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSchedule>
          }
          groupBy: {
            args: Prisma.ScheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScheduleCountArgs<ExtArgs>
            result: $Utils.Optional<ScheduleCountAggregateOutputType> | number
          }
        }
      }
      Alliance: {
        payload: Prisma.$AlliancePayload<ExtArgs>
        fields: Prisma.AllianceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AllianceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlliancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AllianceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlliancePayload>
          }
          findFirst: {
            args: Prisma.AllianceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlliancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AllianceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlliancePayload>
          }
          findMany: {
            args: Prisma.AllianceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlliancePayload>[]
          }
          create: {
            args: Prisma.AllianceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlliancePayload>
          }
          createMany: {
            args: Prisma.AllianceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AllianceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlliancePayload>
          }
          update: {
            args: Prisma.AllianceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlliancePayload>
          }
          deleteMany: {
            args: Prisma.AllianceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AllianceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AllianceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlliancePayload>
          }
          aggregate: {
            args: Prisma.AllianceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlliance>
          }
          groupBy: {
            args: Prisma.AllianceGroupByArgs<ExtArgs>
            result: $Utils.Optional<AllianceGroupByOutputType>[]
          }
          count: {
            args: Prisma.AllianceCountArgs<ExtArgs>
            result: $Utils.Optional<AllianceCountAggregateOutputType> | number
          }
        }
      }
      Team: {
        payload: Prisma.$TeamPayload<ExtArgs>
        fields: Prisma.TeamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findFirst: {
            args: Prisma.TeamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findMany: {
            args: Prisma.TeamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          create: {
            args: Prisma.TeamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          createMany: {
            args: Prisma.TeamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TeamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          update: {
            args: Prisma.TeamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          deleteMany: {
            args: Prisma.TeamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TeamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          aggregate: {
            args: Prisma.TeamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeam>
          }
          groupBy: {
            args: Prisma.TeamGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamCountArgs<ExtArgs>
            result: $Utils.Optional<TeamCountAggregateOutputType> | number
          }
        }
      }
      MatchEntry: {
        payload: Prisma.$MatchEntryPayload<ExtArgs>
        fields: Prisma.MatchEntryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MatchEntryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchEntryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MatchEntryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchEntryPayload>
          }
          findFirst: {
            args: Prisma.MatchEntryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchEntryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MatchEntryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchEntryPayload>
          }
          findMany: {
            args: Prisma.MatchEntryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchEntryPayload>[]
          }
          create: {
            args: Prisma.MatchEntryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchEntryPayload>
          }
          createMany: {
            args: Prisma.MatchEntryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MatchEntryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchEntryPayload>
          }
          update: {
            args: Prisma.MatchEntryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchEntryPayload>
          }
          deleteMany: {
            args: Prisma.MatchEntryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MatchEntryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MatchEntryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchEntryPayload>
          }
          aggregate: {
            args: Prisma.MatchEntryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMatchEntry>
          }
          groupBy: {
            args: Prisma.MatchEntryGroupByArgs<ExtArgs>
            result: $Utils.Optional<MatchEntryGroupByOutputType>[]
          }
          count: {
            args: Prisma.MatchEntryCountArgs<ExtArgs>
            result: $Utils.Optional<MatchEntryCountAggregateOutputType> | number
          }
        }
      }
      PitEntry: {
        payload: Prisma.$PitEntryPayload<ExtArgs>
        fields: Prisma.PitEntryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PitEntryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PitEntryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PitEntryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PitEntryPayload>
          }
          findFirst: {
            args: Prisma.PitEntryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PitEntryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PitEntryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PitEntryPayload>
          }
          findMany: {
            args: Prisma.PitEntryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PitEntryPayload>[]
          }
          create: {
            args: Prisma.PitEntryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PitEntryPayload>
          }
          createMany: {
            args: Prisma.PitEntryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PitEntryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PitEntryPayload>
          }
          update: {
            args: Prisma.PitEntryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PitEntryPayload>
          }
          deleteMany: {
            args: Prisma.PitEntryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PitEntryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PitEntryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PitEntryPayload>
          }
          aggregate: {
            args: Prisma.PitEntryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePitEntry>
          }
          groupBy: {
            args: Prisma.PitEntryGroupByArgs<ExtArgs>
            result: $Utils.Optional<PitEntryGroupByOutputType>[]
          }
          count: {
            args: Prisma.PitEntryCountArgs<ExtArgs>
            result: $Utils.Optional<PitEntryCountAggregateOutputType> | number
          }
        }
      }
      Server: {
        payload: Prisma.$ServerPayload<ExtArgs>
        fields: Prisma.ServerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerPayload>
          }
          findFirst: {
            args: Prisma.ServerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerPayload>
          }
          findMany: {
            args: Prisma.ServerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerPayload>[]
          }
          create: {
            args: Prisma.ServerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerPayload>
          }
          createMany: {
            args: Prisma.ServerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ServerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerPayload>
          }
          update: {
            args: Prisma.ServerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerPayload>
          }
          deleteMany: {
            args: Prisma.ServerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ServerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerPayload>
          }
          aggregate: {
            args: Prisma.ServerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateServer>
          }
          groupBy: {
            args: Prisma.ServerGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServerGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServerCountArgs<ExtArgs>
            result: $Utils.Optional<ServerCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EventCountOutputType
   */

  export type EventCountOutputType = {
    teams: number
    matches: number
    alliances: number
    pitEntrys: number
  }

  export type EventCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teams?: boolean | EventCountOutputTypeCountTeamsArgs
    matches?: boolean | EventCountOutputTypeCountMatchesArgs
    alliances?: boolean | EventCountOutputTypeCountAlliancesArgs
    pitEntrys?: boolean | EventCountOutputTypeCountPitEntrysArgs
  }

  // Custom InputTypes
  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventCountOutputType
     */
    select?: EventCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountAlliancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AllianceWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountPitEntrysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PitEntryWhereInput
  }


  /**
   * Count Type MatchCountOutputType
   */

  export type MatchCountOutputType = {
    alliances: number
    schedules: number
  }

  export type MatchCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    alliances?: boolean | MatchCountOutputTypeCountAlliancesArgs
    schedules?: boolean | MatchCountOutputTypeCountSchedulesArgs
  }

  // Custom InputTypes
  /**
   * MatchCountOutputType without action
   */
  export type MatchCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchCountOutputType
     */
    select?: MatchCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MatchCountOutputType without action
   */
  export type MatchCountOutputTypeCountAlliancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AllianceWhereInput
  }

  /**
   * MatchCountOutputType without action
   */
  export type MatchCountOutputTypeCountSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
  }


  /**
   * Count Type AllianceCountOutputType
   */

  export type AllianceCountOutputType = {
    teams: number
  }

  export type AllianceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teams?: boolean | AllianceCountOutputTypeCountTeamsArgs
  }

  // Custom InputTypes
  /**
   * AllianceCountOutputType without action
   */
  export type AllianceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllianceCountOutputType
     */
    select?: AllianceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AllianceCountOutputType without action
   */
  export type AllianceCountOutputTypeCountTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
  }


  /**
   * Count Type TeamCountOutputType
   */

  export type TeamCountOutputType = {
    alliance: number
    events: number
    pitEntrys: number
  }

  export type TeamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    alliance?: boolean | TeamCountOutputTypeCountAllianceArgs
    events?: boolean | TeamCountOutputTypeCountEventsArgs
    pitEntrys?: boolean | TeamCountOutputTypeCountPitEntrysArgs
  }

  // Custom InputTypes
  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCountOutputType
     */
    select?: TeamCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountAllianceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AllianceWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountPitEntrysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PitEntryWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    key: number | null
  }

  export type UserSumAggregateOutputType = {
    key: number | null
  }

  export type UserMinAggregateOutputType = {
    key: number | null
    fname: string | null
    lname: string | null
    uname: string | null
    pass: string | null
  }

  export type UserMaxAggregateOutputType = {
    key: number | null
    fname: string | null
    lname: string | null
    uname: string | null
    pass: string | null
  }

  export type UserCountAggregateOutputType = {
    key: number
    fname: number
    lname: number
    uname: number
    pass: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    key?: true
  }

  export type UserSumAggregateInputType = {
    key?: true
  }

  export type UserMinAggregateInputType = {
    key?: true
    fname?: true
    lname?: true
    uname?: true
    pass?: true
  }

  export type UserMaxAggregateInputType = {
    key?: true
    fname?: true
    lname?: true
    uname?: true
    pass?: true
  }

  export type UserCountAggregateInputType = {
    key?: true
    fname?: true
    lname?: true
    uname?: true
    pass?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    key: number
    fname: string
    lname: string
    uname: string
    pass: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    key?: boolean
    fname?: boolean
    lname?: boolean
    uname?: boolean
    pass?: boolean
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    key?: boolean
    fname?: boolean
    lname?: boolean
    uname?: boolean
    pass?: boolean
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      key: number
      fname: string
      lname: string
      uname: string
      pass: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `key`
     * const userWithKeyOnly = await prisma.user.findMany({ select: { key: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly key: FieldRef<"User", 'Int'>
    readonly fname: FieldRef<"User", 'String'>
    readonly lname: FieldRef<"User", 'String'>
    readonly uname: FieldRef<"User", 'String'>
    readonly pass: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
  }


  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventMinAggregateOutputType = {
    key: string | null
    name: string | null
    type: $Enums.EventType | null
    start_date: Date | null
    end_date: Date | null
    updated: Date | null
    created: Date | null
  }

  export type EventMaxAggregateOutputType = {
    key: string | null
    name: string | null
    type: $Enums.EventType | null
    start_date: Date | null
    end_date: Date | null
    updated: Date | null
    created: Date | null
  }

  export type EventCountAggregateOutputType = {
    key: number
    name: number
    type: number
    start_date: number
    end_date: number
    updated: number
    created: number
    _all: number
  }


  export type EventMinAggregateInputType = {
    key?: true
    name?: true
    type?: true
    start_date?: true
    end_date?: true
    updated?: true
    created?: true
  }

  export type EventMaxAggregateInputType = {
    key?: true
    name?: true
    type?: true
    start_date?: true
    end_date?: true
    updated?: true
    created?: true
  }

  export type EventCountAggregateInputType = {
    key?: true
    name?: true
    type?: true
    start_date?: true
    end_date?: true
    updated?: true
    created?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    key: string
    name: string
    type: $Enums.EventType
    start_date: Date
    end_date: Date
    updated: Date
    created: Date
    _count: EventCountAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    key?: boolean
    name?: boolean
    type?: boolean
    start_date?: boolean
    end_date?: boolean
    updated?: boolean
    created?: boolean
    teams?: boolean | Event$teamsArgs<ExtArgs>
    matches?: boolean | Event$matchesArgs<ExtArgs>
    alliances?: boolean | Event$alliancesArgs<ExtArgs>
    pitEntrys?: boolean | Event$pitEntrysArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>


  export type EventSelectScalar = {
    key?: boolean
    name?: boolean
    type?: boolean
    start_date?: boolean
    end_date?: boolean
    updated?: boolean
    created?: boolean
  }

  export type EventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teams?: boolean | Event$teamsArgs<ExtArgs>
    matches?: boolean | Event$matchesArgs<ExtArgs>
    alliances?: boolean | Event$alliancesArgs<ExtArgs>
    pitEntrys?: boolean | Event$pitEntrysArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {
      teams: Prisma.$TeamPayload<ExtArgs>[]
      matches: Prisma.$MatchPayload<ExtArgs>[]
      alliances: Prisma.$AlliancePayload<ExtArgs>[]
      pitEntrys: Prisma.$PitEntryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      key: string
      name: string
      type: $Enums.EventType
      start_date: Date
      end_date: Date
      updated: Date
      created: Date
    }, ExtArgs["result"]["event"]>
    composites: {}
  }

  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventFindUniqueArgs>(args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Event that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(args: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventFindFirstArgs>(args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `key`
     * const eventWithKeyOnly = await prisma.event.findMany({ select: { key: true } })
     * 
     */
    findMany<T extends EventFindManyArgs>(args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
     */
    create<T extends EventCreateArgs>(args: SelectSubset<T, EventCreateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Events.
     * @param {EventCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventCreateManyArgs>(args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
     */
    delete<T extends EventDeleteArgs>(args: SelectSubset<T, EventDeleteArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventUpdateArgs>(args: SelectSubset<T, EventUpdateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventDeleteManyArgs>(args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventUpdateManyArgs>(args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
     */
    upsert<T extends EventUpsertArgs>(args: SelectSubset<T, EventUpsertArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    teams<T extends Event$teamsArgs<ExtArgs> = {}>(args?: Subset<T, Event$teamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany"> | Null>
    matches<T extends Event$matchesArgs<ExtArgs> = {}>(args?: Subset<T, Event$matchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany"> | Null>
    alliances<T extends Event$alliancesArgs<ExtArgs> = {}>(args?: Subset<T, Event$alliancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlliancePayload<ExtArgs>, T, "findMany"> | Null>
    pitEntrys<T extends Event$pitEntrysArgs<ExtArgs> = {}>(args?: Subset<T, Event$pitEntrysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PitEntryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Event model
   */ 
  interface EventFieldRefs {
    readonly key: FieldRef<"Event", 'String'>
    readonly name: FieldRef<"Event", 'String'>
    readonly type: FieldRef<"Event", 'EventType'>
    readonly start_date: FieldRef<"Event", 'DateTime'>
    readonly end_date: FieldRef<"Event", 'DateTime'>
    readonly updated: FieldRef<"Event", 'DateTime'>
    readonly created: FieldRef<"Event", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }

  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
  }

  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }

  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
  }

  /**
   * Event.teams
   */
  export type Event$teamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    cursor?: TeamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Event.matches
   */
  export type Event$matchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    cursor?: MatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Event.alliances
   */
  export type Event$alliancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alliance
     */
    select?: AllianceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllianceInclude<ExtArgs> | null
    where?: AllianceWhereInput
    orderBy?: AllianceOrderByWithRelationInput | AllianceOrderByWithRelationInput[]
    cursor?: AllianceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AllianceScalarFieldEnum | AllianceScalarFieldEnum[]
  }

  /**
   * Event.pitEntrys
   */
  export type Event$pitEntrysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PitEntry
     */
    select?: PitEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PitEntryInclude<ExtArgs> | null
    where?: PitEntryWhereInput
    orderBy?: PitEntryOrderByWithRelationInput | PitEntryOrderByWithRelationInput[]
    cursor?: PitEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PitEntryScalarFieldEnum | PitEntryScalarFieldEnum[]
  }

  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
  }


  /**
   * Model Match
   */

  export type AggregateMatch = {
    _count: MatchCountAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  export type MatchMinAggregateOutputType = {
    key: string | null
    eventId: string | null
  }

  export type MatchMaxAggregateOutputType = {
    key: string | null
    eventId: string | null
  }

  export type MatchCountAggregateOutputType = {
    key: number
    eventId: number
    _all: number
  }


  export type MatchMinAggregateInputType = {
    key?: true
    eventId?: true
  }

  export type MatchMaxAggregateInputType = {
    key?: true
    eventId?: true
  }

  export type MatchCountAggregateInputType = {
    key?: true
    eventId?: true
    _all?: true
  }

  export type MatchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Match to aggregate.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Matches
    **/
    _count?: true | MatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchMaxAggregateInputType
  }

  export type GetMatchAggregateType<T extends MatchAggregateArgs> = {
        [P in keyof T & keyof AggregateMatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatch[P]>
      : GetScalarType<T[P], AggregateMatch[P]>
  }




  export type MatchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithAggregationInput | MatchOrderByWithAggregationInput[]
    by: MatchScalarFieldEnum[] | MatchScalarFieldEnum
    having?: MatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchCountAggregateInputType | true
    _min?: MatchMinAggregateInputType
    _max?: MatchMaxAggregateInputType
  }

  export type MatchGroupByOutputType = {
    key: string
    eventId: string
    _count: MatchCountAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  type GetMatchGroupByPayload<T extends MatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchGroupByOutputType[P]>
            : GetScalarType<T[P], MatchGroupByOutputType[P]>
        }
      >
    >


  export type MatchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    key?: boolean
    eventId?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    alliances?: boolean | Match$alliancesArgs<ExtArgs>
    schedules?: boolean | Match$schedulesArgs<ExtArgs>
    _count?: boolean | MatchCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["match"]>


  export type MatchSelectScalar = {
    key?: boolean
    eventId?: boolean
  }

  export type MatchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    alliances?: boolean | Match$alliancesArgs<ExtArgs>
    schedules?: boolean | Match$schedulesArgs<ExtArgs>
    _count?: boolean | MatchCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $MatchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Match"
    objects: {
      event: Prisma.$EventPayload<ExtArgs>
      alliances: Prisma.$AlliancePayload<ExtArgs>[]
      schedules: Prisma.$SchedulePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      key: string
      eventId: string
    }, ExtArgs["result"]["match"]>
    composites: {}
  }

  type MatchGetPayload<S extends boolean | null | undefined | MatchDefaultArgs> = $Result.GetResult<Prisma.$MatchPayload, S>

  type MatchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MatchFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MatchCountAggregateInputType | true
    }

  export interface MatchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Match'], meta: { name: 'Match' } }
    /**
     * Find zero or one Match that matches the filter.
     * @param {MatchFindUniqueArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MatchFindUniqueArgs>(args: SelectSubset<T, MatchFindUniqueArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Match that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MatchFindUniqueOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MatchFindUniqueOrThrowArgs>(args: SelectSubset<T, MatchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Match that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MatchFindFirstArgs>(args?: SelectSubset<T, MatchFindFirstArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Match that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MatchFindFirstOrThrowArgs>(args?: SelectSubset<T, MatchFindFirstOrThrowArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Matches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Matches
     * const matches = await prisma.match.findMany()
     * 
     * // Get first 10 Matches
     * const matches = await prisma.match.findMany({ take: 10 })
     * 
     * // Only select the `key`
     * const matchWithKeyOnly = await prisma.match.findMany({ select: { key: true } })
     * 
     */
    findMany<T extends MatchFindManyArgs>(args?: SelectSubset<T, MatchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Match.
     * @param {MatchCreateArgs} args - Arguments to create a Match.
     * @example
     * // Create one Match
     * const Match = await prisma.match.create({
     *   data: {
     *     // ... data to create a Match
     *   }
     * })
     * 
     */
    create<T extends MatchCreateArgs>(args: SelectSubset<T, MatchCreateArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Matches.
     * @param {MatchCreateManyArgs} args - Arguments to create many Matches.
     * @example
     * // Create many Matches
     * const match = await prisma.match.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MatchCreateManyArgs>(args?: SelectSubset<T, MatchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Match.
     * @param {MatchDeleteArgs} args - Arguments to delete one Match.
     * @example
     * // Delete one Match
     * const Match = await prisma.match.delete({
     *   where: {
     *     // ... filter to delete one Match
     *   }
     * })
     * 
     */
    delete<T extends MatchDeleteArgs>(args: SelectSubset<T, MatchDeleteArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Match.
     * @param {MatchUpdateArgs} args - Arguments to update one Match.
     * @example
     * // Update one Match
     * const match = await prisma.match.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MatchUpdateArgs>(args: SelectSubset<T, MatchUpdateArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Matches.
     * @param {MatchDeleteManyArgs} args - Arguments to filter Matches to delete.
     * @example
     * // Delete a few Matches
     * const { count } = await prisma.match.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MatchDeleteManyArgs>(args?: SelectSubset<T, MatchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Matches
     * const match = await prisma.match.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MatchUpdateManyArgs>(args: SelectSubset<T, MatchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Match.
     * @param {MatchUpsertArgs} args - Arguments to update or create a Match.
     * @example
     * // Update or create a Match
     * const match = await prisma.match.upsert({
     *   create: {
     *     // ... data to create a Match
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Match we want to update
     *   }
     * })
     */
    upsert<T extends MatchUpsertArgs>(args: SelectSubset<T, MatchUpsertArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchCountArgs} args - Arguments to filter Matches to count.
     * @example
     * // Count the number of Matches
     * const count = await prisma.match.count({
     *   where: {
     *     // ... the filter for the Matches we want to count
     *   }
     * })
    **/
    count<T extends MatchCountArgs>(
      args?: Subset<T, MatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchAggregateArgs>(args: Subset<T, MatchAggregateArgs>): Prisma.PrismaPromise<GetMatchAggregateType<T>>

    /**
     * Group by Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchGroupByArgs['orderBy'] }
        : { orderBy?: MatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Match model
   */
  readonly fields: MatchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Match.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MatchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    alliances<T extends Match$alliancesArgs<ExtArgs> = {}>(args?: Subset<T, Match$alliancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlliancePayload<ExtArgs>, T, "findMany"> | Null>
    schedules<T extends Match$schedulesArgs<ExtArgs> = {}>(args?: Subset<T, Match$schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Match model
   */ 
  interface MatchFieldRefs {
    readonly key: FieldRef<"Match", 'String'>
    readonly eventId: FieldRef<"Match", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Match findUnique
   */
  export type MatchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match findUniqueOrThrow
   */
  export type MatchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match findFirst
   */
  export type MatchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match findFirstOrThrow
   */
  export type MatchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match findMany
   */
  export type MatchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Matches to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match create
   */
  export type MatchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The data needed to create a Match.
     */
    data: XOR<MatchCreateInput, MatchUncheckedCreateInput>
  }

  /**
   * Match createMany
   */
  export type MatchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Matches.
     */
    data: MatchCreateManyInput | MatchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Match update
   */
  export type MatchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The data needed to update a Match.
     */
    data: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
    /**
     * Choose, which Match to update.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match updateMany
   */
  export type MatchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Matches.
     */
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyInput>
    /**
     * Filter which Matches to update
     */
    where?: MatchWhereInput
  }

  /**
   * Match upsert
   */
  export type MatchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The filter to search for the Match to update in case it exists.
     */
    where: MatchWhereUniqueInput
    /**
     * In case the Match found by the `where` argument doesn't exist, create a new Match with this data.
     */
    create: XOR<MatchCreateInput, MatchUncheckedCreateInput>
    /**
     * In case the Match was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
  }

  /**
   * Match delete
   */
  export type MatchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter which Match to delete.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match deleteMany
   */
  export type MatchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Matches to delete
     */
    where?: MatchWhereInput
  }

  /**
   * Match.alliances
   */
  export type Match$alliancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alliance
     */
    select?: AllianceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllianceInclude<ExtArgs> | null
    where?: AllianceWhereInput
    orderBy?: AllianceOrderByWithRelationInput | AllianceOrderByWithRelationInput[]
    cursor?: AllianceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AllianceScalarFieldEnum | AllianceScalarFieldEnum[]
  }

  /**
   * Match.schedules
   */
  export type Match$schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    cursor?: ScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Match without action
   */
  export type MatchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
  }


  /**
   * Model Schedule
   */

  export type AggregateSchedule = {
    _count: ScheduleCountAggregateOutputType | null
    _avg: ScheduleAvgAggregateOutputType | null
    _sum: ScheduleSumAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  export type ScheduleAvgAggregateOutputType = {
    key: number | null
    position: number | null
  }

  export type ScheduleSumAggregateOutputType = {
    key: number | null
    position: number | null
  }

  export type ScheduleMinAggregateOutputType = {
    key: number | null
    uname: string | null
    position: number | null
    matchId: string | null
  }

  export type ScheduleMaxAggregateOutputType = {
    key: number | null
    uname: string | null
    position: number | null
    matchId: string | null
  }

  export type ScheduleCountAggregateOutputType = {
    key: number
    uname: number
    position: number
    matchId: number
    _all: number
  }


  export type ScheduleAvgAggregateInputType = {
    key?: true
    position?: true
  }

  export type ScheduleSumAggregateInputType = {
    key?: true
    position?: true
  }

  export type ScheduleMinAggregateInputType = {
    key?: true
    uname?: true
    position?: true
    matchId?: true
  }

  export type ScheduleMaxAggregateInputType = {
    key?: true
    uname?: true
    position?: true
    matchId?: true
  }

  export type ScheduleCountAggregateInputType = {
    key?: true
    uname?: true
    position?: true
    matchId?: true
    _all?: true
  }

  export type ScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schedule to aggregate.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Schedules
    **/
    _count?: true | ScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScheduleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScheduleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScheduleMaxAggregateInputType
  }

  export type GetScheduleAggregateType<T extends ScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchedule[P]>
      : GetScalarType<T[P], AggregateSchedule[P]>
  }




  export type ScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithAggregationInput | ScheduleOrderByWithAggregationInput[]
    by: ScheduleScalarFieldEnum[] | ScheduleScalarFieldEnum
    having?: ScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScheduleCountAggregateInputType | true
    _avg?: ScheduleAvgAggregateInputType
    _sum?: ScheduleSumAggregateInputType
    _min?: ScheduleMinAggregateInputType
    _max?: ScheduleMaxAggregateInputType
  }

  export type ScheduleGroupByOutputType = {
    key: number
    uname: string
    position: number
    matchId: string
    _count: ScheduleCountAggregateOutputType | null
    _avg: ScheduleAvgAggregateOutputType | null
    _sum: ScheduleSumAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  type GetScheduleGroupByPayload<T extends ScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
        }
      >
    >


  export type ScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    key?: boolean
    uname?: boolean
    position?: boolean
    matchId?: boolean
    match?: boolean | MatchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schedule"]>


  export type ScheduleSelectScalar = {
    key?: boolean
    uname?: boolean
    position?: boolean
    matchId?: boolean
  }

  export type ScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match?: boolean | MatchDefaultArgs<ExtArgs>
  }

  export type $SchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Schedule"
    objects: {
      match: Prisma.$MatchPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      key: number
      uname: string
      position: number
      matchId: string
    }, ExtArgs["result"]["schedule"]>
    composites: {}
  }

  type ScheduleGetPayload<S extends boolean | null | undefined | ScheduleDefaultArgs> = $Result.GetResult<Prisma.$SchedulePayload, S>

  type ScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ScheduleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ScheduleCountAggregateInputType | true
    }

  export interface ScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Schedule'], meta: { name: 'Schedule' } }
    /**
     * Find zero or one Schedule that matches the filter.
     * @param {ScheduleFindUniqueArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScheduleFindUniqueArgs>(args: SelectSubset<T, ScheduleFindUniqueArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Schedule that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ScheduleFindUniqueOrThrowArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, ScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Schedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindFirstArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScheduleFindFirstArgs>(args?: SelectSubset<T, ScheduleFindFirstArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Schedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindFirstOrThrowArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, ScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Schedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schedules
     * const schedules = await prisma.schedule.findMany()
     * 
     * // Get first 10 Schedules
     * const schedules = await prisma.schedule.findMany({ take: 10 })
     * 
     * // Only select the `key`
     * const scheduleWithKeyOnly = await prisma.schedule.findMany({ select: { key: true } })
     * 
     */
    findMany<T extends ScheduleFindManyArgs>(args?: SelectSubset<T, ScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Schedule.
     * @param {ScheduleCreateArgs} args - Arguments to create a Schedule.
     * @example
     * // Create one Schedule
     * const Schedule = await prisma.schedule.create({
     *   data: {
     *     // ... data to create a Schedule
     *   }
     * })
     * 
     */
    create<T extends ScheduleCreateArgs>(args: SelectSubset<T, ScheduleCreateArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Schedules.
     * @param {ScheduleCreateManyArgs} args - Arguments to create many Schedules.
     * @example
     * // Create many Schedules
     * const schedule = await prisma.schedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScheduleCreateManyArgs>(args?: SelectSubset<T, ScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Schedule.
     * @param {ScheduleDeleteArgs} args - Arguments to delete one Schedule.
     * @example
     * // Delete one Schedule
     * const Schedule = await prisma.schedule.delete({
     *   where: {
     *     // ... filter to delete one Schedule
     *   }
     * })
     * 
     */
    delete<T extends ScheduleDeleteArgs>(args: SelectSubset<T, ScheduleDeleteArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Schedule.
     * @param {ScheduleUpdateArgs} args - Arguments to update one Schedule.
     * @example
     * // Update one Schedule
     * const schedule = await prisma.schedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScheduleUpdateArgs>(args: SelectSubset<T, ScheduleUpdateArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Schedules.
     * @param {ScheduleDeleteManyArgs} args - Arguments to filter Schedules to delete.
     * @example
     * // Delete a few Schedules
     * const { count } = await prisma.schedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScheduleDeleteManyArgs>(args?: SelectSubset<T, ScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schedules
     * const schedule = await prisma.schedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScheduleUpdateManyArgs>(args: SelectSubset<T, ScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Schedule.
     * @param {ScheduleUpsertArgs} args - Arguments to update or create a Schedule.
     * @example
     * // Update or create a Schedule
     * const schedule = await prisma.schedule.upsert({
     *   create: {
     *     // ... data to create a Schedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Schedule we want to update
     *   }
     * })
     */
    upsert<T extends ScheduleUpsertArgs>(args: SelectSubset<T, ScheduleUpsertArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleCountArgs} args - Arguments to filter Schedules to count.
     * @example
     * // Count the number of Schedules
     * const count = await prisma.schedule.count({
     *   where: {
     *     // ... the filter for the Schedules we want to count
     *   }
     * })
    **/
    count<T extends ScheduleCountArgs>(
      args?: Subset<T, ScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScheduleAggregateArgs>(args: Subset<T, ScheduleAggregateArgs>): Prisma.PrismaPromise<GetScheduleAggregateType<T>>

    /**
     * Group by Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScheduleGroupByArgs['orderBy'] }
        : { orderBy?: ScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Schedule model
   */
  readonly fields: ScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Schedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    match<T extends MatchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MatchDefaultArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Schedule model
   */ 
  interface ScheduleFieldRefs {
    readonly key: FieldRef<"Schedule", 'Int'>
    readonly uname: FieldRef<"Schedule", 'String'>
    readonly position: FieldRef<"Schedule", 'Int'>
    readonly matchId: FieldRef<"Schedule", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Schedule findUnique
   */
  export type ScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule findUniqueOrThrow
   */
  export type ScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule findFirst
   */
  export type ScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedules.
     */
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule findFirstOrThrow
   */
  export type ScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedules.
     */
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule findMany
   */
  export type ScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedules to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule create
   */
  export type ScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a Schedule.
     */
    data: XOR<ScheduleCreateInput, ScheduleUncheckedCreateInput>
  }

  /**
   * Schedule createMany
   */
  export type ScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Schedules.
     */
    data: ScheduleCreateManyInput | ScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Schedule update
   */
  export type ScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a Schedule.
     */
    data: XOR<ScheduleUpdateInput, ScheduleUncheckedUpdateInput>
    /**
     * Choose, which Schedule to update.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule updateMany
   */
  export type ScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Schedules.
     */
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyInput>
    /**
     * Filter which Schedules to update
     */
    where?: ScheduleWhereInput
  }

  /**
   * Schedule upsert
   */
  export type ScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the Schedule to update in case it exists.
     */
    where: ScheduleWhereUniqueInput
    /**
     * In case the Schedule found by the `where` argument doesn't exist, create a new Schedule with this data.
     */
    create: XOR<ScheduleCreateInput, ScheduleUncheckedCreateInput>
    /**
     * In case the Schedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScheduleUpdateInput, ScheduleUncheckedUpdateInput>
  }

  /**
   * Schedule delete
   */
  export type ScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter which Schedule to delete.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule deleteMany
   */
  export type ScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schedules to delete
     */
    where?: ScheduleWhereInput
  }

  /**
   * Schedule without action
   */
  export type ScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
  }


  /**
   * Model Alliance
   */

  export type AggregateAlliance = {
    _count: AllianceCountAggregateOutputType | null
    _avg: AllianceAvgAggregateOutputType | null
    _sum: AllianceSumAggregateOutputType | null
    _min: AllianceMinAggregateOutputType | null
    _max: AllianceMaxAggregateOutputType | null
  }

  export type AllianceAvgAggregateOutputType = {
    id: number | null
  }

  export type AllianceSumAggregateOutputType = {
    id: number | null
  }

  export type AllianceMinAggregateOutputType = {
    id: number | null
    eventId: string | null
    matchId: string | null
    color: $Enums.AllianceColor | null
    matchColor: string | null
  }

  export type AllianceMaxAggregateOutputType = {
    id: number | null
    eventId: string | null
    matchId: string | null
    color: $Enums.AllianceColor | null
    matchColor: string | null
  }

  export type AllianceCountAggregateOutputType = {
    id: number
    eventId: number
    matchId: number
    color: number
    matchColor: number
    _all: number
  }


  export type AllianceAvgAggregateInputType = {
    id?: true
  }

  export type AllianceSumAggregateInputType = {
    id?: true
  }

  export type AllianceMinAggregateInputType = {
    id?: true
    eventId?: true
    matchId?: true
    color?: true
    matchColor?: true
  }

  export type AllianceMaxAggregateInputType = {
    id?: true
    eventId?: true
    matchId?: true
    color?: true
    matchColor?: true
  }

  export type AllianceCountAggregateInputType = {
    id?: true
    eventId?: true
    matchId?: true
    color?: true
    matchColor?: true
    _all?: true
  }

  export type AllianceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alliance to aggregate.
     */
    where?: AllianceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alliances to fetch.
     */
    orderBy?: AllianceOrderByWithRelationInput | AllianceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AllianceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alliances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alliances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Alliances
    **/
    _count?: true | AllianceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AllianceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AllianceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AllianceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AllianceMaxAggregateInputType
  }

  export type GetAllianceAggregateType<T extends AllianceAggregateArgs> = {
        [P in keyof T & keyof AggregateAlliance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlliance[P]>
      : GetScalarType<T[P], AggregateAlliance[P]>
  }




  export type AllianceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AllianceWhereInput
    orderBy?: AllianceOrderByWithAggregationInput | AllianceOrderByWithAggregationInput[]
    by: AllianceScalarFieldEnum[] | AllianceScalarFieldEnum
    having?: AllianceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AllianceCountAggregateInputType | true
    _avg?: AllianceAvgAggregateInputType
    _sum?: AllianceSumAggregateInputType
    _min?: AllianceMinAggregateInputType
    _max?: AllianceMaxAggregateInputType
  }

  export type AllianceGroupByOutputType = {
    id: number
    eventId: string
    matchId: string
    color: $Enums.AllianceColor
    matchColor: string
    _count: AllianceCountAggregateOutputType | null
    _avg: AllianceAvgAggregateOutputType | null
    _sum: AllianceSumAggregateOutputType | null
    _min: AllianceMinAggregateOutputType | null
    _max: AllianceMaxAggregateOutputType | null
  }

  type GetAllianceGroupByPayload<T extends AllianceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AllianceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AllianceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AllianceGroupByOutputType[P]>
            : GetScalarType<T[P], AllianceGroupByOutputType[P]>
        }
      >
    >


  export type AllianceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    matchId?: boolean
    color?: boolean
    matchColor?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    teams?: boolean | Alliance$teamsArgs<ExtArgs>
    match?: boolean | MatchDefaultArgs<ExtArgs>
    _count?: boolean | AllianceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alliance"]>


  export type AllianceSelectScalar = {
    id?: boolean
    eventId?: boolean
    matchId?: boolean
    color?: boolean
    matchColor?: boolean
  }

  export type AllianceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    teams?: boolean | Alliance$teamsArgs<ExtArgs>
    match?: boolean | MatchDefaultArgs<ExtArgs>
    _count?: boolean | AllianceCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $AlliancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Alliance"
    objects: {
      event: Prisma.$EventPayload<ExtArgs>
      teams: Prisma.$TeamPayload<ExtArgs>[]
      match: Prisma.$MatchPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      eventId: string
      matchId: string
      color: $Enums.AllianceColor
      matchColor: string
    }, ExtArgs["result"]["alliance"]>
    composites: {}
  }

  type AllianceGetPayload<S extends boolean | null | undefined | AllianceDefaultArgs> = $Result.GetResult<Prisma.$AlliancePayload, S>

  type AllianceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AllianceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AllianceCountAggregateInputType | true
    }

  export interface AllianceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Alliance'], meta: { name: 'Alliance' } }
    /**
     * Find zero or one Alliance that matches the filter.
     * @param {AllianceFindUniqueArgs} args - Arguments to find a Alliance
     * @example
     * // Get one Alliance
     * const alliance = await prisma.alliance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AllianceFindUniqueArgs>(args: SelectSubset<T, AllianceFindUniqueArgs<ExtArgs>>): Prisma__AllianceClient<$Result.GetResult<Prisma.$AlliancePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Alliance that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AllianceFindUniqueOrThrowArgs} args - Arguments to find a Alliance
     * @example
     * // Get one Alliance
     * const alliance = await prisma.alliance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AllianceFindUniqueOrThrowArgs>(args: SelectSubset<T, AllianceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AllianceClient<$Result.GetResult<Prisma.$AlliancePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Alliance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllianceFindFirstArgs} args - Arguments to find a Alliance
     * @example
     * // Get one Alliance
     * const alliance = await prisma.alliance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AllianceFindFirstArgs>(args?: SelectSubset<T, AllianceFindFirstArgs<ExtArgs>>): Prisma__AllianceClient<$Result.GetResult<Prisma.$AlliancePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Alliance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllianceFindFirstOrThrowArgs} args - Arguments to find a Alliance
     * @example
     * // Get one Alliance
     * const alliance = await prisma.alliance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AllianceFindFirstOrThrowArgs>(args?: SelectSubset<T, AllianceFindFirstOrThrowArgs<ExtArgs>>): Prisma__AllianceClient<$Result.GetResult<Prisma.$AlliancePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Alliances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllianceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alliances
     * const alliances = await prisma.alliance.findMany()
     * 
     * // Get first 10 Alliances
     * const alliances = await prisma.alliance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const allianceWithIdOnly = await prisma.alliance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AllianceFindManyArgs>(args?: SelectSubset<T, AllianceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlliancePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Alliance.
     * @param {AllianceCreateArgs} args - Arguments to create a Alliance.
     * @example
     * // Create one Alliance
     * const Alliance = await prisma.alliance.create({
     *   data: {
     *     // ... data to create a Alliance
     *   }
     * })
     * 
     */
    create<T extends AllianceCreateArgs>(args: SelectSubset<T, AllianceCreateArgs<ExtArgs>>): Prisma__AllianceClient<$Result.GetResult<Prisma.$AlliancePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Alliances.
     * @param {AllianceCreateManyArgs} args - Arguments to create many Alliances.
     * @example
     * // Create many Alliances
     * const alliance = await prisma.alliance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AllianceCreateManyArgs>(args?: SelectSubset<T, AllianceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Alliance.
     * @param {AllianceDeleteArgs} args - Arguments to delete one Alliance.
     * @example
     * // Delete one Alliance
     * const Alliance = await prisma.alliance.delete({
     *   where: {
     *     // ... filter to delete one Alliance
     *   }
     * })
     * 
     */
    delete<T extends AllianceDeleteArgs>(args: SelectSubset<T, AllianceDeleteArgs<ExtArgs>>): Prisma__AllianceClient<$Result.GetResult<Prisma.$AlliancePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Alliance.
     * @param {AllianceUpdateArgs} args - Arguments to update one Alliance.
     * @example
     * // Update one Alliance
     * const alliance = await prisma.alliance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AllianceUpdateArgs>(args: SelectSubset<T, AllianceUpdateArgs<ExtArgs>>): Prisma__AllianceClient<$Result.GetResult<Prisma.$AlliancePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Alliances.
     * @param {AllianceDeleteManyArgs} args - Arguments to filter Alliances to delete.
     * @example
     * // Delete a few Alliances
     * const { count } = await prisma.alliance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AllianceDeleteManyArgs>(args?: SelectSubset<T, AllianceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alliances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllianceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alliances
     * const alliance = await prisma.alliance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AllianceUpdateManyArgs>(args: SelectSubset<T, AllianceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Alliance.
     * @param {AllianceUpsertArgs} args - Arguments to update or create a Alliance.
     * @example
     * // Update or create a Alliance
     * const alliance = await prisma.alliance.upsert({
     *   create: {
     *     // ... data to create a Alliance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Alliance we want to update
     *   }
     * })
     */
    upsert<T extends AllianceUpsertArgs>(args: SelectSubset<T, AllianceUpsertArgs<ExtArgs>>): Prisma__AllianceClient<$Result.GetResult<Prisma.$AlliancePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Alliances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllianceCountArgs} args - Arguments to filter Alliances to count.
     * @example
     * // Count the number of Alliances
     * const count = await prisma.alliance.count({
     *   where: {
     *     // ... the filter for the Alliances we want to count
     *   }
     * })
    **/
    count<T extends AllianceCountArgs>(
      args?: Subset<T, AllianceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AllianceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Alliance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllianceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AllianceAggregateArgs>(args: Subset<T, AllianceAggregateArgs>): Prisma.PrismaPromise<GetAllianceAggregateType<T>>

    /**
     * Group by Alliance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllianceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AllianceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AllianceGroupByArgs['orderBy'] }
        : { orderBy?: AllianceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AllianceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAllianceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Alliance model
   */
  readonly fields: AllianceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Alliance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AllianceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    teams<T extends Alliance$teamsArgs<ExtArgs> = {}>(args?: Subset<T, Alliance$teamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany"> | Null>
    match<T extends MatchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MatchDefaultArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Alliance model
   */ 
  interface AllianceFieldRefs {
    readonly id: FieldRef<"Alliance", 'Int'>
    readonly eventId: FieldRef<"Alliance", 'String'>
    readonly matchId: FieldRef<"Alliance", 'String'>
    readonly color: FieldRef<"Alliance", 'AllianceColor'>
    readonly matchColor: FieldRef<"Alliance", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Alliance findUnique
   */
  export type AllianceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alliance
     */
    select?: AllianceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllianceInclude<ExtArgs> | null
    /**
     * Filter, which Alliance to fetch.
     */
    where: AllianceWhereUniqueInput
  }

  /**
   * Alliance findUniqueOrThrow
   */
  export type AllianceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alliance
     */
    select?: AllianceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllianceInclude<ExtArgs> | null
    /**
     * Filter, which Alliance to fetch.
     */
    where: AllianceWhereUniqueInput
  }

  /**
   * Alliance findFirst
   */
  export type AllianceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alliance
     */
    select?: AllianceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllianceInclude<ExtArgs> | null
    /**
     * Filter, which Alliance to fetch.
     */
    where?: AllianceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alliances to fetch.
     */
    orderBy?: AllianceOrderByWithRelationInput | AllianceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alliances.
     */
    cursor?: AllianceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alliances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alliances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alliances.
     */
    distinct?: AllianceScalarFieldEnum | AllianceScalarFieldEnum[]
  }

  /**
   * Alliance findFirstOrThrow
   */
  export type AllianceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alliance
     */
    select?: AllianceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllianceInclude<ExtArgs> | null
    /**
     * Filter, which Alliance to fetch.
     */
    where?: AllianceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alliances to fetch.
     */
    orderBy?: AllianceOrderByWithRelationInput | AllianceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alliances.
     */
    cursor?: AllianceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alliances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alliances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alliances.
     */
    distinct?: AllianceScalarFieldEnum | AllianceScalarFieldEnum[]
  }

  /**
   * Alliance findMany
   */
  export type AllianceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alliance
     */
    select?: AllianceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllianceInclude<ExtArgs> | null
    /**
     * Filter, which Alliances to fetch.
     */
    where?: AllianceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alliances to fetch.
     */
    orderBy?: AllianceOrderByWithRelationInput | AllianceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Alliances.
     */
    cursor?: AllianceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alliances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alliances.
     */
    skip?: number
    distinct?: AllianceScalarFieldEnum | AllianceScalarFieldEnum[]
  }

  /**
   * Alliance create
   */
  export type AllianceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alliance
     */
    select?: AllianceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllianceInclude<ExtArgs> | null
    /**
     * The data needed to create a Alliance.
     */
    data: XOR<AllianceCreateInput, AllianceUncheckedCreateInput>
  }

  /**
   * Alliance createMany
   */
  export type AllianceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Alliances.
     */
    data: AllianceCreateManyInput | AllianceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Alliance update
   */
  export type AllianceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alliance
     */
    select?: AllianceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllianceInclude<ExtArgs> | null
    /**
     * The data needed to update a Alliance.
     */
    data: XOR<AllianceUpdateInput, AllianceUncheckedUpdateInput>
    /**
     * Choose, which Alliance to update.
     */
    where: AllianceWhereUniqueInput
  }

  /**
   * Alliance updateMany
   */
  export type AllianceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Alliances.
     */
    data: XOR<AllianceUpdateManyMutationInput, AllianceUncheckedUpdateManyInput>
    /**
     * Filter which Alliances to update
     */
    where?: AllianceWhereInput
  }

  /**
   * Alliance upsert
   */
  export type AllianceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alliance
     */
    select?: AllianceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllianceInclude<ExtArgs> | null
    /**
     * The filter to search for the Alliance to update in case it exists.
     */
    where: AllianceWhereUniqueInput
    /**
     * In case the Alliance found by the `where` argument doesn't exist, create a new Alliance with this data.
     */
    create: XOR<AllianceCreateInput, AllianceUncheckedCreateInput>
    /**
     * In case the Alliance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AllianceUpdateInput, AllianceUncheckedUpdateInput>
  }

  /**
   * Alliance delete
   */
  export type AllianceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alliance
     */
    select?: AllianceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllianceInclude<ExtArgs> | null
    /**
     * Filter which Alliance to delete.
     */
    where: AllianceWhereUniqueInput
  }

  /**
   * Alliance deleteMany
   */
  export type AllianceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alliances to delete
     */
    where?: AllianceWhereInput
  }

  /**
   * Alliance.teams
   */
  export type Alliance$teamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    cursor?: TeamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Alliance without action
   */
  export type AllianceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alliance
     */
    select?: AllianceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllianceInclude<ExtArgs> | null
  }


  /**
   * Model Team
   */

  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamAvgAggregateOutputType = {
    team_number: number | null
  }

  export type TeamSumAggregateOutputType = {
    team_number: number | null
  }

  export type TeamMinAggregateOutputType = {
    tba_key: string | null
    team_number: number | null
    nickname: string | null
    logo: string | null
  }

  export type TeamMaxAggregateOutputType = {
    tba_key: string | null
    team_number: number | null
    nickname: string | null
    logo: string | null
  }

  export type TeamCountAggregateOutputType = {
    tba_key: number
    team_number: number
    nickname: number
    logo: number
    _all: number
  }


  export type TeamAvgAggregateInputType = {
    team_number?: true
  }

  export type TeamSumAggregateInputType = {
    team_number?: true
  }

  export type TeamMinAggregateInputType = {
    tba_key?: true
    team_number?: true
    nickname?: true
    logo?: true
  }

  export type TeamMaxAggregateInputType = {
    tba_key?: true
    team_number?: true
    nickname?: true
    logo?: true
  }

  export type TeamCountAggregateInputType = {
    tba_key?: true
    team_number?: true
    nickname?: true
    logo?: true
    _all?: true
  }

  export type TeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Team to aggregate.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type TeamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithAggregationInput | TeamOrderByWithAggregationInput[]
    by: TeamScalarFieldEnum[] | TeamScalarFieldEnum
    having?: TeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _avg?: TeamAvgAggregateInputType
    _sum?: TeamSumAggregateInputType
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }

  export type TeamGroupByOutputType = {
    tba_key: string
    team_number: number
    nickname: string
    logo: string | null
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends TeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type TeamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tba_key?: boolean
    team_number?: boolean
    nickname?: boolean
    logo?: boolean
    alliance?: boolean | Team$allianceArgs<ExtArgs>
    events?: boolean | Team$eventsArgs<ExtArgs>
    pitEntrys?: boolean | Team$pitEntrysArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>


  export type TeamSelectScalar = {
    tba_key?: boolean
    team_number?: boolean
    nickname?: boolean
    logo?: boolean
  }

  export type TeamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    alliance?: boolean | Team$allianceArgs<ExtArgs>
    events?: boolean | Team$eventsArgs<ExtArgs>
    pitEntrys?: boolean | Team$pitEntrysArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TeamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Team"
    objects: {
      alliance: Prisma.$AlliancePayload<ExtArgs>[]
      events: Prisma.$EventPayload<ExtArgs>[]
      pitEntrys: Prisma.$PitEntryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      tba_key: string
      team_number: number
      nickname: string
      logo: string | null
    }, ExtArgs["result"]["team"]>
    composites: {}
  }

  type TeamGetPayload<S extends boolean | null | undefined | TeamDefaultArgs> = $Result.GetResult<Prisma.$TeamPayload, S>

  type TeamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TeamFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TeamCountAggregateInputType | true
    }

  export interface TeamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Team'], meta: { name: 'Team' } }
    /**
     * Find zero or one Team that matches the filter.
     * @param {TeamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamFindUniqueArgs>(args: SelectSubset<T, TeamFindUniqueArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Team that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TeamFindUniqueOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamFindFirstArgs>(args?: SelectSubset<T, TeamFindFirstArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Team that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `tba_key`
     * const teamWithTba_keyOnly = await prisma.team.findMany({ select: { tba_key: true } })
     * 
     */
    findMany<T extends TeamFindManyArgs>(args?: SelectSubset<T, TeamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Team.
     * @param {TeamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
     */
    create<T extends TeamCreateArgs>(args: SelectSubset<T, TeamCreateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Teams.
     * @param {TeamCreateManyArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamCreateManyArgs>(args?: SelectSubset<T, TeamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Team.
     * @param {TeamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
     */
    delete<T extends TeamDeleteArgs>(args: SelectSubset<T, TeamDeleteArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Team.
     * @param {TeamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamUpdateArgs>(args: SelectSubset<T, TeamUpdateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Teams.
     * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamDeleteManyArgs>(args?: SelectSubset<T, TeamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamUpdateManyArgs>(args: SelectSubset<T, TeamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Team.
     * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
     */
    upsert<T extends TeamUpsertArgs>(args: SelectSubset<T, TeamUpsertArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamCountArgs>(
      args?: Subset<T, TeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): Prisma.PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamGroupByArgs['orderBy'] }
        : { orderBy?: TeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Team model
   */
  readonly fields: TeamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    alliance<T extends Team$allianceArgs<ExtArgs> = {}>(args?: Subset<T, Team$allianceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlliancePayload<ExtArgs>, T, "findMany"> | Null>
    events<T extends Team$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Team$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany"> | Null>
    pitEntrys<T extends Team$pitEntrysArgs<ExtArgs> = {}>(args?: Subset<T, Team$pitEntrysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PitEntryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Team model
   */ 
  interface TeamFieldRefs {
    readonly tba_key: FieldRef<"Team", 'String'>
    readonly team_number: FieldRef<"Team", 'Int'>
    readonly nickname: FieldRef<"Team", 'String'>
    readonly logo: FieldRef<"Team", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Team findUnique
   */
  export type TeamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findUniqueOrThrow
   */
  export type TeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findFirst
   */
  export type TeamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findFirstOrThrow
   */
  export type TeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findMany
   */
  export type TeamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team create
   */
  export type TeamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to create a Team.
     */
    data: XOR<TeamCreateInput, TeamUncheckedCreateInput>
  }

  /**
   * Team createMany
   */
  export type TeamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Team update
   */
  export type TeamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to update a Team.
     */
    data: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
    /**
     * Choose, which Team to update.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team updateMany
   */
  export type TeamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
  }

  /**
   * Team upsert
   */
  export type TeamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The filter to search for the Team to update in case it exists.
     */
    where: TeamWhereUniqueInput
    /**
     * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
     */
    create: XOR<TeamCreateInput, TeamUncheckedCreateInput>
    /**
     * In case the Team was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
  }

  /**
   * Team delete
   */
  export type TeamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter which Team to delete.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team deleteMany
   */
  export type TeamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to delete
     */
    where?: TeamWhereInput
  }

  /**
   * Team.alliance
   */
  export type Team$allianceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alliance
     */
    select?: AllianceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllianceInclude<ExtArgs> | null
    where?: AllianceWhereInput
    orderBy?: AllianceOrderByWithRelationInput | AllianceOrderByWithRelationInput[]
    cursor?: AllianceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AllianceScalarFieldEnum | AllianceScalarFieldEnum[]
  }

  /**
   * Team.events
   */
  export type Team$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Team.pitEntrys
   */
  export type Team$pitEntrysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PitEntry
     */
    select?: PitEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PitEntryInclude<ExtArgs> | null
    where?: PitEntryWhereInput
    orderBy?: PitEntryOrderByWithRelationInput | PitEntryOrderByWithRelationInput[]
    cursor?: PitEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PitEntryScalarFieldEnum | PitEntryScalarFieldEnum[]
  }

  /**
   * Team without action
   */
  export type TeamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
  }


  /**
   * Model MatchEntry
   */

  export type AggregateMatchEntry = {
    _count: MatchEntryCountAggregateOutputType | null
    _avg: MatchEntryAvgAggregateOutputType | null
    _sum: MatchEntrySumAggregateOutputType | null
    _min: MatchEntryMinAggregateOutputType | null
    _max: MatchEntryMaxAggregateOutputType | null
  }

  export type MatchEntryAvgAggregateOutputType = {
    match_num: number | null
    team_number: number | null
    scouter_num: number | null
    a_start_posit: number | null
    a_coral_first: number | null
    a_coral_second: number | null
    a_coral_third: number | null
    a_coral_fourth: number | null
    a_net: number | null
    a_proc: number | null
    t_coral_first: number | null
    t_coral_second: number | null
    t_coral_third: number | null
    t_coral_fourth: number | null
    t_net: number | null
    t_proc: number | null
    t_climb: number | null
    t_endgame: number | null
    t_ground_coral: number | null
    t_ground_algae: number | null
    ground_pickup: number | null
    defense: number | null
    driver_perf: number | null
    tippiness: number | null
  }

  export type MatchEntrySumAggregateOutputType = {
    match_num: number | null
    team_number: number | null
    scouter_num: number | null
    a_start_posit: number | null
    a_coral_first: number | null
    a_coral_second: number | null
    a_coral_third: number | null
    a_coral_fourth: number | null
    a_net: number | null
    a_proc: number | null
    t_coral_first: number | null
    t_coral_second: number | null
    t_coral_third: number | null
    t_coral_fourth: number | null
    t_net: number | null
    t_proc: number | null
    t_climb: number | null
    t_endgame: number | null
    t_ground_coral: number | null
    t_ground_algae: number | null
    ground_pickup: number | null
    defense: number | null
    driver_perf: number | null
    tippiness: number | null
  }

  export type MatchEntryMinAggregateOutputType = {
    id: string | null
    match_num: number | null
    name: string | null
    team_number: number | null
    scouter_num: number | null
    a_start_posit: number | null
    a_left_start: boolean | null
    a_coral_first: number | null
    a_coral_second: number | null
    a_coral_third: number | null
    a_coral_fourth: number | null
    a_net: number | null
    a_proc: number | null
    t_coral_first: number | null
    t_coral_second: number | null
    t_coral_third: number | null
    t_coral_fourth: number | null
    t_net: number | null
    t_proc: number | null
    t_climb: number | null
    t_endgame: number | null
    t_ground_coral: number | null
    t_ground_algae: number | null
    failed: boolean | null
    ground_pickup: number | null
    defense: number | null
    driver_perf: number | null
    tippiness: number | null
    comments: string | null
    updated: Date | null
    created: Date | null
  }

  export type MatchEntryMaxAggregateOutputType = {
    id: string | null
    match_num: number | null
    name: string | null
    team_number: number | null
    scouter_num: number | null
    a_start_posit: number | null
    a_left_start: boolean | null
    a_coral_first: number | null
    a_coral_second: number | null
    a_coral_third: number | null
    a_coral_fourth: number | null
    a_net: number | null
    a_proc: number | null
    t_coral_first: number | null
    t_coral_second: number | null
    t_coral_third: number | null
    t_coral_fourth: number | null
    t_net: number | null
    t_proc: number | null
    t_climb: number | null
    t_endgame: number | null
    t_ground_coral: number | null
    t_ground_algae: number | null
    failed: boolean | null
    ground_pickup: number | null
    defense: number | null
    driver_perf: number | null
    tippiness: number | null
    comments: string | null
    updated: Date | null
    created: Date | null
  }

  export type MatchEntryCountAggregateOutputType = {
    id: number
    match_num: number
    name: number
    team_number: number
    scouter_num: number
    a_start_posit: number
    a_left_start: number
    a_coral_first: number
    a_coral_second: number
    a_coral_third: number
    a_coral_fourth: number
    a_net: number
    a_proc: number
    t_coral_first: number
    t_coral_second: number
    t_coral_third: number
    t_coral_fourth: number
    t_net: number
    t_proc: number
    t_climb: number
    t_endgame: number
    t_ground_coral: number
    t_ground_algae: number
    failed: number
    ground_pickup: number
    defense: number
    driver_perf: number
    tippiness: number
    comments: number
    updated: number
    created: number
    _all: number
  }


  export type MatchEntryAvgAggregateInputType = {
    match_num?: true
    team_number?: true
    scouter_num?: true
    a_start_posit?: true
    a_coral_first?: true
    a_coral_second?: true
    a_coral_third?: true
    a_coral_fourth?: true
    a_net?: true
    a_proc?: true
    t_coral_first?: true
    t_coral_second?: true
    t_coral_third?: true
    t_coral_fourth?: true
    t_net?: true
    t_proc?: true
    t_climb?: true
    t_endgame?: true
    t_ground_coral?: true
    t_ground_algae?: true
    ground_pickup?: true
    defense?: true
    driver_perf?: true
    tippiness?: true
  }

  export type MatchEntrySumAggregateInputType = {
    match_num?: true
    team_number?: true
    scouter_num?: true
    a_start_posit?: true
    a_coral_first?: true
    a_coral_second?: true
    a_coral_third?: true
    a_coral_fourth?: true
    a_net?: true
    a_proc?: true
    t_coral_first?: true
    t_coral_second?: true
    t_coral_third?: true
    t_coral_fourth?: true
    t_net?: true
    t_proc?: true
    t_climb?: true
    t_endgame?: true
    t_ground_coral?: true
    t_ground_algae?: true
    ground_pickup?: true
    defense?: true
    driver_perf?: true
    tippiness?: true
  }

  export type MatchEntryMinAggregateInputType = {
    id?: true
    match_num?: true
    name?: true
    team_number?: true
    scouter_num?: true
    a_start_posit?: true
    a_left_start?: true
    a_coral_first?: true
    a_coral_second?: true
    a_coral_third?: true
    a_coral_fourth?: true
    a_net?: true
    a_proc?: true
    t_coral_first?: true
    t_coral_second?: true
    t_coral_third?: true
    t_coral_fourth?: true
    t_net?: true
    t_proc?: true
    t_climb?: true
    t_endgame?: true
    t_ground_coral?: true
    t_ground_algae?: true
    failed?: true
    ground_pickup?: true
    defense?: true
    driver_perf?: true
    tippiness?: true
    comments?: true
    updated?: true
    created?: true
  }

  export type MatchEntryMaxAggregateInputType = {
    id?: true
    match_num?: true
    name?: true
    team_number?: true
    scouter_num?: true
    a_start_posit?: true
    a_left_start?: true
    a_coral_first?: true
    a_coral_second?: true
    a_coral_third?: true
    a_coral_fourth?: true
    a_net?: true
    a_proc?: true
    t_coral_first?: true
    t_coral_second?: true
    t_coral_third?: true
    t_coral_fourth?: true
    t_net?: true
    t_proc?: true
    t_climb?: true
    t_endgame?: true
    t_ground_coral?: true
    t_ground_algae?: true
    failed?: true
    ground_pickup?: true
    defense?: true
    driver_perf?: true
    tippiness?: true
    comments?: true
    updated?: true
    created?: true
  }

  export type MatchEntryCountAggregateInputType = {
    id?: true
    match_num?: true
    name?: true
    team_number?: true
    scouter_num?: true
    a_start_posit?: true
    a_left_start?: true
    a_coral_first?: true
    a_coral_second?: true
    a_coral_third?: true
    a_coral_fourth?: true
    a_net?: true
    a_proc?: true
    t_coral_first?: true
    t_coral_second?: true
    t_coral_third?: true
    t_coral_fourth?: true
    t_net?: true
    t_proc?: true
    t_climb?: true
    t_endgame?: true
    t_ground_coral?: true
    t_ground_algae?: true
    failed?: true
    ground_pickup?: true
    defense?: true
    driver_perf?: true
    tippiness?: true
    comments?: true
    updated?: true
    created?: true
    _all?: true
  }

  export type MatchEntryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MatchEntry to aggregate.
     */
    where?: MatchEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchEntries to fetch.
     */
    orderBy?: MatchEntryOrderByWithRelationInput | MatchEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MatchEntries
    **/
    _count?: true | MatchEntryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MatchEntryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MatchEntrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchEntryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchEntryMaxAggregateInputType
  }

  export type GetMatchEntryAggregateType<T extends MatchEntryAggregateArgs> = {
        [P in keyof T & keyof AggregateMatchEntry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatchEntry[P]>
      : GetScalarType<T[P], AggregateMatchEntry[P]>
  }




  export type MatchEntryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchEntryWhereInput
    orderBy?: MatchEntryOrderByWithAggregationInput | MatchEntryOrderByWithAggregationInput[]
    by: MatchEntryScalarFieldEnum[] | MatchEntryScalarFieldEnum
    having?: MatchEntryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchEntryCountAggregateInputType | true
    _avg?: MatchEntryAvgAggregateInputType
    _sum?: MatchEntrySumAggregateInputType
    _min?: MatchEntryMinAggregateInputType
    _max?: MatchEntryMaxAggregateInputType
  }

  export type MatchEntryGroupByOutputType = {
    id: string
    match_num: number
    name: string
    team_number: number
    scouter_num: number
    a_start_posit: number
    a_left_start: boolean
    a_coral_first: number
    a_coral_second: number
    a_coral_third: number
    a_coral_fourth: number
    a_net: number
    a_proc: number
    t_coral_first: number
    t_coral_second: number
    t_coral_third: number
    t_coral_fourth: number
    t_net: number
    t_proc: number
    t_climb: number
    t_endgame: number
    t_ground_coral: number
    t_ground_algae: number
    failed: boolean
    ground_pickup: number
    defense: number
    driver_perf: number
    tippiness: number
    comments: string | null
    updated: Date
    created: Date
    _count: MatchEntryCountAggregateOutputType | null
    _avg: MatchEntryAvgAggregateOutputType | null
    _sum: MatchEntrySumAggregateOutputType | null
    _min: MatchEntryMinAggregateOutputType | null
    _max: MatchEntryMaxAggregateOutputType | null
  }

  type GetMatchEntryGroupByPayload<T extends MatchEntryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatchEntryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchEntryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchEntryGroupByOutputType[P]>
            : GetScalarType<T[P], MatchEntryGroupByOutputType[P]>
        }
      >
    >


  export type MatchEntrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    match_num?: boolean
    name?: boolean
    team_number?: boolean
    scouter_num?: boolean
    a_start_posit?: boolean
    a_left_start?: boolean
    a_coral_first?: boolean
    a_coral_second?: boolean
    a_coral_third?: boolean
    a_coral_fourth?: boolean
    a_net?: boolean
    a_proc?: boolean
    t_coral_first?: boolean
    t_coral_second?: boolean
    t_coral_third?: boolean
    t_coral_fourth?: boolean
    t_net?: boolean
    t_proc?: boolean
    t_climb?: boolean
    t_endgame?: boolean
    t_ground_coral?: boolean
    t_ground_algae?: boolean
    failed?: boolean
    ground_pickup?: boolean
    defense?: boolean
    driver_perf?: boolean
    tippiness?: boolean
    comments?: boolean
    updated?: boolean
    created?: boolean
  }, ExtArgs["result"]["matchEntry"]>


  export type MatchEntrySelectScalar = {
    id?: boolean
    match_num?: boolean
    name?: boolean
    team_number?: boolean
    scouter_num?: boolean
    a_start_posit?: boolean
    a_left_start?: boolean
    a_coral_first?: boolean
    a_coral_second?: boolean
    a_coral_third?: boolean
    a_coral_fourth?: boolean
    a_net?: boolean
    a_proc?: boolean
    t_coral_first?: boolean
    t_coral_second?: boolean
    t_coral_third?: boolean
    t_coral_fourth?: boolean
    t_net?: boolean
    t_proc?: boolean
    t_climb?: boolean
    t_endgame?: boolean
    t_ground_coral?: boolean
    t_ground_algae?: boolean
    failed?: boolean
    ground_pickup?: boolean
    defense?: boolean
    driver_perf?: boolean
    tippiness?: boolean
    comments?: boolean
    updated?: boolean
    created?: boolean
  }


  export type $MatchEntryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MatchEntry"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      match_num: number
      name: string
      team_number: number
      scouter_num: number
      a_start_posit: number
      a_left_start: boolean
      a_coral_first: number
      a_coral_second: number
      a_coral_third: number
      a_coral_fourth: number
      a_net: number
      a_proc: number
      t_coral_first: number
      t_coral_second: number
      t_coral_third: number
      t_coral_fourth: number
      t_net: number
      t_proc: number
      t_climb: number
      t_endgame: number
      t_ground_coral: number
      t_ground_algae: number
      failed: boolean
      ground_pickup: number
      defense: number
      driver_perf: number
      tippiness: number
      comments: string | null
      updated: Date
      created: Date
    }, ExtArgs["result"]["matchEntry"]>
    composites: {}
  }

  type MatchEntryGetPayload<S extends boolean | null | undefined | MatchEntryDefaultArgs> = $Result.GetResult<Prisma.$MatchEntryPayload, S>

  type MatchEntryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MatchEntryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MatchEntryCountAggregateInputType | true
    }

  export interface MatchEntryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MatchEntry'], meta: { name: 'MatchEntry' } }
    /**
     * Find zero or one MatchEntry that matches the filter.
     * @param {MatchEntryFindUniqueArgs} args - Arguments to find a MatchEntry
     * @example
     * // Get one MatchEntry
     * const matchEntry = await prisma.matchEntry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MatchEntryFindUniqueArgs>(args: SelectSubset<T, MatchEntryFindUniqueArgs<ExtArgs>>): Prisma__MatchEntryClient<$Result.GetResult<Prisma.$MatchEntryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MatchEntry that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MatchEntryFindUniqueOrThrowArgs} args - Arguments to find a MatchEntry
     * @example
     * // Get one MatchEntry
     * const matchEntry = await prisma.matchEntry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MatchEntryFindUniqueOrThrowArgs>(args: SelectSubset<T, MatchEntryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MatchEntryClient<$Result.GetResult<Prisma.$MatchEntryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MatchEntry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchEntryFindFirstArgs} args - Arguments to find a MatchEntry
     * @example
     * // Get one MatchEntry
     * const matchEntry = await prisma.matchEntry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MatchEntryFindFirstArgs>(args?: SelectSubset<T, MatchEntryFindFirstArgs<ExtArgs>>): Prisma__MatchEntryClient<$Result.GetResult<Prisma.$MatchEntryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MatchEntry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchEntryFindFirstOrThrowArgs} args - Arguments to find a MatchEntry
     * @example
     * // Get one MatchEntry
     * const matchEntry = await prisma.matchEntry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MatchEntryFindFirstOrThrowArgs>(args?: SelectSubset<T, MatchEntryFindFirstOrThrowArgs<ExtArgs>>): Prisma__MatchEntryClient<$Result.GetResult<Prisma.$MatchEntryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MatchEntries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchEntryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MatchEntries
     * const matchEntries = await prisma.matchEntry.findMany()
     * 
     * // Get first 10 MatchEntries
     * const matchEntries = await prisma.matchEntry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchEntryWithIdOnly = await prisma.matchEntry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MatchEntryFindManyArgs>(args?: SelectSubset<T, MatchEntryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchEntryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MatchEntry.
     * @param {MatchEntryCreateArgs} args - Arguments to create a MatchEntry.
     * @example
     * // Create one MatchEntry
     * const MatchEntry = await prisma.matchEntry.create({
     *   data: {
     *     // ... data to create a MatchEntry
     *   }
     * })
     * 
     */
    create<T extends MatchEntryCreateArgs>(args: SelectSubset<T, MatchEntryCreateArgs<ExtArgs>>): Prisma__MatchEntryClient<$Result.GetResult<Prisma.$MatchEntryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MatchEntries.
     * @param {MatchEntryCreateManyArgs} args - Arguments to create many MatchEntries.
     * @example
     * // Create many MatchEntries
     * const matchEntry = await prisma.matchEntry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MatchEntryCreateManyArgs>(args?: SelectSubset<T, MatchEntryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MatchEntry.
     * @param {MatchEntryDeleteArgs} args - Arguments to delete one MatchEntry.
     * @example
     * // Delete one MatchEntry
     * const MatchEntry = await prisma.matchEntry.delete({
     *   where: {
     *     // ... filter to delete one MatchEntry
     *   }
     * })
     * 
     */
    delete<T extends MatchEntryDeleteArgs>(args: SelectSubset<T, MatchEntryDeleteArgs<ExtArgs>>): Prisma__MatchEntryClient<$Result.GetResult<Prisma.$MatchEntryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MatchEntry.
     * @param {MatchEntryUpdateArgs} args - Arguments to update one MatchEntry.
     * @example
     * // Update one MatchEntry
     * const matchEntry = await prisma.matchEntry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MatchEntryUpdateArgs>(args: SelectSubset<T, MatchEntryUpdateArgs<ExtArgs>>): Prisma__MatchEntryClient<$Result.GetResult<Prisma.$MatchEntryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MatchEntries.
     * @param {MatchEntryDeleteManyArgs} args - Arguments to filter MatchEntries to delete.
     * @example
     * // Delete a few MatchEntries
     * const { count } = await prisma.matchEntry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MatchEntryDeleteManyArgs>(args?: SelectSubset<T, MatchEntryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MatchEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchEntryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MatchEntries
     * const matchEntry = await prisma.matchEntry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MatchEntryUpdateManyArgs>(args: SelectSubset<T, MatchEntryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MatchEntry.
     * @param {MatchEntryUpsertArgs} args - Arguments to update or create a MatchEntry.
     * @example
     * // Update or create a MatchEntry
     * const matchEntry = await prisma.matchEntry.upsert({
     *   create: {
     *     // ... data to create a MatchEntry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MatchEntry we want to update
     *   }
     * })
     */
    upsert<T extends MatchEntryUpsertArgs>(args: SelectSubset<T, MatchEntryUpsertArgs<ExtArgs>>): Prisma__MatchEntryClient<$Result.GetResult<Prisma.$MatchEntryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MatchEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchEntryCountArgs} args - Arguments to filter MatchEntries to count.
     * @example
     * // Count the number of MatchEntries
     * const count = await prisma.matchEntry.count({
     *   where: {
     *     // ... the filter for the MatchEntries we want to count
     *   }
     * })
    **/
    count<T extends MatchEntryCountArgs>(
      args?: Subset<T, MatchEntryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchEntryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MatchEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchEntryAggregateArgs>(args: Subset<T, MatchEntryAggregateArgs>): Prisma.PrismaPromise<GetMatchEntryAggregateType<T>>

    /**
     * Group by MatchEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchEntryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchEntryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchEntryGroupByArgs['orderBy'] }
        : { orderBy?: MatchEntryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchEntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MatchEntry model
   */
  readonly fields: MatchEntryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MatchEntry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MatchEntryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MatchEntry model
   */ 
  interface MatchEntryFieldRefs {
    readonly id: FieldRef<"MatchEntry", 'String'>
    readonly match_num: FieldRef<"MatchEntry", 'Int'>
    readonly name: FieldRef<"MatchEntry", 'String'>
    readonly team_number: FieldRef<"MatchEntry", 'Int'>
    readonly scouter_num: FieldRef<"MatchEntry", 'Int'>
    readonly a_start_posit: FieldRef<"MatchEntry", 'Int'>
    readonly a_left_start: FieldRef<"MatchEntry", 'Boolean'>
    readonly a_coral_first: FieldRef<"MatchEntry", 'Int'>
    readonly a_coral_second: FieldRef<"MatchEntry", 'Int'>
    readonly a_coral_third: FieldRef<"MatchEntry", 'Int'>
    readonly a_coral_fourth: FieldRef<"MatchEntry", 'Int'>
    readonly a_net: FieldRef<"MatchEntry", 'Int'>
    readonly a_proc: FieldRef<"MatchEntry", 'Int'>
    readonly t_coral_first: FieldRef<"MatchEntry", 'Int'>
    readonly t_coral_second: FieldRef<"MatchEntry", 'Int'>
    readonly t_coral_third: FieldRef<"MatchEntry", 'Int'>
    readonly t_coral_fourth: FieldRef<"MatchEntry", 'Int'>
    readonly t_net: FieldRef<"MatchEntry", 'Int'>
    readonly t_proc: FieldRef<"MatchEntry", 'Int'>
    readonly t_climb: FieldRef<"MatchEntry", 'Int'>
    readonly t_endgame: FieldRef<"MatchEntry", 'Int'>
    readonly t_ground_coral: FieldRef<"MatchEntry", 'Int'>
    readonly t_ground_algae: FieldRef<"MatchEntry", 'Int'>
    readonly failed: FieldRef<"MatchEntry", 'Boolean'>
    readonly ground_pickup: FieldRef<"MatchEntry", 'Int'>
    readonly defense: FieldRef<"MatchEntry", 'Int'>
    readonly driver_perf: FieldRef<"MatchEntry", 'Int'>
    readonly tippiness: FieldRef<"MatchEntry", 'Int'>
    readonly comments: FieldRef<"MatchEntry", 'String'>
    readonly updated: FieldRef<"MatchEntry", 'DateTime'>
    readonly created: FieldRef<"MatchEntry", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MatchEntry findUnique
   */
  export type MatchEntryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchEntry
     */
    select?: MatchEntrySelect<ExtArgs> | null
    /**
     * Filter, which MatchEntry to fetch.
     */
    where: MatchEntryWhereUniqueInput
  }

  /**
   * MatchEntry findUniqueOrThrow
   */
  export type MatchEntryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchEntry
     */
    select?: MatchEntrySelect<ExtArgs> | null
    /**
     * Filter, which MatchEntry to fetch.
     */
    where: MatchEntryWhereUniqueInput
  }

  /**
   * MatchEntry findFirst
   */
  export type MatchEntryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchEntry
     */
    select?: MatchEntrySelect<ExtArgs> | null
    /**
     * Filter, which MatchEntry to fetch.
     */
    where?: MatchEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchEntries to fetch.
     */
    orderBy?: MatchEntryOrderByWithRelationInput | MatchEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchEntries.
     */
    cursor?: MatchEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchEntries.
     */
    distinct?: MatchEntryScalarFieldEnum | MatchEntryScalarFieldEnum[]
  }

  /**
   * MatchEntry findFirstOrThrow
   */
  export type MatchEntryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchEntry
     */
    select?: MatchEntrySelect<ExtArgs> | null
    /**
     * Filter, which MatchEntry to fetch.
     */
    where?: MatchEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchEntries to fetch.
     */
    orderBy?: MatchEntryOrderByWithRelationInput | MatchEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchEntries.
     */
    cursor?: MatchEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchEntries.
     */
    distinct?: MatchEntryScalarFieldEnum | MatchEntryScalarFieldEnum[]
  }

  /**
   * MatchEntry findMany
   */
  export type MatchEntryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchEntry
     */
    select?: MatchEntrySelect<ExtArgs> | null
    /**
     * Filter, which MatchEntries to fetch.
     */
    where?: MatchEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchEntries to fetch.
     */
    orderBy?: MatchEntryOrderByWithRelationInput | MatchEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MatchEntries.
     */
    cursor?: MatchEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchEntries.
     */
    skip?: number
    distinct?: MatchEntryScalarFieldEnum | MatchEntryScalarFieldEnum[]
  }

  /**
   * MatchEntry create
   */
  export type MatchEntryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchEntry
     */
    select?: MatchEntrySelect<ExtArgs> | null
    /**
     * The data needed to create a MatchEntry.
     */
    data: XOR<MatchEntryCreateInput, MatchEntryUncheckedCreateInput>
  }

  /**
   * MatchEntry createMany
   */
  export type MatchEntryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MatchEntries.
     */
    data: MatchEntryCreateManyInput | MatchEntryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MatchEntry update
   */
  export type MatchEntryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchEntry
     */
    select?: MatchEntrySelect<ExtArgs> | null
    /**
     * The data needed to update a MatchEntry.
     */
    data: XOR<MatchEntryUpdateInput, MatchEntryUncheckedUpdateInput>
    /**
     * Choose, which MatchEntry to update.
     */
    where: MatchEntryWhereUniqueInput
  }

  /**
   * MatchEntry updateMany
   */
  export type MatchEntryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MatchEntries.
     */
    data: XOR<MatchEntryUpdateManyMutationInput, MatchEntryUncheckedUpdateManyInput>
    /**
     * Filter which MatchEntries to update
     */
    where?: MatchEntryWhereInput
  }

  /**
   * MatchEntry upsert
   */
  export type MatchEntryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchEntry
     */
    select?: MatchEntrySelect<ExtArgs> | null
    /**
     * The filter to search for the MatchEntry to update in case it exists.
     */
    where: MatchEntryWhereUniqueInput
    /**
     * In case the MatchEntry found by the `where` argument doesn't exist, create a new MatchEntry with this data.
     */
    create: XOR<MatchEntryCreateInput, MatchEntryUncheckedCreateInput>
    /**
     * In case the MatchEntry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchEntryUpdateInput, MatchEntryUncheckedUpdateInput>
  }

  /**
   * MatchEntry delete
   */
  export type MatchEntryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchEntry
     */
    select?: MatchEntrySelect<ExtArgs> | null
    /**
     * Filter which MatchEntry to delete.
     */
    where: MatchEntryWhereUniqueInput
  }

  /**
   * MatchEntry deleteMany
   */
  export type MatchEntryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MatchEntries to delete
     */
    where?: MatchEntryWhereInput
  }

  /**
   * MatchEntry without action
   */
  export type MatchEntryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchEntry
     */
    select?: MatchEntrySelect<ExtArgs> | null
  }


  /**
   * Model PitEntry
   */

  export type AggregatePitEntry = {
    _count: PitEntryCountAggregateOutputType | null
    _avg: PitEntryAvgAggregateOutputType | null
    _sum: PitEntrySumAggregateOutputType | null
    _min: PitEntryMinAggregateOutputType | null
    _max: PitEntryMaxAggregateOutputType | null
  }

  export type PitEntryAvgAggregateOutputType = {
    team_number: number | null
    drive_type: number | null
    auto_pts: number | null
    gp_level: number | null
  }

  export type PitEntrySumAggregateOutputType = {
    team_number: number | null
    drive_type: number | null
    auto_pts: number | null
    gp_level: number | null
  }

  export type PitEntryMinAggregateOutputType = {
    id: string | null
    team_number: number | null
    drive_type: number | null
    auto_pts: number | null
    hang_cap: boolean | null
    trap_cap: boolean | null
    gp_level: number | null
    comments: string | null
    mercy: boolean | null
    event_key: string | null
    updated: Date | null
    created: Date | null
  }

  export type PitEntryMaxAggregateOutputType = {
    id: string | null
    team_number: number | null
    drive_type: number | null
    auto_pts: number | null
    hang_cap: boolean | null
    trap_cap: boolean | null
    gp_level: number | null
    comments: string | null
    mercy: boolean | null
    event_key: string | null
    updated: Date | null
    created: Date | null
  }

  export type PitEntryCountAggregateOutputType = {
    id: number
    team_number: number
    drive_type: number
    auto_pts: number
    hang_cap: number
    trap_cap: number
    gp_level: number
    comments: number
    mercy: number
    event_key: number
    updated: number
    created: number
    _all: number
  }


  export type PitEntryAvgAggregateInputType = {
    team_number?: true
    drive_type?: true
    auto_pts?: true
    gp_level?: true
  }

  export type PitEntrySumAggregateInputType = {
    team_number?: true
    drive_type?: true
    auto_pts?: true
    gp_level?: true
  }

  export type PitEntryMinAggregateInputType = {
    id?: true
    team_number?: true
    drive_type?: true
    auto_pts?: true
    hang_cap?: true
    trap_cap?: true
    gp_level?: true
    comments?: true
    mercy?: true
    event_key?: true
    updated?: true
    created?: true
  }

  export type PitEntryMaxAggregateInputType = {
    id?: true
    team_number?: true
    drive_type?: true
    auto_pts?: true
    hang_cap?: true
    trap_cap?: true
    gp_level?: true
    comments?: true
    mercy?: true
    event_key?: true
    updated?: true
    created?: true
  }

  export type PitEntryCountAggregateInputType = {
    id?: true
    team_number?: true
    drive_type?: true
    auto_pts?: true
    hang_cap?: true
    trap_cap?: true
    gp_level?: true
    comments?: true
    mercy?: true
    event_key?: true
    updated?: true
    created?: true
    _all?: true
  }

  export type PitEntryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PitEntry to aggregate.
     */
    where?: PitEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PitEntries to fetch.
     */
    orderBy?: PitEntryOrderByWithRelationInput | PitEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PitEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PitEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PitEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PitEntries
    **/
    _count?: true | PitEntryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PitEntryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PitEntrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PitEntryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PitEntryMaxAggregateInputType
  }

  export type GetPitEntryAggregateType<T extends PitEntryAggregateArgs> = {
        [P in keyof T & keyof AggregatePitEntry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePitEntry[P]>
      : GetScalarType<T[P], AggregatePitEntry[P]>
  }




  export type PitEntryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PitEntryWhereInput
    orderBy?: PitEntryOrderByWithAggregationInput | PitEntryOrderByWithAggregationInput[]
    by: PitEntryScalarFieldEnum[] | PitEntryScalarFieldEnum
    having?: PitEntryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PitEntryCountAggregateInputType | true
    _avg?: PitEntryAvgAggregateInputType
    _sum?: PitEntrySumAggregateInputType
    _min?: PitEntryMinAggregateInputType
    _max?: PitEntryMaxAggregateInputType
  }

  export type PitEntryGroupByOutputType = {
    id: string
    team_number: number
    drive_type: number
    auto_pts: number
    hang_cap: boolean
    trap_cap: boolean
    gp_level: number
    comments: string
    mercy: boolean
    event_key: string
    updated: Date
    created: Date
    _count: PitEntryCountAggregateOutputType | null
    _avg: PitEntryAvgAggregateOutputType | null
    _sum: PitEntrySumAggregateOutputType | null
    _min: PitEntryMinAggregateOutputType | null
    _max: PitEntryMaxAggregateOutputType | null
  }

  type GetPitEntryGroupByPayload<T extends PitEntryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PitEntryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PitEntryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PitEntryGroupByOutputType[P]>
            : GetScalarType<T[P], PitEntryGroupByOutputType[P]>
        }
      >
    >


  export type PitEntrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    team_number?: boolean
    drive_type?: boolean
    auto_pts?: boolean
    hang_cap?: boolean
    trap_cap?: boolean
    gp_level?: boolean
    comments?: boolean
    mercy?: boolean
    event_key?: boolean
    updated?: boolean
    created?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pitEntry"]>


  export type PitEntrySelectScalar = {
    id?: boolean
    team_number?: boolean
    drive_type?: boolean
    auto_pts?: boolean
    hang_cap?: boolean
    trap_cap?: boolean
    gp_level?: boolean
    comments?: boolean
    mercy?: boolean
    event_key?: boolean
    updated?: boolean
    created?: boolean
  }

  export type PitEntryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }

  export type $PitEntryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PitEntry"
    objects: {
      team: Prisma.$TeamPayload<ExtArgs>
      event: Prisma.$EventPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      team_number: number
      drive_type: number
      auto_pts: number
      hang_cap: boolean
      trap_cap: boolean
      gp_level: number
      comments: string
      mercy: boolean
      event_key: string
      updated: Date
      created: Date
    }, ExtArgs["result"]["pitEntry"]>
    composites: {}
  }

  type PitEntryGetPayload<S extends boolean | null | undefined | PitEntryDefaultArgs> = $Result.GetResult<Prisma.$PitEntryPayload, S>

  type PitEntryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PitEntryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PitEntryCountAggregateInputType | true
    }

  export interface PitEntryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PitEntry'], meta: { name: 'PitEntry' } }
    /**
     * Find zero or one PitEntry that matches the filter.
     * @param {PitEntryFindUniqueArgs} args - Arguments to find a PitEntry
     * @example
     * // Get one PitEntry
     * const pitEntry = await prisma.pitEntry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PitEntryFindUniqueArgs>(args: SelectSubset<T, PitEntryFindUniqueArgs<ExtArgs>>): Prisma__PitEntryClient<$Result.GetResult<Prisma.$PitEntryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PitEntry that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PitEntryFindUniqueOrThrowArgs} args - Arguments to find a PitEntry
     * @example
     * // Get one PitEntry
     * const pitEntry = await prisma.pitEntry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PitEntryFindUniqueOrThrowArgs>(args: SelectSubset<T, PitEntryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PitEntryClient<$Result.GetResult<Prisma.$PitEntryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PitEntry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PitEntryFindFirstArgs} args - Arguments to find a PitEntry
     * @example
     * // Get one PitEntry
     * const pitEntry = await prisma.pitEntry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PitEntryFindFirstArgs>(args?: SelectSubset<T, PitEntryFindFirstArgs<ExtArgs>>): Prisma__PitEntryClient<$Result.GetResult<Prisma.$PitEntryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PitEntry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PitEntryFindFirstOrThrowArgs} args - Arguments to find a PitEntry
     * @example
     * // Get one PitEntry
     * const pitEntry = await prisma.pitEntry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PitEntryFindFirstOrThrowArgs>(args?: SelectSubset<T, PitEntryFindFirstOrThrowArgs<ExtArgs>>): Prisma__PitEntryClient<$Result.GetResult<Prisma.$PitEntryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PitEntries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PitEntryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PitEntries
     * const pitEntries = await prisma.pitEntry.findMany()
     * 
     * // Get first 10 PitEntries
     * const pitEntries = await prisma.pitEntry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pitEntryWithIdOnly = await prisma.pitEntry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PitEntryFindManyArgs>(args?: SelectSubset<T, PitEntryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PitEntryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PitEntry.
     * @param {PitEntryCreateArgs} args - Arguments to create a PitEntry.
     * @example
     * // Create one PitEntry
     * const PitEntry = await prisma.pitEntry.create({
     *   data: {
     *     // ... data to create a PitEntry
     *   }
     * })
     * 
     */
    create<T extends PitEntryCreateArgs>(args: SelectSubset<T, PitEntryCreateArgs<ExtArgs>>): Prisma__PitEntryClient<$Result.GetResult<Prisma.$PitEntryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PitEntries.
     * @param {PitEntryCreateManyArgs} args - Arguments to create many PitEntries.
     * @example
     * // Create many PitEntries
     * const pitEntry = await prisma.pitEntry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PitEntryCreateManyArgs>(args?: SelectSubset<T, PitEntryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PitEntry.
     * @param {PitEntryDeleteArgs} args - Arguments to delete one PitEntry.
     * @example
     * // Delete one PitEntry
     * const PitEntry = await prisma.pitEntry.delete({
     *   where: {
     *     // ... filter to delete one PitEntry
     *   }
     * })
     * 
     */
    delete<T extends PitEntryDeleteArgs>(args: SelectSubset<T, PitEntryDeleteArgs<ExtArgs>>): Prisma__PitEntryClient<$Result.GetResult<Prisma.$PitEntryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PitEntry.
     * @param {PitEntryUpdateArgs} args - Arguments to update one PitEntry.
     * @example
     * // Update one PitEntry
     * const pitEntry = await prisma.pitEntry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PitEntryUpdateArgs>(args: SelectSubset<T, PitEntryUpdateArgs<ExtArgs>>): Prisma__PitEntryClient<$Result.GetResult<Prisma.$PitEntryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PitEntries.
     * @param {PitEntryDeleteManyArgs} args - Arguments to filter PitEntries to delete.
     * @example
     * // Delete a few PitEntries
     * const { count } = await prisma.pitEntry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PitEntryDeleteManyArgs>(args?: SelectSubset<T, PitEntryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PitEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PitEntryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PitEntries
     * const pitEntry = await prisma.pitEntry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PitEntryUpdateManyArgs>(args: SelectSubset<T, PitEntryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PitEntry.
     * @param {PitEntryUpsertArgs} args - Arguments to update or create a PitEntry.
     * @example
     * // Update or create a PitEntry
     * const pitEntry = await prisma.pitEntry.upsert({
     *   create: {
     *     // ... data to create a PitEntry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PitEntry we want to update
     *   }
     * })
     */
    upsert<T extends PitEntryUpsertArgs>(args: SelectSubset<T, PitEntryUpsertArgs<ExtArgs>>): Prisma__PitEntryClient<$Result.GetResult<Prisma.$PitEntryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PitEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PitEntryCountArgs} args - Arguments to filter PitEntries to count.
     * @example
     * // Count the number of PitEntries
     * const count = await prisma.pitEntry.count({
     *   where: {
     *     // ... the filter for the PitEntries we want to count
     *   }
     * })
    **/
    count<T extends PitEntryCountArgs>(
      args?: Subset<T, PitEntryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PitEntryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PitEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PitEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PitEntryAggregateArgs>(args: Subset<T, PitEntryAggregateArgs>): Prisma.PrismaPromise<GetPitEntryAggregateType<T>>

    /**
     * Group by PitEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PitEntryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PitEntryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PitEntryGroupByArgs['orderBy'] }
        : { orderBy?: PitEntryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PitEntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPitEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PitEntry model
   */
  readonly fields: PitEntryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PitEntry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PitEntryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PitEntry model
   */ 
  interface PitEntryFieldRefs {
    readonly id: FieldRef<"PitEntry", 'String'>
    readonly team_number: FieldRef<"PitEntry", 'Int'>
    readonly drive_type: FieldRef<"PitEntry", 'Int'>
    readonly auto_pts: FieldRef<"PitEntry", 'Int'>
    readonly hang_cap: FieldRef<"PitEntry", 'Boolean'>
    readonly trap_cap: FieldRef<"PitEntry", 'Boolean'>
    readonly gp_level: FieldRef<"PitEntry", 'Int'>
    readonly comments: FieldRef<"PitEntry", 'String'>
    readonly mercy: FieldRef<"PitEntry", 'Boolean'>
    readonly event_key: FieldRef<"PitEntry", 'String'>
    readonly updated: FieldRef<"PitEntry", 'DateTime'>
    readonly created: FieldRef<"PitEntry", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PitEntry findUnique
   */
  export type PitEntryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PitEntry
     */
    select?: PitEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PitEntryInclude<ExtArgs> | null
    /**
     * Filter, which PitEntry to fetch.
     */
    where: PitEntryWhereUniqueInput
  }

  /**
   * PitEntry findUniqueOrThrow
   */
  export type PitEntryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PitEntry
     */
    select?: PitEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PitEntryInclude<ExtArgs> | null
    /**
     * Filter, which PitEntry to fetch.
     */
    where: PitEntryWhereUniqueInput
  }

  /**
   * PitEntry findFirst
   */
  export type PitEntryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PitEntry
     */
    select?: PitEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PitEntryInclude<ExtArgs> | null
    /**
     * Filter, which PitEntry to fetch.
     */
    where?: PitEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PitEntries to fetch.
     */
    orderBy?: PitEntryOrderByWithRelationInput | PitEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PitEntries.
     */
    cursor?: PitEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PitEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PitEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PitEntries.
     */
    distinct?: PitEntryScalarFieldEnum | PitEntryScalarFieldEnum[]
  }

  /**
   * PitEntry findFirstOrThrow
   */
  export type PitEntryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PitEntry
     */
    select?: PitEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PitEntryInclude<ExtArgs> | null
    /**
     * Filter, which PitEntry to fetch.
     */
    where?: PitEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PitEntries to fetch.
     */
    orderBy?: PitEntryOrderByWithRelationInput | PitEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PitEntries.
     */
    cursor?: PitEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PitEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PitEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PitEntries.
     */
    distinct?: PitEntryScalarFieldEnum | PitEntryScalarFieldEnum[]
  }

  /**
   * PitEntry findMany
   */
  export type PitEntryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PitEntry
     */
    select?: PitEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PitEntryInclude<ExtArgs> | null
    /**
     * Filter, which PitEntries to fetch.
     */
    where?: PitEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PitEntries to fetch.
     */
    orderBy?: PitEntryOrderByWithRelationInput | PitEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PitEntries.
     */
    cursor?: PitEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PitEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PitEntries.
     */
    skip?: number
    distinct?: PitEntryScalarFieldEnum | PitEntryScalarFieldEnum[]
  }

  /**
   * PitEntry create
   */
  export type PitEntryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PitEntry
     */
    select?: PitEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PitEntryInclude<ExtArgs> | null
    /**
     * The data needed to create a PitEntry.
     */
    data: XOR<PitEntryCreateInput, PitEntryUncheckedCreateInput>
  }

  /**
   * PitEntry createMany
   */
  export type PitEntryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PitEntries.
     */
    data: PitEntryCreateManyInput | PitEntryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PitEntry update
   */
  export type PitEntryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PitEntry
     */
    select?: PitEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PitEntryInclude<ExtArgs> | null
    /**
     * The data needed to update a PitEntry.
     */
    data: XOR<PitEntryUpdateInput, PitEntryUncheckedUpdateInput>
    /**
     * Choose, which PitEntry to update.
     */
    where: PitEntryWhereUniqueInput
  }

  /**
   * PitEntry updateMany
   */
  export type PitEntryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PitEntries.
     */
    data: XOR<PitEntryUpdateManyMutationInput, PitEntryUncheckedUpdateManyInput>
    /**
     * Filter which PitEntries to update
     */
    where?: PitEntryWhereInput
  }

  /**
   * PitEntry upsert
   */
  export type PitEntryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PitEntry
     */
    select?: PitEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PitEntryInclude<ExtArgs> | null
    /**
     * The filter to search for the PitEntry to update in case it exists.
     */
    where: PitEntryWhereUniqueInput
    /**
     * In case the PitEntry found by the `where` argument doesn't exist, create a new PitEntry with this data.
     */
    create: XOR<PitEntryCreateInput, PitEntryUncheckedCreateInput>
    /**
     * In case the PitEntry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PitEntryUpdateInput, PitEntryUncheckedUpdateInput>
  }

  /**
   * PitEntry delete
   */
  export type PitEntryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PitEntry
     */
    select?: PitEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PitEntryInclude<ExtArgs> | null
    /**
     * Filter which PitEntry to delete.
     */
    where: PitEntryWhereUniqueInput
  }

  /**
   * PitEntry deleteMany
   */
  export type PitEntryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PitEntries to delete
     */
    where?: PitEntryWhereInput
  }

  /**
   * PitEntry without action
   */
  export type PitEntryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PitEntry
     */
    select?: PitEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PitEntryInclude<ExtArgs> | null
  }


  /**
   * Model Server
   */

  export type AggregateServer = {
    _count: ServerCountAggregateOutputType | null
    _avg: ServerAvgAggregateOutputType | null
    _sum: ServerSumAggregateOutputType | null
    _min: ServerMinAggregateOutputType | null
    _max: ServerMaxAggregateOutputType | null
  }

  export type ServerAvgAggregateOutputType = {
    team: number | null
  }

  export type ServerSumAggregateOutputType = {
    team: number | null
  }

  export type ServerMinAggregateOutputType = {
    id: string | null
    name: string | null
    team: number | null
    desc: string | null
    api: string | null
    endpoint: string | null
    auth_required: boolean | null
  }

  export type ServerMaxAggregateOutputType = {
    id: string | null
    name: string | null
    team: number | null
    desc: string | null
    api: string | null
    endpoint: string | null
    auth_required: boolean | null
  }

  export type ServerCountAggregateOutputType = {
    id: number
    name: number
    team: number
    desc: number
    api: number
    endpoint: number
    auth_required: number
    _all: number
  }


  export type ServerAvgAggregateInputType = {
    team?: true
  }

  export type ServerSumAggregateInputType = {
    team?: true
  }

  export type ServerMinAggregateInputType = {
    id?: true
    name?: true
    team?: true
    desc?: true
    api?: true
    endpoint?: true
    auth_required?: true
  }

  export type ServerMaxAggregateInputType = {
    id?: true
    name?: true
    team?: true
    desc?: true
    api?: true
    endpoint?: true
    auth_required?: true
  }

  export type ServerCountAggregateInputType = {
    id?: true
    name?: true
    team?: true
    desc?: true
    api?: true
    endpoint?: true
    auth_required?: true
    _all?: true
  }

  export type ServerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Server to aggregate.
     */
    where?: ServerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servers to fetch.
     */
    orderBy?: ServerOrderByWithRelationInput | ServerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Servers
    **/
    _count?: true | ServerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServerMaxAggregateInputType
  }

  export type GetServerAggregateType<T extends ServerAggregateArgs> = {
        [P in keyof T & keyof AggregateServer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServer[P]>
      : GetScalarType<T[P], AggregateServer[P]>
  }




  export type ServerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServerWhereInput
    orderBy?: ServerOrderByWithAggregationInput | ServerOrderByWithAggregationInput[]
    by: ServerScalarFieldEnum[] | ServerScalarFieldEnum
    having?: ServerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServerCountAggregateInputType | true
    _avg?: ServerAvgAggregateInputType
    _sum?: ServerSumAggregateInputType
    _min?: ServerMinAggregateInputType
    _max?: ServerMaxAggregateInputType
  }

  export type ServerGroupByOutputType = {
    id: string
    name: string
    team: number
    desc: string
    api: string
    endpoint: string
    auth_required: boolean
    _count: ServerCountAggregateOutputType | null
    _avg: ServerAvgAggregateOutputType | null
    _sum: ServerSumAggregateOutputType | null
    _min: ServerMinAggregateOutputType | null
    _max: ServerMaxAggregateOutputType | null
  }

  type GetServerGroupByPayload<T extends ServerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServerGroupByOutputType[P]>
            : GetScalarType<T[P], ServerGroupByOutputType[P]>
        }
      >
    >


  export type ServerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    team?: boolean
    desc?: boolean
    api?: boolean
    endpoint?: boolean
    auth_required?: boolean
  }, ExtArgs["result"]["server"]>


  export type ServerSelectScalar = {
    id?: boolean
    name?: boolean
    team?: boolean
    desc?: boolean
    api?: boolean
    endpoint?: boolean
    auth_required?: boolean
  }


  export type $ServerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Server"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      team: number
      desc: string
      api: string
      endpoint: string
      auth_required: boolean
    }, ExtArgs["result"]["server"]>
    composites: {}
  }

  type ServerGetPayload<S extends boolean | null | undefined | ServerDefaultArgs> = $Result.GetResult<Prisma.$ServerPayload, S>

  type ServerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ServerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ServerCountAggregateInputType | true
    }

  export interface ServerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Server'], meta: { name: 'Server' } }
    /**
     * Find zero or one Server that matches the filter.
     * @param {ServerFindUniqueArgs} args - Arguments to find a Server
     * @example
     * // Get one Server
     * const server = await prisma.server.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServerFindUniqueArgs>(args: SelectSubset<T, ServerFindUniqueArgs<ExtArgs>>): Prisma__ServerClient<$Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Server that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ServerFindUniqueOrThrowArgs} args - Arguments to find a Server
     * @example
     * // Get one Server
     * const server = await prisma.server.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServerFindUniqueOrThrowArgs>(args: SelectSubset<T, ServerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServerClient<$Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Server that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServerFindFirstArgs} args - Arguments to find a Server
     * @example
     * // Get one Server
     * const server = await prisma.server.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServerFindFirstArgs>(args?: SelectSubset<T, ServerFindFirstArgs<ExtArgs>>): Prisma__ServerClient<$Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Server that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServerFindFirstOrThrowArgs} args - Arguments to find a Server
     * @example
     * // Get one Server
     * const server = await prisma.server.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServerFindFirstOrThrowArgs>(args?: SelectSubset<T, ServerFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServerClient<$Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Servers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Servers
     * const servers = await prisma.server.findMany()
     * 
     * // Get first 10 Servers
     * const servers = await prisma.server.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serverWithIdOnly = await prisma.server.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServerFindManyArgs>(args?: SelectSubset<T, ServerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Server.
     * @param {ServerCreateArgs} args - Arguments to create a Server.
     * @example
     * // Create one Server
     * const Server = await prisma.server.create({
     *   data: {
     *     // ... data to create a Server
     *   }
     * })
     * 
     */
    create<T extends ServerCreateArgs>(args: SelectSubset<T, ServerCreateArgs<ExtArgs>>): Prisma__ServerClient<$Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Servers.
     * @param {ServerCreateManyArgs} args - Arguments to create many Servers.
     * @example
     * // Create many Servers
     * const server = await prisma.server.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServerCreateManyArgs>(args?: SelectSubset<T, ServerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Server.
     * @param {ServerDeleteArgs} args - Arguments to delete one Server.
     * @example
     * // Delete one Server
     * const Server = await prisma.server.delete({
     *   where: {
     *     // ... filter to delete one Server
     *   }
     * })
     * 
     */
    delete<T extends ServerDeleteArgs>(args: SelectSubset<T, ServerDeleteArgs<ExtArgs>>): Prisma__ServerClient<$Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Server.
     * @param {ServerUpdateArgs} args - Arguments to update one Server.
     * @example
     * // Update one Server
     * const server = await prisma.server.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServerUpdateArgs>(args: SelectSubset<T, ServerUpdateArgs<ExtArgs>>): Prisma__ServerClient<$Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Servers.
     * @param {ServerDeleteManyArgs} args - Arguments to filter Servers to delete.
     * @example
     * // Delete a few Servers
     * const { count } = await prisma.server.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServerDeleteManyArgs>(args?: SelectSubset<T, ServerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Servers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Servers
     * const server = await prisma.server.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServerUpdateManyArgs>(args: SelectSubset<T, ServerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Server.
     * @param {ServerUpsertArgs} args - Arguments to update or create a Server.
     * @example
     * // Update or create a Server
     * const server = await prisma.server.upsert({
     *   create: {
     *     // ... data to create a Server
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Server we want to update
     *   }
     * })
     */
    upsert<T extends ServerUpsertArgs>(args: SelectSubset<T, ServerUpsertArgs<ExtArgs>>): Prisma__ServerClient<$Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Servers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServerCountArgs} args - Arguments to filter Servers to count.
     * @example
     * // Count the number of Servers
     * const count = await prisma.server.count({
     *   where: {
     *     // ... the filter for the Servers we want to count
     *   }
     * })
    **/
    count<T extends ServerCountArgs>(
      args?: Subset<T, ServerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Server.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServerAggregateArgs>(args: Subset<T, ServerAggregateArgs>): Prisma.PrismaPromise<GetServerAggregateType<T>>

    /**
     * Group by Server.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServerGroupByArgs['orderBy'] }
        : { orderBy?: ServerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Server model
   */
  readonly fields: ServerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Server.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Server model
   */ 
  interface ServerFieldRefs {
    readonly id: FieldRef<"Server", 'String'>
    readonly name: FieldRef<"Server", 'String'>
    readonly team: FieldRef<"Server", 'Int'>
    readonly desc: FieldRef<"Server", 'String'>
    readonly api: FieldRef<"Server", 'String'>
    readonly endpoint: FieldRef<"Server", 'String'>
    readonly auth_required: FieldRef<"Server", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Server findUnique
   */
  export type ServerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Server
     */
    select?: ServerSelect<ExtArgs> | null
    /**
     * Filter, which Server to fetch.
     */
    where: ServerWhereUniqueInput
  }

  /**
   * Server findUniqueOrThrow
   */
  export type ServerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Server
     */
    select?: ServerSelect<ExtArgs> | null
    /**
     * Filter, which Server to fetch.
     */
    where: ServerWhereUniqueInput
  }

  /**
   * Server findFirst
   */
  export type ServerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Server
     */
    select?: ServerSelect<ExtArgs> | null
    /**
     * Filter, which Server to fetch.
     */
    where?: ServerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servers to fetch.
     */
    orderBy?: ServerOrderByWithRelationInput | ServerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Servers.
     */
    cursor?: ServerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Servers.
     */
    distinct?: ServerScalarFieldEnum | ServerScalarFieldEnum[]
  }

  /**
   * Server findFirstOrThrow
   */
  export type ServerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Server
     */
    select?: ServerSelect<ExtArgs> | null
    /**
     * Filter, which Server to fetch.
     */
    where?: ServerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servers to fetch.
     */
    orderBy?: ServerOrderByWithRelationInput | ServerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Servers.
     */
    cursor?: ServerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Servers.
     */
    distinct?: ServerScalarFieldEnum | ServerScalarFieldEnum[]
  }

  /**
   * Server findMany
   */
  export type ServerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Server
     */
    select?: ServerSelect<ExtArgs> | null
    /**
     * Filter, which Servers to fetch.
     */
    where?: ServerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servers to fetch.
     */
    orderBy?: ServerOrderByWithRelationInput | ServerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Servers.
     */
    cursor?: ServerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servers.
     */
    skip?: number
    distinct?: ServerScalarFieldEnum | ServerScalarFieldEnum[]
  }

  /**
   * Server create
   */
  export type ServerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Server
     */
    select?: ServerSelect<ExtArgs> | null
    /**
     * The data needed to create a Server.
     */
    data: XOR<ServerCreateInput, ServerUncheckedCreateInput>
  }

  /**
   * Server createMany
   */
  export type ServerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Servers.
     */
    data: ServerCreateManyInput | ServerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Server update
   */
  export type ServerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Server
     */
    select?: ServerSelect<ExtArgs> | null
    /**
     * The data needed to update a Server.
     */
    data: XOR<ServerUpdateInput, ServerUncheckedUpdateInput>
    /**
     * Choose, which Server to update.
     */
    where: ServerWhereUniqueInput
  }

  /**
   * Server updateMany
   */
  export type ServerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Servers.
     */
    data: XOR<ServerUpdateManyMutationInput, ServerUncheckedUpdateManyInput>
    /**
     * Filter which Servers to update
     */
    where?: ServerWhereInput
  }

  /**
   * Server upsert
   */
  export type ServerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Server
     */
    select?: ServerSelect<ExtArgs> | null
    /**
     * The filter to search for the Server to update in case it exists.
     */
    where: ServerWhereUniqueInput
    /**
     * In case the Server found by the `where` argument doesn't exist, create a new Server with this data.
     */
    create: XOR<ServerCreateInput, ServerUncheckedCreateInput>
    /**
     * In case the Server was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServerUpdateInput, ServerUncheckedUpdateInput>
  }

  /**
   * Server delete
   */
  export type ServerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Server
     */
    select?: ServerSelect<ExtArgs> | null
    /**
     * Filter which Server to delete.
     */
    where: ServerWhereUniqueInput
  }

  /**
   * Server deleteMany
   */
  export type ServerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Servers to delete
     */
    where?: ServerWhereInput
  }

  /**
   * Server without action
   */
  export type ServerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Server
     */
    select?: ServerSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    key: 'key',
    fname: 'fname',
    lname: 'lname',
    uname: 'uname',
    pass: 'pass'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const EventScalarFieldEnum: {
    key: 'key',
    name: 'name',
    type: 'type',
    start_date: 'start_date',
    end_date: 'end_date',
    updated: 'updated',
    created: 'created'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const MatchScalarFieldEnum: {
    key: 'key',
    eventId: 'eventId'
  };

  export type MatchScalarFieldEnum = (typeof MatchScalarFieldEnum)[keyof typeof MatchScalarFieldEnum]


  export const ScheduleScalarFieldEnum: {
    key: 'key',
    uname: 'uname',
    position: 'position',
    matchId: 'matchId'
  };

  export type ScheduleScalarFieldEnum = (typeof ScheduleScalarFieldEnum)[keyof typeof ScheduleScalarFieldEnum]


  export const AllianceScalarFieldEnum: {
    id: 'id',
    eventId: 'eventId',
    matchId: 'matchId',
    color: 'color',
    matchColor: 'matchColor'
  };

  export type AllianceScalarFieldEnum = (typeof AllianceScalarFieldEnum)[keyof typeof AllianceScalarFieldEnum]


  export const TeamScalarFieldEnum: {
    tba_key: 'tba_key',
    team_number: 'team_number',
    nickname: 'nickname',
    logo: 'logo'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const MatchEntryScalarFieldEnum: {
    id: 'id',
    match_num: 'match_num',
    name: 'name',
    team_number: 'team_number',
    scouter_num: 'scouter_num',
    a_start_posit: 'a_start_posit',
    a_left_start: 'a_left_start',
    a_coral_first: 'a_coral_first',
    a_coral_second: 'a_coral_second',
    a_coral_third: 'a_coral_third',
    a_coral_fourth: 'a_coral_fourth',
    a_net: 'a_net',
    a_proc: 'a_proc',
    t_coral_first: 't_coral_first',
    t_coral_second: 't_coral_second',
    t_coral_third: 't_coral_third',
    t_coral_fourth: 't_coral_fourth',
    t_net: 't_net',
    t_proc: 't_proc',
    t_climb: 't_climb',
    t_endgame: 't_endgame',
    t_ground_coral: 't_ground_coral',
    t_ground_algae: 't_ground_algae',
    failed: 'failed',
    ground_pickup: 'ground_pickup',
    defense: 'defense',
    driver_perf: 'driver_perf',
    tippiness: 'tippiness',
    comments: 'comments',
    updated: 'updated',
    created: 'created'
  };

  export type MatchEntryScalarFieldEnum = (typeof MatchEntryScalarFieldEnum)[keyof typeof MatchEntryScalarFieldEnum]


  export const PitEntryScalarFieldEnum: {
    id: 'id',
    team_number: 'team_number',
    drive_type: 'drive_type',
    auto_pts: 'auto_pts',
    hang_cap: 'hang_cap',
    trap_cap: 'trap_cap',
    gp_level: 'gp_level',
    comments: 'comments',
    mercy: 'mercy',
    event_key: 'event_key',
    updated: 'updated',
    created: 'created'
  };

  export type PitEntryScalarFieldEnum = (typeof PitEntryScalarFieldEnum)[keyof typeof PitEntryScalarFieldEnum]


  export const ServerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    team: 'team',
    desc: 'desc',
    api: 'api',
    endpoint: 'endpoint',
    auth_required: 'auth_required'
  };

  export type ServerScalarFieldEnum = (typeof ServerScalarFieldEnum)[keyof typeof ServerScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'EventType'
   */
  export type EnumEventTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EventType'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'AllianceColor'
   */
  export type EnumAllianceColorFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AllianceColor'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    key?: IntFilter<"User"> | number
    fname?: StringFilter<"User"> | string
    lname?: StringFilter<"User"> | string
    uname?: StringFilter<"User"> | string
    pass?: StringFilter<"User"> | string
  }

  export type UserOrderByWithRelationInput = {
    key?: SortOrder
    fname?: SortOrder
    lname?: SortOrder
    uname?: SortOrder
    pass?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    key?: number
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    fname?: StringFilter<"User"> | string
    lname?: StringFilter<"User"> | string
    uname?: StringFilter<"User"> | string
    pass?: StringFilter<"User"> | string
  }, "key" | "key">

  export type UserOrderByWithAggregationInput = {
    key?: SortOrder
    fname?: SortOrder
    lname?: SortOrder
    uname?: SortOrder
    pass?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    key?: IntWithAggregatesFilter<"User"> | number
    fname?: StringWithAggregatesFilter<"User"> | string
    lname?: StringWithAggregatesFilter<"User"> | string
    uname?: StringWithAggregatesFilter<"User"> | string
    pass?: StringWithAggregatesFilter<"User"> | string
  }

  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    key?: StringFilter<"Event"> | string
    name?: StringFilter<"Event"> | string
    type?: EnumEventTypeFilter<"Event"> | $Enums.EventType
    start_date?: DateTimeFilter<"Event"> | Date | string
    end_date?: DateTimeFilter<"Event"> | Date | string
    updated?: DateTimeFilter<"Event"> | Date | string
    created?: DateTimeFilter<"Event"> | Date | string
    teams?: TeamListRelationFilter
    matches?: MatchListRelationFilter
    alliances?: AllianceListRelationFilter
    pitEntrys?: PitEntryListRelationFilter
  }

  export type EventOrderByWithRelationInput = {
    key?: SortOrder
    name?: SortOrder
    type?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    updated?: SortOrder
    created?: SortOrder
    teams?: TeamOrderByRelationAggregateInput
    matches?: MatchOrderByRelationAggregateInput
    alliances?: AllianceOrderByRelationAggregateInput
    pitEntrys?: PitEntryOrderByRelationAggregateInput
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    key?: string
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    name?: StringFilter<"Event"> | string
    type?: EnumEventTypeFilter<"Event"> | $Enums.EventType
    start_date?: DateTimeFilter<"Event"> | Date | string
    end_date?: DateTimeFilter<"Event"> | Date | string
    updated?: DateTimeFilter<"Event"> | Date | string
    created?: DateTimeFilter<"Event"> | Date | string
    teams?: TeamListRelationFilter
    matches?: MatchListRelationFilter
    alliances?: AllianceListRelationFilter
    pitEntrys?: PitEntryListRelationFilter
  }, "key" | "key">

  export type EventOrderByWithAggregationInput = {
    key?: SortOrder
    name?: SortOrder
    type?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    updated?: SortOrder
    created?: SortOrder
    _count?: EventCountOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    key?: StringWithAggregatesFilter<"Event"> | string
    name?: StringWithAggregatesFilter<"Event"> | string
    type?: EnumEventTypeWithAggregatesFilter<"Event"> | $Enums.EventType
    start_date?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    end_date?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    updated?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    created?: DateTimeWithAggregatesFilter<"Event"> | Date | string
  }

  export type MatchWhereInput = {
    AND?: MatchWhereInput | MatchWhereInput[]
    OR?: MatchWhereInput[]
    NOT?: MatchWhereInput | MatchWhereInput[]
    key?: StringFilter<"Match"> | string
    eventId?: StringFilter<"Match"> | string
    event?: XOR<EventRelationFilter, EventWhereInput>
    alliances?: AllianceListRelationFilter
    schedules?: ScheduleListRelationFilter
  }

  export type MatchOrderByWithRelationInput = {
    key?: SortOrder
    eventId?: SortOrder
    event?: EventOrderByWithRelationInput
    alliances?: AllianceOrderByRelationAggregateInput
    schedules?: ScheduleOrderByRelationAggregateInput
  }

  export type MatchWhereUniqueInput = Prisma.AtLeast<{
    key?: string
    AND?: MatchWhereInput | MatchWhereInput[]
    OR?: MatchWhereInput[]
    NOT?: MatchWhereInput | MatchWhereInput[]
    eventId?: StringFilter<"Match"> | string
    event?: XOR<EventRelationFilter, EventWhereInput>
    alliances?: AllianceListRelationFilter
    schedules?: ScheduleListRelationFilter
  }, "key" | "key">

  export type MatchOrderByWithAggregationInput = {
    key?: SortOrder
    eventId?: SortOrder
    _count?: MatchCountOrderByAggregateInput
    _max?: MatchMaxOrderByAggregateInput
    _min?: MatchMinOrderByAggregateInput
  }

  export type MatchScalarWhereWithAggregatesInput = {
    AND?: MatchScalarWhereWithAggregatesInput | MatchScalarWhereWithAggregatesInput[]
    OR?: MatchScalarWhereWithAggregatesInput[]
    NOT?: MatchScalarWhereWithAggregatesInput | MatchScalarWhereWithAggregatesInput[]
    key?: StringWithAggregatesFilter<"Match"> | string
    eventId?: StringWithAggregatesFilter<"Match"> | string
  }

  export type ScheduleWhereInput = {
    AND?: ScheduleWhereInput | ScheduleWhereInput[]
    OR?: ScheduleWhereInput[]
    NOT?: ScheduleWhereInput | ScheduleWhereInput[]
    key?: IntFilter<"Schedule"> | number
    uname?: StringFilter<"Schedule"> | string
    position?: IntFilter<"Schedule"> | number
    matchId?: StringFilter<"Schedule"> | string
    match?: XOR<MatchRelationFilter, MatchWhereInput>
  }

  export type ScheduleOrderByWithRelationInput = {
    key?: SortOrder
    uname?: SortOrder
    position?: SortOrder
    matchId?: SortOrder
    match?: MatchOrderByWithRelationInput
  }

  export type ScheduleWhereUniqueInput = Prisma.AtLeast<{
    key?: number
    AND?: ScheduleWhereInput | ScheduleWhereInput[]
    OR?: ScheduleWhereInput[]
    NOT?: ScheduleWhereInput | ScheduleWhereInput[]
    uname?: StringFilter<"Schedule"> | string
    position?: IntFilter<"Schedule"> | number
    matchId?: StringFilter<"Schedule"> | string
    match?: XOR<MatchRelationFilter, MatchWhereInput>
  }, "key" | "key">

  export type ScheduleOrderByWithAggregationInput = {
    key?: SortOrder
    uname?: SortOrder
    position?: SortOrder
    matchId?: SortOrder
    _count?: ScheduleCountOrderByAggregateInput
    _avg?: ScheduleAvgOrderByAggregateInput
    _max?: ScheduleMaxOrderByAggregateInput
    _min?: ScheduleMinOrderByAggregateInput
    _sum?: ScheduleSumOrderByAggregateInput
  }

  export type ScheduleScalarWhereWithAggregatesInput = {
    AND?: ScheduleScalarWhereWithAggregatesInput | ScheduleScalarWhereWithAggregatesInput[]
    OR?: ScheduleScalarWhereWithAggregatesInput[]
    NOT?: ScheduleScalarWhereWithAggregatesInput | ScheduleScalarWhereWithAggregatesInput[]
    key?: IntWithAggregatesFilter<"Schedule"> | number
    uname?: StringWithAggregatesFilter<"Schedule"> | string
    position?: IntWithAggregatesFilter<"Schedule"> | number
    matchId?: StringWithAggregatesFilter<"Schedule"> | string
  }

  export type AllianceWhereInput = {
    AND?: AllianceWhereInput | AllianceWhereInput[]
    OR?: AllianceWhereInput[]
    NOT?: AllianceWhereInput | AllianceWhereInput[]
    id?: IntFilter<"Alliance"> | number
    eventId?: StringFilter<"Alliance"> | string
    matchId?: StringFilter<"Alliance"> | string
    color?: EnumAllianceColorFilter<"Alliance"> | $Enums.AllianceColor
    matchColor?: StringFilter<"Alliance"> | string
    event?: XOR<EventRelationFilter, EventWhereInput>
    teams?: TeamListRelationFilter
    match?: XOR<MatchRelationFilter, MatchWhereInput>
  }

  export type AllianceOrderByWithRelationInput = {
    id?: SortOrder
    eventId?: SortOrder
    matchId?: SortOrder
    color?: SortOrder
    matchColor?: SortOrder
    event?: EventOrderByWithRelationInput
    teams?: TeamOrderByRelationAggregateInput
    match?: MatchOrderByWithRelationInput
  }

  export type AllianceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    matchColor?: string
    AND?: AllianceWhereInput | AllianceWhereInput[]
    OR?: AllianceWhereInput[]
    NOT?: AllianceWhereInput | AllianceWhereInput[]
    eventId?: StringFilter<"Alliance"> | string
    matchId?: StringFilter<"Alliance"> | string
    color?: EnumAllianceColorFilter<"Alliance"> | $Enums.AllianceColor
    event?: XOR<EventRelationFilter, EventWhereInput>
    teams?: TeamListRelationFilter
    match?: XOR<MatchRelationFilter, MatchWhereInput>
  }, "id" | "id" | "matchColor">

  export type AllianceOrderByWithAggregationInput = {
    id?: SortOrder
    eventId?: SortOrder
    matchId?: SortOrder
    color?: SortOrder
    matchColor?: SortOrder
    _count?: AllianceCountOrderByAggregateInput
    _avg?: AllianceAvgOrderByAggregateInput
    _max?: AllianceMaxOrderByAggregateInput
    _min?: AllianceMinOrderByAggregateInput
    _sum?: AllianceSumOrderByAggregateInput
  }

  export type AllianceScalarWhereWithAggregatesInput = {
    AND?: AllianceScalarWhereWithAggregatesInput | AllianceScalarWhereWithAggregatesInput[]
    OR?: AllianceScalarWhereWithAggregatesInput[]
    NOT?: AllianceScalarWhereWithAggregatesInput | AllianceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Alliance"> | number
    eventId?: StringWithAggregatesFilter<"Alliance"> | string
    matchId?: StringWithAggregatesFilter<"Alliance"> | string
    color?: EnumAllianceColorWithAggregatesFilter<"Alliance"> | $Enums.AllianceColor
    matchColor?: StringWithAggregatesFilter<"Alliance"> | string
  }

  export type TeamWhereInput = {
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    tba_key?: StringFilter<"Team"> | string
    team_number?: IntFilter<"Team"> | number
    nickname?: StringFilter<"Team"> | string
    logo?: StringNullableFilter<"Team"> | string | null
    alliance?: AllianceListRelationFilter
    events?: EventListRelationFilter
    pitEntrys?: PitEntryListRelationFilter
  }

  export type TeamOrderByWithRelationInput = {
    tba_key?: SortOrder
    team_number?: SortOrder
    nickname?: SortOrder
    logo?: SortOrderInput | SortOrder
    alliance?: AllianceOrderByRelationAggregateInput
    events?: EventOrderByRelationAggregateInput
    pitEntrys?: PitEntryOrderByRelationAggregateInput
  }

  export type TeamWhereUniqueInput = Prisma.AtLeast<{
    tba_key?: string
    team_number?: number
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    nickname?: StringFilter<"Team"> | string
    logo?: StringNullableFilter<"Team"> | string | null
    alliance?: AllianceListRelationFilter
    events?: EventListRelationFilter
    pitEntrys?: PitEntryListRelationFilter
  }, "tba_key" | "tba_key" | "team_number">

  export type TeamOrderByWithAggregationInput = {
    tba_key?: SortOrder
    team_number?: SortOrder
    nickname?: SortOrder
    logo?: SortOrderInput | SortOrder
    _count?: TeamCountOrderByAggregateInput
    _avg?: TeamAvgOrderByAggregateInput
    _max?: TeamMaxOrderByAggregateInput
    _min?: TeamMinOrderByAggregateInput
    _sum?: TeamSumOrderByAggregateInput
  }

  export type TeamScalarWhereWithAggregatesInput = {
    AND?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    OR?: TeamScalarWhereWithAggregatesInput[]
    NOT?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    tba_key?: StringWithAggregatesFilter<"Team"> | string
    team_number?: IntWithAggregatesFilter<"Team"> | number
    nickname?: StringWithAggregatesFilter<"Team"> | string
    logo?: StringNullableWithAggregatesFilter<"Team"> | string | null
  }

  export type MatchEntryWhereInput = {
    AND?: MatchEntryWhereInput | MatchEntryWhereInput[]
    OR?: MatchEntryWhereInput[]
    NOT?: MatchEntryWhereInput | MatchEntryWhereInput[]
    id?: StringFilter<"MatchEntry"> | string
    match_num?: IntFilter<"MatchEntry"> | number
    name?: StringFilter<"MatchEntry"> | string
    team_number?: IntFilter<"MatchEntry"> | number
    scouter_num?: IntFilter<"MatchEntry"> | number
    a_start_posit?: IntFilter<"MatchEntry"> | number
    a_left_start?: BoolFilter<"MatchEntry"> | boolean
    a_coral_first?: IntFilter<"MatchEntry"> | number
    a_coral_second?: IntFilter<"MatchEntry"> | number
    a_coral_third?: IntFilter<"MatchEntry"> | number
    a_coral_fourth?: IntFilter<"MatchEntry"> | number
    a_net?: IntFilter<"MatchEntry"> | number
    a_proc?: IntFilter<"MatchEntry"> | number
    t_coral_first?: IntFilter<"MatchEntry"> | number
    t_coral_second?: IntFilter<"MatchEntry"> | number
    t_coral_third?: IntFilter<"MatchEntry"> | number
    t_coral_fourth?: IntFilter<"MatchEntry"> | number
    t_net?: IntFilter<"MatchEntry"> | number
    t_proc?: IntFilter<"MatchEntry"> | number
    t_climb?: IntFilter<"MatchEntry"> | number
    t_endgame?: IntFilter<"MatchEntry"> | number
    t_ground_coral?: IntFilter<"MatchEntry"> | number
    t_ground_algae?: IntFilter<"MatchEntry"> | number
    failed?: BoolFilter<"MatchEntry"> | boolean
    ground_pickup?: IntFilter<"MatchEntry"> | number
    defense?: IntFilter<"MatchEntry"> | number
    driver_perf?: IntFilter<"MatchEntry"> | number
    tippiness?: IntFilter<"MatchEntry"> | number
    comments?: StringNullableFilter<"MatchEntry"> | string | null
    updated?: DateTimeFilter<"MatchEntry"> | Date | string
    created?: DateTimeFilter<"MatchEntry"> | Date | string
  }

  export type MatchEntryOrderByWithRelationInput = {
    id?: SortOrder
    match_num?: SortOrder
    name?: SortOrder
    team_number?: SortOrder
    scouter_num?: SortOrder
    a_start_posit?: SortOrder
    a_left_start?: SortOrder
    a_coral_first?: SortOrder
    a_coral_second?: SortOrder
    a_coral_third?: SortOrder
    a_coral_fourth?: SortOrder
    a_net?: SortOrder
    a_proc?: SortOrder
    t_coral_first?: SortOrder
    t_coral_second?: SortOrder
    t_coral_third?: SortOrder
    t_coral_fourth?: SortOrder
    t_net?: SortOrder
    t_proc?: SortOrder
    t_climb?: SortOrder
    t_endgame?: SortOrder
    t_ground_coral?: SortOrder
    t_ground_algae?: SortOrder
    failed?: SortOrder
    ground_pickup?: SortOrder
    defense?: SortOrder
    driver_perf?: SortOrder
    tippiness?: SortOrder
    comments?: SortOrderInput | SortOrder
    updated?: SortOrder
    created?: SortOrder
  }

  export type MatchEntryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MatchEntryWhereInput | MatchEntryWhereInput[]
    OR?: MatchEntryWhereInput[]
    NOT?: MatchEntryWhereInput | MatchEntryWhereInput[]
    match_num?: IntFilter<"MatchEntry"> | number
    name?: StringFilter<"MatchEntry"> | string
    team_number?: IntFilter<"MatchEntry"> | number
    scouter_num?: IntFilter<"MatchEntry"> | number
    a_start_posit?: IntFilter<"MatchEntry"> | number
    a_left_start?: BoolFilter<"MatchEntry"> | boolean
    a_coral_first?: IntFilter<"MatchEntry"> | number
    a_coral_second?: IntFilter<"MatchEntry"> | number
    a_coral_third?: IntFilter<"MatchEntry"> | number
    a_coral_fourth?: IntFilter<"MatchEntry"> | number
    a_net?: IntFilter<"MatchEntry"> | number
    a_proc?: IntFilter<"MatchEntry"> | number
    t_coral_first?: IntFilter<"MatchEntry"> | number
    t_coral_second?: IntFilter<"MatchEntry"> | number
    t_coral_third?: IntFilter<"MatchEntry"> | number
    t_coral_fourth?: IntFilter<"MatchEntry"> | number
    t_net?: IntFilter<"MatchEntry"> | number
    t_proc?: IntFilter<"MatchEntry"> | number
    t_climb?: IntFilter<"MatchEntry"> | number
    t_endgame?: IntFilter<"MatchEntry"> | number
    t_ground_coral?: IntFilter<"MatchEntry"> | number
    t_ground_algae?: IntFilter<"MatchEntry"> | number
    failed?: BoolFilter<"MatchEntry"> | boolean
    ground_pickup?: IntFilter<"MatchEntry"> | number
    defense?: IntFilter<"MatchEntry"> | number
    driver_perf?: IntFilter<"MatchEntry"> | number
    tippiness?: IntFilter<"MatchEntry"> | number
    comments?: StringNullableFilter<"MatchEntry"> | string | null
    updated?: DateTimeFilter<"MatchEntry"> | Date | string
    created?: DateTimeFilter<"MatchEntry"> | Date | string
  }, "id" | "id">

  export type MatchEntryOrderByWithAggregationInput = {
    id?: SortOrder
    match_num?: SortOrder
    name?: SortOrder
    team_number?: SortOrder
    scouter_num?: SortOrder
    a_start_posit?: SortOrder
    a_left_start?: SortOrder
    a_coral_first?: SortOrder
    a_coral_second?: SortOrder
    a_coral_third?: SortOrder
    a_coral_fourth?: SortOrder
    a_net?: SortOrder
    a_proc?: SortOrder
    t_coral_first?: SortOrder
    t_coral_second?: SortOrder
    t_coral_third?: SortOrder
    t_coral_fourth?: SortOrder
    t_net?: SortOrder
    t_proc?: SortOrder
    t_climb?: SortOrder
    t_endgame?: SortOrder
    t_ground_coral?: SortOrder
    t_ground_algae?: SortOrder
    failed?: SortOrder
    ground_pickup?: SortOrder
    defense?: SortOrder
    driver_perf?: SortOrder
    tippiness?: SortOrder
    comments?: SortOrderInput | SortOrder
    updated?: SortOrder
    created?: SortOrder
    _count?: MatchEntryCountOrderByAggregateInput
    _avg?: MatchEntryAvgOrderByAggregateInput
    _max?: MatchEntryMaxOrderByAggregateInput
    _min?: MatchEntryMinOrderByAggregateInput
    _sum?: MatchEntrySumOrderByAggregateInput
  }

  export type MatchEntryScalarWhereWithAggregatesInput = {
    AND?: MatchEntryScalarWhereWithAggregatesInput | MatchEntryScalarWhereWithAggregatesInput[]
    OR?: MatchEntryScalarWhereWithAggregatesInput[]
    NOT?: MatchEntryScalarWhereWithAggregatesInput | MatchEntryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MatchEntry"> | string
    match_num?: IntWithAggregatesFilter<"MatchEntry"> | number
    name?: StringWithAggregatesFilter<"MatchEntry"> | string
    team_number?: IntWithAggregatesFilter<"MatchEntry"> | number
    scouter_num?: IntWithAggregatesFilter<"MatchEntry"> | number
    a_start_posit?: IntWithAggregatesFilter<"MatchEntry"> | number
    a_left_start?: BoolWithAggregatesFilter<"MatchEntry"> | boolean
    a_coral_first?: IntWithAggregatesFilter<"MatchEntry"> | number
    a_coral_second?: IntWithAggregatesFilter<"MatchEntry"> | number
    a_coral_third?: IntWithAggregatesFilter<"MatchEntry"> | number
    a_coral_fourth?: IntWithAggregatesFilter<"MatchEntry"> | number
    a_net?: IntWithAggregatesFilter<"MatchEntry"> | number
    a_proc?: IntWithAggregatesFilter<"MatchEntry"> | number
    t_coral_first?: IntWithAggregatesFilter<"MatchEntry"> | number
    t_coral_second?: IntWithAggregatesFilter<"MatchEntry"> | number
    t_coral_third?: IntWithAggregatesFilter<"MatchEntry"> | number
    t_coral_fourth?: IntWithAggregatesFilter<"MatchEntry"> | number
    t_net?: IntWithAggregatesFilter<"MatchEntry"> | number
    t_proc?: IntWithAggregatesFilter<"MatchEntry"> | number
    t_climb?: IntWithAggregatesFilter<"MatchEntry"> | number
    t_endgame?: IntWithAggregatesFilter<"MatchEntry"> | number
    t_ground_coral?: IntWithAggregatesFilter<"MatchEntry"> | number
    t_ground_algae?: IntWithAggregatesFilter<"MatchEntry"> | number
    failed?: BoolWithAggregatesFilter<"MatchEntry"> | boolean
    ground_pickup?: IntWithAggregatesFilter<"MatchEntry"> | number
    defense?: IntWithAggregatesFilter<"MatchEntry"> | number
    driver_perf?: IntWithAggregatesFilter<"MatchEntry"> | number
    tippiness?: IntWithAggregatesFilter<"MatchEntry"> | number
    comments?: StringNullableWithAggregatesFilter<"MatchEntry"> | string | null
    updated?: DateTimeWithAggregatesFilter<"MatchEntry"> | Date | string
    created?: DateTimeWithAggregatesFilter<"MatchEntry"> | Date | string
  }

  export type PitEntryWhereInput = {
    AND?: PitEntryWhereInput | PitEntryWhereInput[]
    OR?: PitEntryWhereInput[]
    NOT?: PitEntryWhereInput | PitEntryWhereInput[]
    id?: StringFilter<"PitEntry"> | string
    team_number?: IntFilter<"PitEntry"> | number
    drive_type?: IntFilter<"PitEntry"> | number
    auto_pts?: IntFilter<"PitEntry"> | number
    hang_cap?: BoolFilter<"PitEntry"> | boolean
    trap_cap?: BoolFilter<"PitEntry"> | boolean
    gp_level?: IntFilter<"PitEntry"> | number
    comments?: StringFilter<"PitEntry"> | string
    mercy?: BoolFilter<"PitEntry"> | boolean
    event_key?: StringFilter<"PitEntry"> | string
    updated?: DateTimeFilter<"PitEntry"> | Date | string
    created?: DateTimeFilter<"PitEntry"> | Date | string
    team?: XOR<TeamRelationFilter, TeamWhereInput>
    event?: XOR<EventRelationFilter, EventWhereInput>
  }

  export type PitEntryOrderByWithRelationInput = {
    id?: SortOrder
    team_number?: SortOrder
    drive_type?: SortOrder
    auto_pts?: SortOrder
    hang_cap?: SortOrder
    trap_cap?: SortOrder
    gp_level?: SortOrder
    comments?: SortOrder
    mercy?: SortOrder
    event_key?: SortOrder
    updated?: SortOrder
    created?: SortOrder
    team?: TeamOrderByWithRelationInput
    event?: EventOrderByWithRelationInput
  }

  export type PitEntryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PitEntryWhereInput | PitEntryWhereInput[]
    OR?: PitEntryWhereInput[]
    NOT?: PitEntryWhereInput | PitEntryWhereInput[]
    team_number?: IntFilter<"PitEntry"> | number
    drive_type?: IntFilter<"PitEntry"> | number
    auto_pts?: IntFilter<"PitEntry"> | number
    hang_cap?: BoolFilter<"PitEntry"> | boolean
    trap_cap?: BoolFilter<"PitEntry"> | boolean
    gp_level?: IntFilter<"PitEntry"> | number
    comments?: StringFilter<"PitEntry"> | string
    mercy?: BoolFilter<"PitEntry"> | boolean
    event_key?: StringFilter<"PitEntry"> | string
    updated?: DateTimeFilter<"PitEntry"> | Date | string
    created?: DateTimeFilter<"PitEntry"> | Date | string
    team?: XOR<TeamRelationFilter, TeamWhereInput>
    event?: XOR<EventRelationFilter, EventWhereInput>
  }, "id" | "id">

  export type PitEntryOrderByWithAggregationInput = {
    id?: SortOrder
    team_number?: SortOrder
    drive_type?: SortOrder
    auto_pts?: SortOrder
    hang_cap?: SortOrder
    trap_cap?: SortOrder
    gp_level?: SortOrder
    comments?: SortOrder
    mercy?: SortOrder
    event_key?: SortOrder
    updated?: SortOrder
    created?: SortOrder
    _count?: PitEntryCountOrderByAggregateInput
    _avg?: PitEntryAvgOrderByAggregateInput
    _max?: PitEntryMaxOrderByAggregateInput
    _min?: PitEntryMinOrderByAggregateInput
    _sum?: PitEntrySumOrderByAggregateInput
  }

  export type PitEntryScalarWhereWithAggregatesInput = {
    AND?: PitEntryScalarWhereWithAggregatesInput | PitEntryScalarWhereWithAggregatesInput[]
    OR?: PitEntryScalarWhereWithAggregatesInput[]
    NOT?: PitEntryScalarWhereWithAggregatesInput | PitEntryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PitEntry"> | string
    team_number?: IntWithAggregatesFilter<"PitEntry"> | number
    drive_type?: IntWithAggregatesFilter<"PitEntry"> | number
    auto_pts?: IntWithAggregatesFilter<"PitEntry"> | number
    hang_cap?: BoolWithAggregatesFilter<"PitEntry"> | boolean
    trap_cap?: BoolWithAggregatesFilter<"PitEntry"> | boolean
    gp_level?: IntWithAggregatesFilter<"PitEntry"> | number
    comments?: StringWithAggregatesFilter<"PitEntry"> | string
    mercy?: BoolWithAggregatesFilter<"PitEntry"> | boolean
    event_key?: StringWithAggregatesFilter<"PitEntry"> | string
    updated?: DateTimeWithAggregatesFilter<"PitEntry"> | Date | string
    created?: DateTimeWithAggregatesFilter<"PitEntry"> | Date | string
  }

  export type ServerWhereInput = {
    AND?: ServerWhereInput | ServerWhereInput[]
    OR?: ServerWhereInput[]
    NOT?: ServerWhereInput | ServerWhereInput[]
    id?: StringFilter<"Server"> | string
    name?: StringFilter<"Server"> | string
    team?: IntFilter<"Server"> | number
    desc?: StringFilter<"Server"> | string
    api?: StringFilter<"Server"> | string
    endpoint?: StringFilter<"Server"> | string
    auth_required?: BoolFilter<"Server"> | boolean
  }

  export type ServerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    team?: SortOrder
    desc?: SortOrder
    api?: SortOrder
    endpoint?: SortOrder
    auth_required?: SortOrder
  }

  export type ServerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ServerWhereInput | ServerWhereInput[]
    OR?: ServerWhereInput[]
    NOT?: ServerWhereInput | ServerWhereInput[]
    name?: StringFilter<"Server"> | string
    team?: IntFilter<"Server"> | number
    desc?: StringFilter<"Server"> | string
    api?: StringFilter<"Server"> | string
    endpoint?: StringFilter<"Server"> | string
    auth_required?: BoolFilter<"Server"> | boolean
  }, "id" | "id">

  export type ServerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    team?: SortOrder
    desc?: SortOrder
    api?: SortOrder
    endpoint?: SortOrder
    auth_required?: SortOrder
    _count?: ServerCountOrderByAggregateInput
    _avg?: ServerAvgOrderByAggregateInput
    _max?: ServerMaxOrderByAggregateInput
    _min?: ServerMinOrderByAggregateInput
    _sum?: ServerSumOrderByAggregateInput
  }

  export type ServerScalarWhereWithAggregatesInput = {
    AND?: ServerScalarWhereWithAggregatesInput | ServerScalarWhereWithAggregatesInput[]
    OR?: ServerScalarWhereWithAggregatesInput[]
    NOT?: ServerScalarWhereWithAggregatesInput | ServerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Server"> | string
    name?: StringWithAggregatesFilter<"Server"> | string
    team?: IntWithAggregatesFilter<"Server"> | number
    desc?: StringWithAggregatesFilter<"Server"> | string
    api?: StringWithAggregatesFilter<"Server"> | string
    endpoint?: StringWithAggregatesFilter<"Server"> | string
    auth_required?: BoolWithAggregatesFilter<"Server"> | boolean
  }

  export type UserCreateInput = {
    fname: string
    lname: string
    uname: string
    pass: string
  }

  export type UserUncheckedCreateInput = {
    key?: number
    fname: string
    lname: string
    uname: string
    pass: string
  }

  export type UserUpdateInput = {
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    uname?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateInput = {
    key?: IntFieldUpdateOperationsInput | number
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    uname?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateManyInput = {
    key?: number
    fname: string
    lname: string
    uname: string
    pass: string
  }

  export type UserUpdateManyMutationInput = {
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    uname?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    key?: IntFieldUpdateOperationsInput | number
    fname?: StringFieldUpdateOperationsInput | string
    lname?: StringFieldUpdateOperationsInput | string
    uname?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
  }

  export type EventCreateInput = {
    key: string
    name: string
    type?: $Enums.EventType
    start_date: Date | string
    end_date: Date | string
    updated?: Date | string
    created: Date | string
    teams?: TeamCreateNestedManyWithoutEventsInput
    matches?: MatchCreateNestedManyWithoutEventInput
    alliances?: AllianceCreateNestedManyWithoutEventInput
    pitEntrys?: PitEntryCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateInput = {
    key: string
    name: string
    type?: $Enums.EventType
    start_date: Date | string
    end_date: Date | string
    updated?: Date | string
    created: Date | string
    teams?: TeamUncheckedCreateNestedManyWithoutEventsInput
    matches?: MatchUncheckedCreateNestedManyWithoutEventInput
    alliances?: AllianceUncheckedCreateNestedManyWithoutEventInput
    pitEntrys?: PitEntryUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    teams?: TeamUpdateManyWithoutEventsNestedInput
    matches?: MatchUpdateManyWithoutEventNestedInput
    alliances?: AllianceUpdateManyWithoutEventNestedInput
    pitEntrys?: PitEntryUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    teams?: TeamUncheckedUpdateManyWithoutEventsNestedInput
    matches?: MatchUncheckedUpdateManyWithoutEventNestedInput
    alliances?: AllianceUncheckedUpdateManyWithoutEventNestedInput
    pitEntrys?: PitEntryUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventCreateManyInput = {
    key: string
    name: string
    type?: $Enums.EventType
    start_date: Date | string
    end_date: Date | string
    updated?: Date | string
    created: Date | string
  }

  export type EventUpdateManyMutationInput = {
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateManyInput = {
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchCreateInput = {
    key: string
    event: EventCreateNestedOneWithoutMatchesInput
    alliances?: AllianceCreateNestedManyWithoutMatchInput
    schedules?: ScheduleCreateNestedManyWithoutMatchInput
  }

  export type MatchUncheckedCreateInput = {
    key: string
    eventId: string
    alliances?: AllianceUncheckedCreateNestedManyWithoutMatchInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutMatchInput
  }

  export type MatchUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    event?: EventUpdateOneRequiredWithoutMatchesNestedInput
    alliances?: AllianceUpdateManyWithoutMatchNestedInput
    schedules?: ScheduleUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    alliances?: AllianceUncheckedUpdateManyWithoutMatchNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type MatchCreateManyInput = {
    key: string
    eventId: string
  }

  export type MatchUpdateManyMutationInput = {
    key?: StringFieldUpdateOperationsInput | string
  }

  export type MatchUncheckedUpdateManyInput = {
    key?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
  }

  export type ScheduleCreateInput = {
    uname: string
    position: number
    match: MatchCreateNestedOneWithoutSchedulesInput
  }

  export type ScheduleUncheckedCreateInput = {
    key?: number
    uname: string
    position: number
    matchId: string
  }

  export type ScheduleUpdateInput = {
    uname?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    match?: MatchUpdateOneRequiredWithoutSchedulesNestedInput
  }

  export type ScheduleUncheckedUpdateInput = {
    key?: IntFieldUpdateOperationsInput | number
    uname?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    matchId?: StringFieldUpdateOperationsInput | string
  }

  export type ScheduleCreateManyInput = {
    key?: number
    uname: string
    position: number
    matchId: string
  }

  export type ScheduleUpdateManyMutationInput = {
    uname?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
  }

  export type ScheduleUncheckedUpdateManyInput = {
    key?: IntFieldUpdateOperationsInput | number
    uname?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    matchId?: StringFieldUpdateOperationsInput | string
  }

  export type AllianceCreateInput = {
    color: $Enums.AllianceColor
    matchColor: string
    event: EventCreateNestedOneWithoutAlliancesInput
    teams?: TeamCreateNestedManyWithoutAllianceInput
    match: MatchCreateNestedOneWithoutAlliancesInput
  }

  export type AllianceUncheckedCreateInput = {
    id?: number
    eventId: string
    matchId: string
    color: $Enums.AllianceColor
    matchColor: string
    teams?: TeamUncheckedCreateNestedManyWithoutAllianceInput
  }

  export type AllianceUpdateInput = {
    color?: EnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor
    matchColor?: StringFieldUpdateOperationsInput | string
    event?: EventUpdateOneRequiredWithoutAlliancesNestedInput
    teams?: TeamUpdateManyWithoutAllianceNestedInput
    match?: MatchUpdateOneRequiredWithoutAlliancesNestedInput
  }

  export type AllianceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    color?: EnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor
    matchColor?: StringFieldUpdateOperationsInput | string
    teams?: TeamUncheckedUpdateManyWithoutAllianceNestedInput
  }

  export type AllianceCreateManyInput = {
    id?: number
    eventId: string
    matchId: string
    color: $Enums.AllianceColor
    matchColor: string
  }

  export type AllianceUpdateManyMutationInput = {
    color?: EnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor
    matchColor?: StringFieldUpdateOperationsInput | string
  }

  export type AllianceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    color?: EnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor
    matchColor?: StringFieldUpdateOperationsInput | string
  }

  export type TeamCreateInput = {
    tba_key: string
    team_number: number
    nickname: string
    logo?: string | null
    alliance?: AllianceCreateNestedManyWithoutTeamsInput
    events?: EventCreateNestedManyWithoutTeamsInput
    pitEntrys?: PitEntryCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateInput = {
    tba_key: string
    team_number: number
    nickname: string
    logo?: string | null
    alliance?: AllianceUncheckedCreateNestedManyWithoutTeamsInput
    events?: EventUncheckedCreateNestedManyWithoutTeamsInput
    pitEntrys?: PitEntryUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamUpdateInput = {
    tba_key?: StringFieldUpdateOperationsInput | string
    team_number?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    alliance?: AllianceUpdateManyWithoutTeamsNestedInput
    events?: EventUpdateManyWithoutTeamsNestedInput
    pitEntrys?: PitEntryUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateInput = {
    tba_key?: StringFieldUpdateOperationsInput | string
    team_number?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    alliance?: AllianceUncheckedUpdateManyWithoutTeamsNestedInput
    events?: EventUncheckedUpdateManyWithoutTeamsNestedInput
    pitEntrys?: PitEntryUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamCreateManyInput = {
    tba_key: string
    team_number: number
    nickname: string
    logo?: string | null
  }

  export type TeamUpdateManyMutationInput = {
    tba_key?: StringFieldUpdateOperationsInput | string
    team_number?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeamUncheckedUpdateManyInput = {
    tba_key?: StringFieldUpdateOperationsInput | string
    team_number?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MatchEntryCreateInput = {
    id?: string
    match_num: number
    name: string
    team_number: number
    scouter_num?: number
    a_start_posit: number
    a_left_start: boolean
    a_coral_first?: number
    a_coral_second?: number
    a_coral_third?: number
    a_coral_fourth?: number
    a_net?: number
    a_proc?: number
    t_coral_first?: number
    t_coral_second?: number
    t_coral_third?: number
    t_coral_fourth?: number
    t_net?: number
    t_proc?: number
    t_climb?: number
    t_endgame?: number
    t_ground_coral?: number
    t_ground_algae?: number
    failed: boolean
    ground_pickup?: number
    defense: number
    driver_perf: number
    tippiness: number
    comments?: string | null
    updated?: Date | string
    created?: Date | string
  }

  export type MatchEntryUncheckedCreateInput = {
    id?: string
    match_num: number
    name: string
    team_number: number
    scouter_num?: number
    a_start_posit: number
    a_left_start: boolean
    a_coral_first?: number
    a_coral_second?: number
    a_coral_third?: number
    a_coral_fourth?: number
    a_net?: number
    a_proc?: number
    t_coral_first?: number
    t_coral_second?: number
    t_coral_third?: number
    t_coral_fourth?: number
    t_net?: number
    t_proc?: number
    t_climb?: number
    t_endgame?: number
    t_ground_coral?: number
    t_ground_algae?: number
    failed: boolean
    ground_pickup?: number
    defense: number
    driver_perf: number
    tippiness: number
    comments?: string | null
    updated?: Date | string
    created?: Date | string
  }

  export type MatchEntryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    match_num?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    team_number?: IntFieldUpdateOperationsInput | number
    scouter_num?: IntFieldUpdateOperationsInput | number
    a_start_posit?: IntFieldUpdateOperationsInput | number
    a_left_start?: BoolFieldUpdateOperationsInput | boolean
    a_coral_first?: IntFieldUpdateOperationsInput | number
    a_coral_second?: IntFieldUpdateOperationsInput | number
    a_coral_third?: IntFieldUpdateOperationsInput | number
    a_coral_fourth?: IntFieldUpdateOperationsInput | number
    a_net?: IntFieldUpdateOperationsInput | number
    a_proc?: IntFieldUpdateOperationsInput | number
    t_coral_first?: IntFieldUpdateOperationsInput | number
    t_coral_second?: IntFieldUpdateOperationsInput | number
    t_coral_third?: IntFieldUpdateOperationsInput | number
    t_coral_fourth?: IntFieldUpdateOperationsInput | number
    t_net?: IntFieldUpdateOperationsInput | number
    t_proc?: IntFieldUpdateOperationsInput | number
    t_climb?: IntFieldUpdateOperationsInput | number
    t_endgame?: IntFieldUpdateOperationsInput | number
    t_ground_coral?: IntFieldUpdateOperationsInput | number
    t_ground_algae?: IntFieldUpdateOperationsInput | number
    failed?: BoolFieldUpdateOperationsInput | boolean
    ground_pickup?: IntFieldUpdateOperationsInput | number
    defense?: IntFieldUpdateOperationsInput | number
    driver_perf?: IntFieldUpdateOperationsInput | number
    tippiness?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchEntryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    match_num?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    team_number?: IntFieldUpdateOperationsInput | number
    scouter_num?: IntFieldUpdateOperationsInput | number
    a_start_posit?: IntFieldUpdateOperationsInput | number
    a_left_start?: BoolFieldUpdateOperationsInput | boolean
    a_coral_first?: IntFieldUpdateOperationsInput | number
    a_coral_second?: IntFieldUpdateOperationsInput | number
    a_coral_third?: IntFieldUpdateOperationsInput | number
    a_coral_fourth?: IntFieldUpdateOperationsInput | number
    a_net?: IntFieldUpdateOperationsInput | number
    a_proc?: IntFieldUpdateOperationsInput | number
    t_coral_first?: IntFieldUpdateOperationsInput | number
    t_coral_second?: IntFieldUpdateOperationsInput | number
    t_coral_third?: IntFieldUpdateOperationsInput | number
    t_coral_fourth?: IntFieldUpdateOperationsInput | number
    t_net?: IntFieldUpdateOperationsInput | number
    t_proc?: IntFieldUpdateOperationsInput | number
    t_climb?: IntFieldUpdateOperationsInput | number
    t_endgame?: IntFieldUpdateOperationsInput | number
    t_ground_coral?: IntFieldUpdateOperationsInput | number
    t_ground_algae?: IntFieldUpdateOperationsInput | number
    failed?: BoolFieldUpdateOperationsInput | boolean
    ground_pickup?: IntFieldUpdateOperationsInput | number
    defense?: IntFieldUpdateOperationsInput | number
    driver_perf?: IntFieldUpdateOperationsInput | number
    tippiness?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchEntryCreateManyInput = {
    id?: string
    match_num: number
    name: string
    team_number: number
    scouter_num?: number
    a_start_posit: number
    a_left_start: boolean
    a_coral_first?: number
    a_coral_second?: number
    a_coral_third?: number
    a_coral_fourth?: number
    a_net?: number
    a_proc?: number
    t_coral_first?: number
    t_coral_second?: number
    t_coral_third?: number
    t_coral_fourth?: number
    t_net?: number
    t_proc?: number
    t_climb?: number
    t_endgame?: number
    t_ground_coral?: number
    t_ground_algae?: number
    failed: boolean
    ground_pickup?: number
    defense: number
    driver_perf: number
    tippiness: number
    comments?: string | null
    updated?: Date | string
    created?: Date | string
  }

  export type MatchEntryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    match_num?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    team_number?: IntFieldUpdateOperationsInput | number
    scouter_num?: IntFieldUpdateOperationsInput | number
    a_start_posit?: IntFieldUpdateOperationsInput | number
    a_left_start?: BoolFieldUpdateOperationsInput | boolean
    a_coral_first?: IntFieldUpdateOperationsInput | number
    a_coral_second?: IntFieldUpdateOperationsInput | number
    a_coral_third?: IntFieldUpdateOperationsInput | number
    a_coral_fourth?: IntFieldUpdateOperationsInput | number
    a_net?: IntFieldUpdateOperationsInput | number
    a_proc?: IntFieldUpdateOperationsInput | number
    t_coral_first?: IntFieldUpdateOperationsInput | number
    t_coral_second?: IntFieldUpdateOperationsInput | number
    t_coral_third?: IntFieldUpdateOperationsInput | number
    t_coral_fourth?: IntFieldUpdateOperationsInput | number
    t_net?: IntFieldUpdateOperationsInput | number
    t_proc?: IntFieldUpdateOperationsInput | number
    t_climb?: IntFieldUpdateOperationsInput | number
    t_endgame?: IntFieldUpdateOperationsInput | number
    t_ground_coral?: IntFieldUpdateOperationsInput | number
    t_ground_algae?: IntFieldUpdateOperationsInput | number
    failed?: BoolFieldUpdateOperationsInput | boolean
    ground_pickup?: IntFieldUpdateOperationsInput | number
    defense?: IntFieldUpdateOperationsInput | number
    driver_perf?: IntFieldUpdateOperationsInput | number
    tippiness?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchEntryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    match_num?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    team_number?: IntFieldUpdateOperationsInput | number
    scouter_num?: IntFieldUpdateOperationsInput | number
    a_start_posit?: IntFieldUpdateOperationsInput | number
    a_left_start?: BoolFieldUpdateOperationsInput | boolean
    a_coral_first?: IntFieldUpdateOperationsInput | number
    a_coral_second?: IntFieldUpdateOperationsInput | number
    a_coral_third?: IntFieldUpdateOperationsInput | number
    a_coral_fourth?: IntFieldUpdateOperationsInput | number
    a_net?: IntFieldUpdateOperationsInput | number
    a_proc?: IntFieldUpdateOperationsInput | number
    t_coral_first?: IntFieldUpdateOperationsInput | number
    t_coral_second?: IntFieldUpdateOperationsInput | number
    t_coral_third?: IntFieldUpdateOperationsInput | number
    t_coral_fourth?: IntFieldUpdateOperationsInput | number
    t_net?: IntFieldUpdateOperationsInput | number
    t_proc?: IntFieldUpdateOperationsInput | number
    t_climb?: IntFieldUpdateOperationsInput | number
    t_endgame?: IntFieldUpdateOperationsInput | number
    t_ground_coral?: IntFieldUpdateOperationsInput | number
    t_ground_algae?: IntFieldUpdateOperationsInput | number
    failed?: BoolFieldUpdateOperationsInput | boolean
    ground_pickup?: IntFieldUpdateOperationsInput | number
    defense?: IntFieldUpdateOperationsInput | number
    driver_perf?: IntFieldUpdateOperationsInput | number
    tippiness?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PitEntryCreateInput = {
    id?: string
    drive_type: number
    auto_pts: number
    hang_cap: boolean
    trap_cap: boolean
    gp_level: number
    comments: string
    mercy?: boolean
    updated?: Date | string
    created?: Date | string
    team: TeamCreateNestedOneWithoutPitEntrysInput
    event: EventCreateNestedOneWithoutPitEntrysInput
  }

  export type PitEntryUncheckedCreateInput = {
    id?: string
    team_number: number
    drive_type: number
    auto_pts: number
    hang_cap: boolean
    trap_cap: boolean
    gp_level: number
    comments: string
    mercy?: boolean
    event_key: string
    updated?: Date | string
    created?: Date | string
  }

  export type PitEntryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    drive_type?: IntFieldUpdateOperationsInput | number
    auto_pts?: IntFieldUpdateOperationsInput | number
    hang_cap?: BoolFieldUpdateOperationsInput | boolean
    trap_cap?: BoolFieldUpdateOperationsInput | boolean
    gp_level?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
    mercy?: BoolFieldUpdateOperationsInput | boolean
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutPitEntrysNestedInput
    event?: EventUpdateOneRequiredWithoutPitEntrysNestedInput
  }

  export type PitEntryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    team_number?: IntFieldUpdateOperationsInput | number
    drive_type?: IntFieldUpdateOperationsInput | number
    auto_pts?: IntFieldUpdateOperationsInput | number
    hang_cap?: BoolFieldUpdateOperationsInput | boolean
    trap_cap?: BoolFieldUpdateOperationsInput | boolean
    gp_level?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
    mercy?: BoolFieldUpdateOperationsInput | boolean
    event_key?: StringFieldUpdateOperationsInput | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PitEntryCreateManyInput = {
    id?: string
    team_number: number
    drive_type: number
    auto_pts: number
    hang_cap: boolean
    trap_cap: boolean
    gp_level: number
    comments: string
    mercy?: boolean
    event_key: string
    updated?: Date | string
    created?: Date | string
  }

  export type PitEntryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    drive_type?: IntFieldUpdateOperationsInput | number
    auto_pts?: IntFieldUpdateOperationsInput | number
    hang_cap?: BoolFieldUpdateOperationsInput | boolean
    trap_cap?: BoolFieldUpdateOperationsInput | boolean
    gp_level?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
    mercy?: BoolFieldUpdateOperationsInput | boolean
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PitEntryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    team_number?: IntFieldUpdateOperationsInput | number
    drive_type?: IntFieldUpdateOperationsInput | number
    auto_pts?: IntFieldUpdateOperationsInput | number
    hang_cap?: BoolFieldUpdateOperationsInput | boolean
    trap_cap?: BoolFieldUpdateOperationsInput | boolean
    gp_level?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
    mercy?: BoolFieldUpdateOperationsInput | boolean
    event_key?: StringFieldUpdateOperationsInput | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServerCreateInput = {
    id?: string
    name: string
    team: number
    desc?: string
    api: string
    endpoint: string
    auth_required: boolean
  }

  export type ServerUncheckedCreateInput = {
    id?: string
    name: string
    team: number
    desc?: string
    api: string
    endpoint: string
    auth_required: boolean
  }

  export type ServerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    team?: IntFieldUpdateOperationsInput | number
    desc?: StringFieldUpdateOperationsInput | string
    api?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    auth_required?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ServerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    team?: IntFieldUpdateOperationsInput | number
    desc?: StringFieldUpdateOperationsInput | string
    api?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    auth_required?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ServerCreateManyInput = {
    id?: string
    name: string
    team: number
    desc?: string
    api: string
    endpoint: string
    auth_required: boolean
  }

  export type ServerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    team?: IntFieldUpdateOperationsInput | number
    desc?: StringFieldUpdateOperationsInput | string
    api?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    auth_required?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ServerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    team?: IntFieldUpdateOperationsInput | number
    desc?: StringFieldUpdateOperationsInput | string
    api?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    auth_required?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UserCountOrderByAggregateInput = {
    key?: SortOrder
    fname?: SortOrder
    lname?: SortOrder
    uname?: SortOrder
    pass?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    key?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    key?: SortOrder
    fname?: SortOrder
    lname?: SortOrder
    uname?: SortOrder
    pass?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    key?: SortOrder
    fname?: SortOrder
    lname?: SortOrder
    uname?: SortOrder
    pass?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    key?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumEventTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EventType | EnumEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EventType[]
    notIn?: $Enums.EventType[]
    not?: NestedEnumEventTypeFilter<$PrismaModel> | $Enums.EventType
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TeamListRelationFilter = {
    every?: TeamWhereInput
    some?: TeamWhereInput
    none?: TeamWhereInput
  }

  export type MatchListRelationFilter = {
    every?: MatchWhereInput
    some?: MatchWhereInput
    none?: MatchWhereInput
  }

  export type AllianceListRelationFilter = {
    every?: AllianceWhereInput
    some?: AllianceWhereInput
    none?: AllianceWhereInput
  }

  export type PitEntryListRelationFilter = {
    every?: PitEntryWhereInput
    some?: PitEntryWhereInput
    none?: PitEntryWhereInput
  }

  export type TeamOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AllianceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PitEntryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventCountOrderByAggregateInput = {
    key?: SortOrder
    name?: SortOrder
    type?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    updated?: SortOrder
    created?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    key?: SortOrder
    name?: SortOrder
    type?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    updated?: SortOrder
    created?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    key?: SortOrder
    name?: SortOrder
    type?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    updated?: SortOrder
    created?: SortOrder
  }

  export type EnumEventTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventType | EnumEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EventType[]
    notIn?: $Enums.EventType[]
    not?: NestedEnumEventTypeWithAggregatesFilter<$PrismaModel> | $Enums.EventType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventTypeFilter<$PrismaModel>
    _max?: NestedEnumEventTypeFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EventRelationFilter = {
    is?: EventWhereInput
    isNot?: EventWhereInput
  }

  export type ScheduleListRelationFilter = {
    every?: ScheduleWhereInput
    some?: ScheduleWhereInput
    none?: ScheduleWhereInput
  }

  export type ScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MatchCountOrderByAggregateInput = {
    key?: SortOrder
    eventId?: SortOrder
  }

  export type MatchMaxOrderByAggregateInput = {
    key?: SortOrder
    eventId?: SortOrder
  }

  export type MatchMinOrderByAggregateInput = {
    key?: SortOrder
    eventId?: SortOrder
  }

  export type MatchRelationFilter = {
    is?: MatchWhereInput
    isNot?: MatchWhereInput
  }

  export type ScheduleCountOrderByAggregateInput = {
    key?: SortOrder
    uname?: SortOrder
    position?: SortOrder
    matchId?: SortOrder
  }

  export type ScheduleAvgOrderByAggregateInput = {
    key?: SortOrder
    position?: SortOrder
  }

  export type ScheduleMaxOrderByAggregateInput = {
    key?: SortOrder
    uname?: SortOrder
    position?: SortOrder
    matchId?: SortOrder
  }

  export type ScheduleMinOrderByAggregateInput = {
    key?: SortOrder
    uname?: SortOrder
    position?: SortOrder
    matchId?: SortOrder
  }

  export type ScheduleSumOrderByAggregateInput = {
    key?: SortOrder
    position?: SortOrder
  }

  export type EnumAllianceColorFilter<$PrismaModel = never> = {
    equals?: $Enums.AllianceColor | EnumAllianceColorFieldRefInput<$PrismaModel>
    in?: $Enums.AllianceColor[]
    notIn?: $Enums.AllianceColor[]
    not?: NestedEnumAllianceColorFilter<$PrismaModel> | $Enums.AllianceColor
  }

  export type AllianceCountOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    matchId?: SortOrder
    color?: SortOrder
    matchColor?: SortOrder
  }

  export type AllianceAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AllianceMaxOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    matchId?: SortOrder
    color?: SortOrder
    matchColor?: SortOrder
  }

  export type AllianceMinOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    matchId?: SortOrder
    color?: SortOrder
    matchColor?: SortOrder
  }

  export type AllianceSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumAllianceColorWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AllianceColor | EnumAllianceColorFieldRefInput<$PrismaModel>
    in?: $Enums.AllianceColor[]
    notIn?: $Enums.AllianceColor[]
    not?: NestedEnumAllianceColorWithAggregatesFilter<$PrismaModel> | $Enums.AllianceColor
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAllianceColorFilter<$PrismaModel>
    _max?: NestedEnumAllianceColorFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EventListRelationFilter = {
    every?: EventWhereInput
    some?: EventWhereInput
    none?: EventWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type EventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamCountOrderByAggregateInput = {
    tba_key?: SortOrder
    team_number?: SortOrder
    nickname?: SortOrder
    logo?: SortOrder
  }

  export type TeamAvgOrderByAggregateInput = {
    team_number?: SortOrder
  }

  export type TeamMaxOrderByAggregateInput = {
    tba_key?: SortOrder
    team_number?: SortOrder
    nickname?: SortOrder
    logo?: SortOrder
  }

  export type TeamMinOrderByAggregateInput = {
    tba_key?: SortOrder
    team_number?: SortOrder
    nickname?: SortOrder
    logo?: SortOrder
  }

  export type TeamSumOrderByAggregateInput = {
    team_number?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type MatchEntryCountOrderByAggregateInput = {
    id?: SortOrder
    match_num?: SortOrder
    name?: SortOrder
    team_number?: SortOrder
    scouter_num?: SortOrder
    a_start_posit?: SortOrder
    a_left_start?: SortOrder
    a_coral_first?: SortOrder
    a_coral_second?: SortOrder
    a_coral_third?: SortOrder
    a_coral_fourth?: SortOrder
    a_net?: SortOrder
    a_proc?: SortOrder
    t_coral_first?: SortOrder
    t_coral_second?: SortOrder
    t_coral_third?: SortOrder
    t_coral_fourth?: SortOrder
    t_net?: SortOrder
    t_proc?: SortOrder
    t_climb?: SortOrder
    t_endgame?: SortOrder
    t_ground_coral?: SortOrder
    t_ground_algae?: SortOrder
    failed?: SortOrder
    ground_pickup?: SortOrder
    defense?: SortOrder
    driver_perf?: SortOrder
    tippiness?: SortOrder
    comments?: SortOrder
    updated?: SortOrder
    created?: SortOrder
  }

  export type MatchEntryAvgOrderByAggregateInput = {
    match_num?: SortOrder
    team_number?: SortOrder
    scouter_num?: SortOrder
    a_start_posit?: SortOrder
    a_coral_first?: SortOrder
    a_coral_second?: SortOrder
    a_coral_third?: SortOrder
    a_coral_fourth?: SortOrder
    a_net?: SortOrder
    a_proc?: SortOrder
    t_coral_first?: SortOrder
    t_coral_second?: SortOrder
    t_coral_third?: SortOrder
    t_coral_fourth?: SortOrder
    t_net?: SortOrder
    t_proc?: SortOrder
    t_climb?: SortOrder
    t_endgame?: SortOrder
    t_ground_coral?: SortOrder
    t_ground_algae?: SortOrder
    ground_pickup?: SortOrder
    defense?: SortOrder
    driver_perf?: SortOrder
    tippiness?: SortOrder
  }

  export type MatchEntryMaxOrderByAggregateInput = {
    id?: SortOrder
    match_num?: SortOrder
    name?: SortOrder
    team_number?: SortOrder
    scouter_num?: SortOrder
    a_start_posit?: SortOrder
    a_left_start?: SortOrder
    a_coral_first?: SortOrder
    a_coral_second?: SortOrder
    a_coral_third?: SortOrder
    a_coral_fourth?: SortOrder
    a_net?: SortOrder
    a_proc?: SortOrder
    t_coral_first?: SortOrder
    t_coral_second?: SortOrder
    t_coral_third?: SortOrder
    t_coral_fourth?: SortOrder
    t_net?: SortOrder
    t_proc?: SortOrder
    t_climb?: SortOrder
    t_endgame?: SortOrder
    t_ground_coral?: SortOrder
    t_ground_algae?: SortOrder
    failed?: SortOrder
    ground_pickup?: SortOrder
    defense?: SortOrder
    driver_perf?: SortOrder
    tippiness?: SortOrder
    comments?: SortOrder
    updated?: SortOrder
    created?: SortOrder
  }

  export type MatchEntryMinOrderByAggregateInput = {
    id?: SortOrder
    match_num?: SortOrder
    name?: SortOrder
    team_number?: SortOrder
    scouter_num?: SortOrder
    a_start_posit?: SortOrder
    a_left_start?: SortOrder
    a_coral_first?: SortOrder
    a_coral_second?: SortOrder
    a_coral_third?: SortOrder
    a_coral_fourth?: SortOrder
    a_net?: SortOrder
    a_proc?: SortOrder
    t_coral_first?: SortOrder
    t_coral_second?: SortOrder
    t_coral_third?: SortOrder
    t_coral_fourth?: SortOrder
    t_net?: SortOrder
    t_proc?: SortOrder
    t_climb?: SortOrder
    t_endgame?: SortOrder
    t_ground_coral?: SortOrder
    t_ground_algae?: SortOrder
    failed?: SortOrder
    ground_pickup?: SortOrder
    defense?: SortOrder
    driver_perf?: SortOrder
    tippiness?: SortOrder
    comments?: SortOrder
    updated?: SortOrder
    created?: SortOrder
  }

  export type MatchEntrySumOrderByAggregateInput = {
    match_num?: SortOrder
    team_number?: SortOrder
    scouter_num?: SortOrder
    a_start_posit?: SortOrder
    a_coral_first?: SortOrder
    a_coral_second?: SortOrder
    a_coral_third?: SortOrder
    a_coral_fourth?: SortOrder
    a_net?: SortOrder
    a_proc?: SortOrder
    t_coral_first?: SortOrder
    t_coral_second?: SortOrder
    t_coral_third?: SortOrder
    t_coral_fourth?: SortOrder
    t_net?: SortOrder
    t_proc?: SortOrder
    t_climb?: SortOrder
    t_endgame?: SortOrder
    t_ground_coral?: SortOrder
    t_ground_algae?: SortOrder
    ground_pickup?: SortOrder
    defense?: SortOrder
    driver_perf?: SortOrder
    tippiness?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type TeamRelationFilter = {
    is?: TeamWhereInput
    isNot?: TeamWhereInput
  }

  export type PitEntryCountOrderByAggregateInput = {
    id?: SortOrder
    team_number?: SortOrder
    drive_type?: SortOrder
    auto_pts?: SortOrder
    hang_cap?: SortOrder
    trap_cap?: SortOrder
    gp_level?: SortOrder
    comments?: SortOrder
    mercy?: SortOrder
    event_key?: SortOrder
    updated?: SortOrder
    created?: SortOrder
  }

  export type PitEntryAvgOrderByAggregateInput = {
    team_number?: SortOrder
    drive_type?: SortOrder
    auto_pts?: SortOrder
    gp_level?: SortOrder
  }

  export type PitEntryMaxOrderByAggregateInput = {
    id?: SortOrder
    team_number?: SortOrder
    drive_type?: SortOrder
    auto_pts?: SortOrder
    hang_cap?: SortOrder
    trap_cap?: SortOrder
    gp_level?: SortOrder
    comments?: SortOrder
    mercy?: SortOrder
    event_key?: SortOrder
    updated?: SortOrder
    created?: SortOrder
  }

  export type PitEntryMinOrderByAggregateInput = {
    id?: SortOrder
    team_number?: SortOrder
    drive_type?: SortOrder
    auto_pts?: SortOrder
    hang_cap?: SortOrder
    trap_cap?: SortOrder
    gp_level?: SortOrder
    comments?: SortOrder
    mercy?: SortOrder
    event_key?: SortOrder
    updated?: SortOrder
    created?: SortOrder
  }

  export type PitEntrySumOrderByAggregateInput = {
    team_number?: SortOrder
    drive_type?: SortOrder
    auto_pts?: SortOrder
    gp_level?: SortOrder
  }

  export type ServerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    team?: SortOrder
    desc?: SortOrder
    api?: SortOrder
    endpoint?: SortOrder
    auth_required?: SortOrder
  }

  export type ServerAvgOrderByAggregateInput = {
    team?: SortOrder
  }

  export type ServerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    team?: SortOrder
    desc?: SortOrder
    api?: SortOrder
    endpoint?: SortOrder
    auth_required?: SortOrder
  }

  export type ServerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    team?: SortOrder
    desc?: SortOrder
    api?: SortOrder
    endpoint?: SortOrder
    auth_required?: SortOrder
  }

  export type ServerSumOrderByAggregateInput = {
    team?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TeamCreateNestedManyWithoutEventsInput = {
    create?: XOR<TeamCreateWithoutEventsInput, TeamUncheckedCreateWithoutEventsInput> | TeamCreateWithoutEventsInput[] | TeamUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutEventsInput | TeamCreateOrConnectWithoutEventsInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type MatchCreateNestedManyWithoutEventInput = {
    create?: XOR<MatchCreateWithoutEventInput, MatchUncheckedCreateWithoutEventInput> | MatchCreateWithoutEventInput[] | MatchUncheckedCreateWithoutEventInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutEventInput | MatchCreateOrConnectWithoutEventInput[]
    createMany?: MatchCreateManyEventInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type AllianceCreateNestedManyWithoutEventInput = {
    create?: XOR<AllianceCreateWithoutEventInput, AllianceUncheckedCreateWithoutEventInput> | AllianceCreateWithoutEventInput[] | AllianceUncheckedCreateWithoutEventInput[]
    connectOrCreate?: AllianceCreateOrConnectWithoutEventInput | AllianceCreateOrConnectWithoutEventInput[]
    createMany?: AllianceCreateManyEventInputEnvelope
    connect?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
  }

  export type PitEntryCreateNestedManyWithoutEventInput = {
    create?: XOR<PitEntryCreateWithoutEventInput, PitEntryUncheckedCreateWithoutEventInput> | PitEntryCreateWithoutEventInput[] | PitEntryUncheckedCreateWithoutEventInput[]
    connectOrCreate?: PitEntryCreateOrConnectWithoutEventInput | PitEntryCreateOrConnectWithoutEventInput[]
    createMany?: PitEntryCreateManyEventInputEnvelope
    connect?: PitEntryWhereUniqueInput | PitEntryWhereUniqueInput[]
  }

  export type TeamUncheckedCreateNestedManyWithoutEventsInput = {
    create?: XOR<TeamCreateWithoutEventsInput, TeamUncheckedCreateWithoutEventsInput> | TeamCreateWithoutEventsInput[] | TeamUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutEventsInput | TeamCreateOrConnectWithoutEventsInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type MatchUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<MatchCreateWithoutEventInput, MatchUncheckedCreateWithoutEventInput> | MatchCreateWithoutEventInput[] | MatchUncheckedCreateWithoutEventInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutEventInput | MatchCreateOrConnectWithoutEventInput[]
    createMany?: MatchCreateManyEventInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type AllianceUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<AllianceCreateWithoutEventInput, AllianceUncheckedCreateWithoutEventInput> | AllianceCreateWithoutEventInput[] | AllianceUncheckedCreateWithoutEventInput[]
    connectOrCreate?: AllianceCreateOrConnectWithoutEventInput | AllianceCreateOrConnectWithoutEventInput[]
    createMany?: AllianceCreateManyEventInputEnvelope
    connect?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
  }

  export type PitEntryUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<PitEntryCreateWithoutEventInput, PitEntryUncheckedCreateWithoutEventInput> | PitEntryCreateWithoutEventInput[] | PitEntryUncheckedCreateWithoutEventInput[]
    connectOrCreate?: PitEntryCreateOrConnectWithoutEventInput | PitEntryCreateOrConnectWithoutEventInput[]
    createMany?: PitEntryCreateManyEventInputEnvelope
    connect?: PitEntryWhereUniqueInput | PitEntryWhereUniqueInput[]
  }

  export type EnumEventTypeFieldUpdateOperationsInput = {
    set?: $Enums.EventType
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TeamUpdateManyWithoutEventsNestedInput = {
    create?: XOR<TeamCreateWithoutEventsInput, TeamUncheckedCreateWithoutEventsInput> | TeamCreateWithoutEventsInput[] | TeamUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutEventsInput | TeamCreateOrConnectWithoutEventsInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutEventsInput | TeamUpsertWithWhereUniqueWithoutEventsInput[]
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutEventsInput | TeamUpdateWithWhereUniqueWithoutEventsInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutEventsInput | TeamUpdateManyWithWhereWithoutEventsInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type MatchUpdateManyWithoutEventNestedInput = {
    create?: XOR<MatchCreateWithoutEventInput, MatchUncheckedCreateWithoutEventInput> | MatchCreateWithoutEventInput[] | MatchUncheckedCreateWithoutEventInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutEventInput | MatchCreateOrConnectWithoutEventInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutEventInput | MatchUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: MatchCreateManyEventInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutEventInput | MatchUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutEventInput | MatchUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type AllianceUpdateManyWithoutEventNestedInput = {
    create?: XOR<AllianceCreateWithoutEventInput, AllianceUncheckedCreateWithoutEventInput> | AllianceCreateWithoutEventInput[] | AllianceUncheckedCreateWithoutEventInput[]
    connectOrCreate?: AllianceCreateOrConnectWithoutEventInput | AllianceCreateOrConnectWithoutEventInput[]
    upsert?: AllianceUpsertWithWhereUniqueWithoutEventInput | AllianceUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: AllianceCreateManyEventInputEnvelope
    set?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    disconnect?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    delete?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    connect?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    update?: AllianceUpdateWithWhereUniqueWithoutEventInput | AllianceUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: AllianceUpdateManyWithWhereWithoutEventInput | AllianceUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: AllianceScalarWhereInput | AllianceScalarWhereInput[]
  }

  export type PitEntryUpdateManyWithoutEventNestedInput = {
    create?: XOR<PitEntryCreateWithoutEventInput, PitEntryUncheckedCreateWithoutEventInput> | PitEntryCreateWithoutEventInput[] | PitEntryUncheckedCreateWithoutEventInput[]
    connectOrCreate?: PitEntryCreateOrConnectWithoutEventInput | PitEntryCreateOrConnectWithoutEventInput[]
    upsert?: PitEntryUpsertWithWhereUniqueWithoutEventInput | PitEntryUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: PitEntryCreateManyEventInputEnvelope
    set?: PitEntryWhereUniqueInput | PitEntryWhereUniqueInput[]
    disconnect?: PitEntryWhereUniqueInput | PitEntryWhereUniqueInput[]
    delete?: PitEntryWhereUniqueInput | PitEntryWhereUniqueInput[]
    connect?: PitEntryWhereUniqueInput | PitEntryWhereUniqueInput[]
    update?: PitEntryUpdateWithWhereUniqueWithoutEventInput | PitEntryUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: PitEntryUpdateManyWithWhereWithoutEventInput | PitEntryUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: PitEntryScalarWhereInput | PitEntryScalarWhereInput[]
  }

  export type TeamUncheckedUpdateManyWithoutEventsNestedInput = {
    create?: XOR<TeamCreateWithoutEventsInput, TeamUncheckedCreateWithoutEventsInput> | TeamCreateWithoutEventsInput[] | TeamUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutEventsInput | TeamCreateOrConnectWithoutEventsInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutEventsInput | TeamUpsertWithWhereUniqueWithoutEventsInput[]
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutEventsInput | TeamUpdateWithWhereUniqueWithoutEventsInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutEventsInput | TeamUpdateManyWithWhereWithoutEventsInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type MatchUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<MatchCreateWithoutEventInput, MatchUncheckedCreateWithoutEventInput> | MatchCreateWithoutEventInput[] | MatchUncheckedCreateWithoutEventInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutEventInput | MatchCreateOrConnectWithoutEventInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutEventInput | MatchUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: MatchCreateManyEventInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutEventInput | MatchUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutEventInput | MatchUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type AllianceUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<AllianceCreateWithoutEventInput, AllianceUncheckedCreateWithoutEventInput> | AllianceCreateWithoutEventInput[] | AllianceUncheckedCreateWithoutEventInput[]
    connectOrCreate?: AllianceCreateOrConnectWithoutEventInput | AllianceCreateOrConnectWithoutEventInput[]
    upsert?: AllianceUpsertWithWhereUniqueWithoutEventInput | AllianceUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: AllianceCreateManyEventInputEnvelope
    set?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    disconnect?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    delete?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    connect?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    update?: AllianceUpdateWithWhereUniqueWithoutEventInput | AllianceUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: AllianceUpdateManyWithWhereWithoutEventInput | AllianceUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: AllianceScalarWhereInput | AllianceScalarWhereInput[]
  }

  export type PitEntryUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<PitEntryCreateWithoutEventInput, PitEntryUncheckedCreateWithoutEventInput> | PitEntryCreateWithoutEventInput[] | PitEntryUncheckedCreateWithoutEventInput[]
    connectOrCreate?: PitEntryCreateOrConnectWithoutEventInput | PitEntryCreateOrConnectWithoutEventInput[]
    upsert?: PitEntryUpsertWithWhereUniqueWithoutEventInput | PitEntryUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: PitEntryCreateManyEventInputEnvelope
    set?: PitEntryWhereUniqueInput | PitEntryWhereUniqueInput[]
    disconnect?: PitEntryWhereUniqueInput | PitEntryWhereUniqueInput[]
    delete?: PitEntryWhereUniqueInput | PitEntryWhereUniqueInput[]
    connect?: PitEntryWhereUniqueInput | PitEntryWhereUniqueInput[]
    update?: PitEntryUpdateWithWhereUniqueWithoutEventInput | PitEntryUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: PitEntryUpdateManyWithWhereWithoutEventInput | PitEntryUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: PitEntryScalarWhereInput | PitEntryScalarWhereInput[]
  }

  export type EventCreateNestedOneWithoutMatchesInput = {
    create?: XOR<EventCreateWithoutMatchesInput, EventUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: EventCreateOrConnectWithoutMatchesInput
    connect?: EventWhereUniqueInput
  }

  export type AllianceCreateNestedManyWithoutMatchInput = {
    create?: XOR<AllianceCreateWithoutMatchInput, AllianceUncheckedCreateWithoutMatchInput> | AllianceCreateWithoutMatchInput[] | AllianceUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: AllianceCreateOrConnectWithoutMatchInput | AllianceCreateOrConnectWithoutMatchInput[]
    createMany?: AllianceCreateManyMatchInputEnvelope
    connect?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
  }

  export type ScheduleCreateNestedManyWithoutMatchInput = {
    create?: XOR<ScheduleCreateWithoutMatchInput, ScheduleUncheckedCreateWithoutMatchInput> | ScheduleCreateWithoutMatchInput[] | ScheduleUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutMatchInput | ScheduleCreateOrConnectWithoutMatchInput[]
    createMany?: ScheduleCreateManyMatchInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type AllianceUncheckedCreateNestedManyWithoutMatchInput = {
    create?: XOR<AllianceCreateWithoutMatchInput, AllianceUncheckedCreateWithoutMatchInput> | AllianceCreateWithoutMatchInput[] | AllianceUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: AllianceCreateOrConnectWithoutMatchInput | AllianceCreateOrConnectWithoutMatchInput[]
    createMany?: AllianceCreateManyMatchInputEnvelope
    connect?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
  }

  export type ScheduleUncheckedCreateNestedManyWithoutMatchInput = {
    create?: XOR<ScheduleCreateWithoutMatchInput, ScheduleUncheckedCreateWithoutMatchInput> | ScheduleCreateWithoutMatchInput[] | ScheduleUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutMatchInput | ScheduleCreateOrConnectWithoutMatchInput[]
    createMany?: ScheduleCreateManyMatchInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type EventUpdateOneRequiredWithoutMatchesNestedInput = {
    create?: XOR<EventCreateWithoutMatchesInput, EventUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: EventCreateOrConnectWithoutMatchesInput
    upsert?: EventUpsertWithoutMatchesInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutMatchesInput, EventUpdateWithoutMatchesInput>, EventUncheckedUpdateWithoutMatchesInput>
  }

  export type AllianceUpdateManyWithoutMatchNestedInput = {
    create?: XOR<AllianceCreateWithoutMatchInput, AllianceUncheckedCreateWithoutMatchInput> | AllianceCreateWithoutMatchInput[] | AllianceUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: AllianceCreateOrConnectWithoutMatchInput | AllianceCreateOrConnectWithoutMatchInput[]
    upsert?: AllianceUpsertWithWhereUniqueWithoutMatchInput | AllianceUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: AllianceCreateManyMatchInputEnvelope
    set?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    disconnect?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    delete?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    connect?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    update?: AllianceUpdateWithWhereUniqueWithoutMatchInput | AllianceUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: AllianceUpdateManyWithWhereWithoutMatchInput | AllianceUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: AllianceScalarWhereInput | AllianceScalarWhereInput[]
  }

  export type ScheduleUpdateManyWithoutMatchNestedInput = {
    create?: XOR<ScheduleCreateWithoutMatchInput, ScheduleUncheckedCreateWithoutMatchInput> | ScheduleCreateWithoutMatchInput[] | ScheduleUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutMatchInput | ScheduleCreateOrConnectWithoutMatchInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutMatchInput | ScheduleUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: ScheduleCreateManyMatchInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutMatchInput | ScheduleUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutMatchInput | ScheduleUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type AllianceUncheckedUpdateManyWithoutMatchNestedInput = {
    create?: XOR<AllianceCreateWithoutMatchInput, AllianceUncheckedCreateWithoutMatchInput> | AllianceCreateWithoutMatchInput[] | AllianceUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: AllianceCreateOrConnectWithoutMatchInput | AllianceCreateOrConnectWithoutMatchInput[]
    upsert?: AllianceUpsertWithWhereUniqueWithoutMatchInput | AllianceUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: AllianceCreateManyMatchInputEnvelope
    set?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    disconnect?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    delete?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    connect?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    update?: AllianceUpdateWithWhereUniqueWithoutMatchInput | AllianceUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: AllianceUpdateManyWithWhereWithoutMatchInput | AllianceUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: AllianceScalarWhereInput | AllianceScalarWhereInput[]
  }

  export type ScheduleUncheckedUpdateManyWithoutMatchNestedInput = {
    create?: XOR<ScheduleCreateWithoutMatchInput, ScheduleUncheckedCreateWithoutMatchInput> | ScheduleCreateWithoutMatchInput[] | ScheduleUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutMatchInput | ScheduleCreateOrConnectWithoutMatchInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutMatchInput | ScheduleUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: ScheduleCreateManyMatchInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutMatchInput | ScheduleUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutMatchInput | ScheduleUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type MatchCreateNestedOneWithoutSchedulesInput = {
    create?: XOR<MatchCreateWithoutSchedulesInput, MatchUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: MatchCreateOrConnectWithoutSchedulesInput
    connect?: MatchWhereUniqueInput
  }

  export type MatchUpdateOneRequiredWithoutSchedulesNestedInput = {
    create?: XOR<MatchCreateWithoutSchedulesInput, MatchUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: MatchCreateOrConnectWithoutSchedulesInput
    upsert?: MatchUpsertWithoutSchedulesInput
    connect?: MatchWhereUniqueInput
    update?: XOR<XOR<MatchUpdateToOneWithWhereWithoutSchedulesInput, MatchUpdateWithoutSchedulesInput>, MatchUncheckedUpdateWithoutSchedulesInput>
  }

  export type EventCreateNestedOneWithoutAlliancesInput = {
    create?: XOR<EventCreateWithoutAlliancesInput, EventUncheckedCreateWithoutAlliancesInput>
    connectOrCreate?: EventCreateOrConnectWithoutAlliancesInput
    connect?: EventWhereUniqueInput
  }

  export type TeamCreateNestedManyWithoutAllianceInput = {
    create?: XOR<TeamCreateWithoutAllianceInput, TeamUncheckedCreateWithoutAllianceInput> | TeamCreateWithoutAllianceInput[] | TeamUncheckedCreateWithoutAllianceInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutAllianceInput | TeamCreateOrConnectWithoutAllianceInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type MatchCreateNestedOneWithoutAlliancesInput = {
    create?: XOR<MatchCreateWithoutAlliancesInput, MatchUncheckedCreateWithoutAlliancesInput>
    connectOrCreate?: MatchCreateOrConnectWithoutAlliancesInput
    connect?: MatchWhereUniqueInput
  }

  export type TeamUncheckedCreateNestedManyWithoutAllianceInput = {
    create?: XOR<TeamCreateWithoutAllianceInput, TeamUncheckedCreateWithoutAllianceInput> | TeamCreateWithoutAllianceInput[] | TeamUncheckedCreateWithoutAllianceInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutAllianceInput | TeamCreateOrConnectWithoutAllianceInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type EnumAllianceColorFieldUpdateOperationsInput = {
    set?: $Enums.AllianceColor
  }

  export type EventUpdateOneRequiredWithoutAlliancesNestedInput = {
    create?: XOR<EventCreateWithoutAlliancesInput, EventUncheckedCreateWithoutAlliancesInput>
    connectOrCreate?: EventCreateOrConnectWithoutAlliancesInput
    upsert?: EventUpsertWithoutAlliancesInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutAlliancesInput, EventUpdateWithoutAlliancesInput>, EventUncheckedUpdateWithoutAlliancesInput>
  }

  export type TeamUpdateManyWithoutAllianceNestedInput = {
    create?: XOR<TeamCreateWithoutAllianceInput, TeamUncheckedCreateWithoutAllianceInput> | TeamCreateWithoutAllianceInput[] | TeamUncheckedCreateWithoutAllianceInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutAllianceInput | TeamCreateOrConnectWithoutAllianceInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutAllianceInput | TeamUpsertWithWhereUniqueWithoutAllianceInput[]
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutAllianceInput | TeamUpdateWithWhereUniqueWithoutAllianceInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutAllianceInput | TeamUpdateManyWithWhereWithoutAllianceInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type MatchUpdateOneRequiredWithoutAlliancesNestedInput = {
    create?: XOR<MatchCreateWithoutAlliancesInput, MatchUncheckedCreateWithoutAlliancesInput>
    connectOrCreate?: MatchCreateOrConnectWithoutAlliancesInput
    upsert?: MatchUpsertWithoutAlliancesInput
    connect?: MatchWhereUniqueInput
    update?: XOR<XOR<MatchUpdateToOneWithWhereWithoutAlliancesInput, MatchUpdateWithoutAlliancesInput>, MatchUncheckedUpdateWithoutAlliancesInput>
  }

  export type TeamUncheckedUpdateManyWithoutAllianceNestedInput = {
    create?: XOR<TeamCreateWithoutAllianceInput, TeamUncheckedCreateWithoutAllianceInput> | TeamCreateWithoutAllianceInput[] | TeamUncheckedCreateWithoutAllianceInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutAllianceInput | TeamCreateOrConnectWithoutAllianceInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutAllianceInput | TeamUpsertWithWhereUniqueWithoutAllianceInput[]
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutAllianceInput | TeamUpdateWithWhereUniqueWithoutAllianceInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutAllianceInput | TeamUpdateManyWithWhereWithoutAllianceInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type AllianceCreateNestedManyWithoutTeamsInput = {
    create?: XOR<AllianceCreateWithoutTeamsInput, AllianceUncheckedCreateWithoutTeamsInput> | AllianceCreateWithoutTeamsInput[] | AllianceUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: AllianceCreateOrConnectWithoutTeamsInput | AllianceCreateOrConnectWithoutTeamsInput[]
    connect?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
  }

  export type EventCreateNestedManyWithoutTeamsInput = {
    create?: XOR<EventCreateWithoutTeamsInput, EventUncheckedCreateWithoutTeamsInput> | EventCreateWithoutTeamsInput[] | EventUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: EventCreateOrConnectWithoutTeamsInput | EventCreateOrConnectWithoutTeamsInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type PitEntryCreateNestedManyWithoutTeamInput = {
    create?: XOR<PitEntryCreateWithoutTeamInput, PitEntryUncheckedCreateWithoutTeamInput> | PitEntryCreateWithoutTeamInput[] | PitEntryUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PitEntryCreateOrConnectWithoutTeamInput | PitEntryCreateOrConnectWithoutTeamInput[]
    createMany?: PitEntryCreateManyTeamInputEnvelope
    connect?: PitEntryWhereUniqueInput | PitEntryWhereUniqueInput[]
  }

  export type AllianceUncheckedCreateNestedManyWithoutTeamsInput = {
    create?: XOR<AllianceCreateWithoutTeamsInput, AllianceUncheckedCreateWithoutTeamsInput> | AllianceCreateWithoutTeamsInput[] | AllianceUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: AllianceCreateOrConnectWithoutTeamsInput | AllianceCreateOrConnectWithoutTeamsInput[]
    connect?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutTeamsInput = {
    create?: XOR<EventCreateWithoutTeamsInput, EventUncheckedCreateWithoutTeamsInput> | EventCreateWithoutTeamsInput[] | EventUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: EventCreateOrConnectWithoutTeamsInput | EventCreateOrConnectWithoutTeamsInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type PitEntryUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<PitEntryCreateWithoutTeamInput, PitEntryUncheckedCreateWithoutTeamInput> | PitEntryCreateWithoutTeamInput[] | PitEntryUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PitEntryCreateOrConnectWithoutTeamInput | PitEntryCreateOrConnectWithoutTeamInput[]
    createMany?: PitEntryCreateManyTeamInputEnvelope
    connect?: PitEntryWhereUniqueInput | PitEntryWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type AllianceUpdateManyWithoutTeamsNestedInput = {
    create?: XOR<AllianceCreateWithoutTeamsInput, AllianceUncheckedCreateWithoutTeamsInput> | AllianceCreateWithoutTeamsInput[] | AllianceUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: AllianceCreateOrConnectWithoutTeamsInput | AllianceCreateOrConnectWithoutTeamsInput[]
    upsert?: AllianceUpsertWithWhereUniqueWithoutTeamsInput | AllianceUpsertWithWhereUniqueWithoutTeamsInput[]
    set?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    disconnect?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    delete?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    connect?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    update?: AllianceUpdateWithWhereUniqueWithoutTeamsInput | AllianceUpdateWithWhereUniqueWithoutTeamsInput[]
    updateMany?: AllianceUpdateManyWithWhereWithoutTeamsInput | AllianceUpdateManyWithWhereWithoutTeamsInput[]
    deleteMany?: AllianceScalarWhereInput | AllianceScalarWhereInput[]
  }

  export type EventUpdateManyWithoutTeamsNestedInput = {
    create?: XOR<EventCreateWithoutTeamsInput, EventUncheckedCreateWithoutTeamsInput> | EventCreateWithoutTeamsInput[] | EventUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: EventCreateOrConnectWithoutTeamsInput | EventCreateOrConnectWithoutTeamsInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutTeamsInput | EventUpsertWithWhereUniqueWithoutTeamsInput[]
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutTeamsInput | EventUpdateWithWhereUniqueWithoutTeamsInput[]
    updateMany?: EventUpdateManyWithWhereWithoutTeamsInput | EventUpdateManyWithWhereWithoutTeamsInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type PitEntryUpdateManyWithoutTeamNestedInput = {
    create?: XOR<PitEntryCreateWithoutTeamInput, PitEntryUncheckedCreateWithoutTeamInput> | PitEntryCreateWithoutTeamInput[] | PitEntryUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PitEntryCreateOrConnectWithoutTeamInput | PitEntryCreateOrConnectWithoutTeamInput[]
    upsert?: PitEntryUpsertWithWhereUniqueWithoutTeamInput | PitEntryUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: PitEntryCreateManyTeamInputEnvelope
    set?: PitEntryWhereUniqueInput | PitEntryWhereUniqueInput[]
    disconnect?: PitEntryWhereUniqueInput | PitEntryWhereUniqueInput[]
    delete?: PitEntryWhereUniqueInput | PitEntryWhereUniqueInput[]
    connect?: PitEntryWhereUniqueInput | PitEntryWhereUniqueInput[]
    update?: PitEntryUpdateWithWhereUniqueWithoutTeamInput | PitEntryUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: PitEntryUpdateManyWithWhereWithoutTeamInput | PitEntryUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: PitEntryScalarWhereInput | PitEntryScalarWhereInput[]
  }

  export type AllianceUncheckedUpdateManyWithoutTeamsNestedInput = {
    create?: XOR<AllianceCreateWithoutTeamsInput, AllianceUncheckedCreateWithoutTeamsInput> | AllianceCreateWithoutTeamsInput[] | AllianceUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: AllianceCreateOrConnectWithoutTeamsInput | AllianceCreateOrConnectWithoutTeamsInput[]
    upsert?: AllianceUpsertWithWhereUniqueWithoutTeamsInput | AllianceUpsertWithWhereUniqueWithoutTeamsInput[]
    set?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    disconnect?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    delete?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    connect?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    update?: AllianceUpdateWithWhereUniqueWithoutTeamsInput | AllianceUpdateWithWhereUniqueWithoutTeamsInput[]
    updateMany?: AllianceUpdateManyWithWhereWithoutTeamsInput | AllianceUpdateManyWithWhereWithoutTeamsInput[]
    deleteMany?: AllianceScalarWhereInput | AllianceScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutTeamsNestedInput = {
    create?: XOR<EventCreateWithoutTeamsInput, EventUncheckedCreateWithoutTeamsInput> | EventCreateWithoutTeamsInput[] | EventUncheckedCreateWithoutTeamsInput[]
    connectOrCreate?: EventCreateOrConnectWithoutTeamsInput | EventCreateOrConnectWithoutTeamsInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutTeamsInput | EventUpsertWithWhereUniqueWithoutTeamsInput[]
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutTeamsInput | EventUpdateWithWhereUniqueWithoutTeamsInput[]
    updateMany?: EventUpdateManyWithWhereWithoutTeamsInput | EventUpdateManyWithWhereWithoutTeamsInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type PitEntryUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<PitEntryCreateWithoutTeamInput, PitEntryUncheckedCreateWithoutTeamInput> | PitEntryCreateWithoutTeamInput[] | PitEntryUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PitEntryCreateOrConnectWithoutTeamInput | PitEntryCreateOrConnectWithoutTeamInput[]
    upsert?: PitEntryUpsertWithWhereUniqueWithoutTeamInput | PitEntryUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: PitEntryCreateManyTeamInputEnvelope
    set?: PitEntryWhereUniqueInput | PitEntryWhereUniqueInput[]
    disconnect?: PitEntryWhereUniqueInput | PitEntryWhereUniqueInput[]
    delete?: PitEntryWhereUniqueInput | PitEntryWhereUniqueInput[]
    connect?: PitEntryWhereUniqueInput | PitEntryWhereUniqueInput[]
    update?: PitEntryUpdateWithWhereUniqueWithoutTeamInput | PitEntryUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: PitEntryUpdateManyWithWhereWithoutTeamInput | PitEntryUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: PitEntryScalarWhereInput | PitEntryScalarWhereInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type TeamCreateNestedOneWithoutPitEntrysInput = {
    create?: XOR<TeamCreateWithoutPitEntrysInput, TeamUncheckedCreateWithoutPitEntrysInput>
    connectOrCreate?: TeamCreateOrConnectWithoutPitEntrysInput
    connect?: TeamWhereUniqueInput
  }

  export type EventCreateNestedOneWithoutPitEntrysInput = {
    create?: XOR<EventCreateWithoutPitEntrysInput, EventUncheckedCreateWithoutPitEntrysInput>
    connectOrCreate?: EventCreateOrConnectWithoutPitEntrysInput
    connect?: EventWhereUniqueInput
  }

  export type TeamUpdateOneRequiredWithoutPitEntrysNestedInput = {
    create?: XOR<TeamCreateWithoutPitEntrysInput, TeamUncheckedCreateWithoutPitEntrysInput>
    connectOrCreate?: TeamCreateOrConnectWithoutPitEntrysInput
    upsert?: TeamUpsertWithoutPitEntrysInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutPitEntrysInput, TeamUpdateWithoutPitEntrysInput>, TeamUncheckedUpdateWithoutPitEntrysInput>
  }

  export type EventUpdateOneRequiredWithoutPitEntrysNestedInput = {
    create?: XOR<EventCreateWithoutPitEntrysInput, EventUncheckedCreateWithoutPitEntrysInput>
    connectOrCreate?: EventCreateOrConnectWithoutPitEntrysInput
    upsert?: EventUpsertWithoutPitEntrysInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutPitEntrysInput, EventUpdateWithoutPitEntrysInput>, EventUncheckedUpdateWithoutPitEntrysInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumEventTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EventType | EnumEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EventType[]
    notIn?: $Enums.EventType[]
    not?: NestedEnumEventTypeFilter<$PrismaModel> | $Enums.EventType
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumEventTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventType | EnumEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EventType[]
    notIn?: $Enums.EventType[]
    not?: NestedEnumEventTypeWithAggregatesFilter<$PrismaModel> | $Enums.EventType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventTypeFilter<$PrismaModel>
    _max?: NestedEnumEventTypeFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumAllianceColorFilter<$PrismaModel = never> = {
    equals?: $Enums.AllianceColor | EnumAllianceColorFieldRefInput<$PrismaModel>
    in?: $Enums.AllianceColor[]
    notIn?: $Enums.AllianceColor[]
    not?: NestedEnumAllianceColorFilter<$PrismaModel> | $Enums.AllianceColor
  }

  export type NestedEnumAllianceColorWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AllianceColor | EnumAllianceColorFieldRefInput<$PrismaModel>
    in?: $Enums.AllianceColor[]
    notIn?: $Enums.AllianceColor[]
    not?: NestedEnumAllianceColorWithAggregatesFilter<$PrismaModel> | $Enums.AllianceColor
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAllianceColorFilter<$PrismaModel>
    _max?: NestedEnumAllianceColorFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type TeamCreateWithoutEventsInput = {
    tba_key: string
    team_number: number
    nickname: string
    logo?: string | null
    alliance?: AllianceCreateNestedManyWithoutTeamsInput
    pitEntrys?: PitEntryCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutEventsInput = {
    tba_key: string
    team_number: number
    nickname: string
    logo?: string | null
    alliance?: AllianceUncheckedCreateNestedManyWithoutTeamsInput
    pitEntrys?: PitEntryUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutEventsInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutEventsInput, TeamUncheckedCreateWithoutEventsInput>
  }

  export type MatchCreateWithoutEventInput = {
    key: string
    alliances?: AllianceCreateNestedManyWithoutMatchInput
    schedules?: ScheduleCreateNestedManyWithoutMatchInput
  }

  export type MatchUncheckedCreateWithoutEventInput = {
    key: string
    alliances?: AllianceUncheckedCreateNestedManyWithoutMatchInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutMatchInput
  }

  export type MatchCreateOrConnectWithoutEventInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutEventInput, MatchUncheckedCreateWithoutEventInput>
  }

  export type MatchCreateManyEventInputEnvelope = {
    data: MatchCreateManyEventInput | MatchCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type AllianceCreateWithoutEventInput = {
    color: $Enums.AllianceColor
    matchColor: string
    teams?: TeamCreateNestedManyWithoutAllianceInput
    match: MatchCreateNestedOneWithoutAlliancesInput
  }

  export type AllianceUncheckedCreateWithoutEventInput = {
    id?: number
    matchId: string
    color: $Enums.AllianceColor
    matchColor: string
    teams?: TeamUncheckedCreateNestedManyWithoutAllianceInput
  }

  export type AllianceCreateOrConnectWithoutEventInput = {
    where: AllianceWhereUniqueInput
    create: XOR<AllianceCreateWithoutEventInput, AllianceUncheckedCreateWithoutEventInput>
  }

  export type AllianceCreateManyEventInputEnvelope = {
    data: AllianceCreateManyEventInput | AllianceCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type PitEntryCreateWithoutEventInput = {
    id?: string
    drive_type: number
    auto_pts: number
    hang_cap: boolean
    trap_cap: boolean
    gp_level: number
    comments: string
    mercy?: boolean
    updated?: Date | string
    created?: Date | string
    team: TeamCreateNestedOneWithoutPitEntrysInput
  }

  export type PitEntryUncheckedCreateWithoutEventInput = {
    id?: string
    team_number: number
    drive_type: number
    auto_pts: number
    hang_cap: boolean
    trap_cap: boolean
    gp_level: number
    comments: string
    mercy?: boolean
    updated?: Date | string
    created?: Date | string
  }

  export type PitEntryCreateOrConnectWithoutEventInput = {
    where: PitEntryWhereUniqueInput
    create: XOR<PitEntryCreateWithoutEventInput, PitEntryUncheckedCreateWithoutEventInput>
  }

  export type PitEntryCreateManyEventInputEnvelope = {
    data: PitEntryCreateManyEventInput | PitEntryCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type TeamUpsertWithWhereUniqueWithoutEventsInput = {
    where: TeamWhereUniqueInput
    update: XOR<TeamUpdateWithoutEventsInput, TeamUncheckedUpdateWithoutEventsInput>
    create: XOR<TeamCreateWithoutEventsInput, TeamUncheckedCreateWithoutEventsInput>
  }

  export type TeamUpdateWithWhereUniqueWithoutEventsInput = {
    where: TeamWhereUniqueInput
    data: XOR<TeamUpdateWithoutEventsInput, TeamUncheckedUpdateWithoutEventsInput>
  }

  export type TeamUpdateManyWithWhereWithoutEventsInput = {
    where: TeamScalarWhereInput
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyWithoutEventsInput>
  }

  export type TeamScalarWhereInput = {
    AND?: TeamScalarWhereInput | TeamScalarWhereInput[]
    OR?: TeamScalarWhereInput[]
    NOT?: TeamScalarWhereInput | TeamScalarWhereInput[]
    tba_key?: StringFilter<"Team"> | string
    team_number?: IntFilter<"Team"> | number
    nickname?: StringFilter<"Team"> | string
    logo?: StringNullableFilter<"Team"> | string | null
  }

  export type MatchUpsertWithWhereUniqueWithoutEventInput = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutEventInput, MatchUncheckedUpdateWithoutEventInput>
    create: XOR<MatchCreateWithoutEventInput, MatchUncheckedCreateWithoutEventInput>
  }

  export type MatchUpdateWithWhereUniqueWithoutEventInput = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutEventInput, MatchUncheckedUpdateWithoutEventInput>
  }

  export type MatchUpdateManyWithWhereWithoutEventInput = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutEventInput>
  }

  export type MatchScalarWhereInput = {
    AND?: MatchScalarWhereInput | MatchScalarWhereInput[]
    OR?: MatchScalarWhereInput[]
    NOT?: MatchScalarWhereInput | MatchScalarWhereInput[]
    key?: StringFilter<"Match"> | string
    eventId?: StringFilter<"Match"> | string
  }

  export type AllianceUpsertWithWhereUniqueWithoutEventInput = {
    where: AllianceWhereUniqueInput
    update: XOR<AllianceUpdateWithoutEventInput, AllianceUncheckedUpdateWithoutEventInput>
    create: XOR<AllianceCreateWithoutEventInput, AllianceUncheckedCreateWithoutEventInput>
  }

  export type AllianceUpdateWithWhereUniqueWithoutEventInput = {
    where: AllianceWhereUniqueInput
    data: XOR<AllianceUpdateWithoutEventInput, AllianceUncheckedUpdateWithoutEventInput>
  }

  export type AllianceUpdateManyWithWhereWithoutEventInput = {
    where: AllianceScalarWhereInput
    data: XOR<AllianceUpdateManyMutationInput, AllianceUncheckedUpdateManyWithoutEventInput>
  }

  export type AllianceScalarWhereInput = {
    AND?: AllianceScalarWhereInput | AllianceScalarWhereInput[]
    OR?: AllianceScalarWhereInput[]
    NOT?: AllianceScalarWhereInput | AllianceScalarWhereInput[]
    id?: IntFilter<"Alliance"> | number
    eventId?: StringFilter<"Alliance"> | string
    matchId?: StringFilter<"Alliance"> | string
    color?: EnumAllianceColorFilter<"Alliance"> | $Enums.AllianceColor
    matchColor?: StringFilter<"Alliance"> | string
  }

  export type PitEntryUpsertWithWhereUniqueWithoutEventInput = {
    where: PitEntryWhereUniqueInput
    update: XOR<PitEntryUpdateWithoutEventInput, PitEntryUncheckedUpdateWithoutEventInput>
    create: XOR<PitEntryCreateWithoutEventInput, PitEntryUncheckedCreateWithoutEventInput>
  }

  export type PitEntryUpdateWithWhereUniqueWithoutEventInput = {
    where: PitEntryWhereUniqueInput
    data: XOR<PitEntryUpdateWithoutEventInput, PitEntryUncheckedUpdateWithoutEventInput>
  }

  export type PitEntryUpdateManyWithWhereWithoutEventInput = {
    where: PitEntryScalarWhereInput
    data: XOR<PitEntryUpdateManyMutationInput, PitEntryUncheckedUpdateManyWithoutEventInput>
  }

  export type PitEntryScalarWhereInput = {
    AND?: PitEntryScalarWhereInput | PitEntryScalarWhereInput[]
    OR?: PitEntryScalarWhereInput[]
    NOT?: PitEntryScalarWhereInput | PitEntryScalarWhereInput[]
    id?: StringFilter<"PitEntry"> | string
    team_number?: IntFilter<"PitEntry"> | number
    drive_type?: IntFilter<"PitEntry"> | number
    auto_pts?: IntFilter<"PitEntry"> | number
    hang_cap?: BoolFilter<"PitEntry"> | boolean
    trap_cap?: BoolFilter<"PitEntry"> | boolean
    gp_level?: IntFilter<"PitEntry"> | number
    comments?: StringFilter<"PitEntry"> | string
    mercy?: BoolFilter<"PitEntry"> | boolean
    event_key?: StringFilter<"PitEntry"> | string
    updated?: DateTimeFilter<"PitEntry"> | Date | string
    created?: DateTimeFilter<"PitEntry"> | Date | string
  }

  export type EventCreateWithoutMatchesInput = {
    key: string
    name: string
    type?: $Enums.EventType
    start_date: Date | string
    end_date: Date | string
    updated?: Date | string
    created: Date | string
    teams?: TeamCreateNestedManyWithoutEventsInput
    alliances?: AllianceCreateNestedManyWithoutEventInput
    pitEntrys?: PitEntryCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutMatchesInput = {
    key: string
    name: string
    type?: $Enums.EventType
    start_date: Date | string
    end_date: Date | string
    updated?: Date | string
    created: Date | string
    teams?: TeamUncheckedCreateNestedManyWithoutEventsInput
    alliances?: AllianceUncheckedCreateNestedManyWithoutEventInput
    pitEntrys?: PitEntryUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutMatchesInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutMatchesInput, EventUncheckedCreateWithoutMatchesInput>
  }

  export type AllianceCreateWithoutMatchInput = {
    color: $Enums.AllianceColor
    matchColor: string
    event: EventCreateNestedOneWithoutAlliancesInput
    teams?: TeamCreateNestedManyWithoutAllianceInput
  }

  export type AllianceUncheckedCreateWithoutMatchInput = {
    id?: number
    eventId: string
    color: $Enums.AllianceColor
    matchColor: string
    teams?: TeamUncheckedCreateNestedManyWithoutAllianceInput
  }

  export type AllianceCreateOrConnectWithoutMatchInput = {
    where: AllianceWhereUniqueInput
    create: XOR<AllianceCreateWithoutMatchInput, AllianceUncheckedCreateWithoutMatchInput>
  }

  export type AllianceCreateManyMatchInputEnvelope = {
    data: AllianceCreateManyMatchInput | AllianceCreateManyMatchInput[]
    skipDuplicates?: boolean
  }

  export type ScheduleCreateWithoutMatchInput = {
    uname: string
    position: number
  }

  export type ScheduleUncheckedCreateWithoutMatchInput = {
    key?: number
    uname: string
    position: number
  }

  export type ScheduleCreateOrConnectWithoutMatchInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutMatchInput, ScheduleUncheckedCreateWithoutMatchInput>
  }

  export type ScheduleCreateManyMatchInputEnvelope = {
    data: ScheduleCreateManyMatchInput | ScheduleCreateManyMatchInput[]
    skipDuplicates?: boolean
  }

  export type EventUpsertWithoutMatchesInput = {
    update: XOR<EventUpdateWithoutMatchesInput, EventUncheckedUpdateWithoutMatchesInput>
    create: XOR<EventCreateWithoutMatchesInput, EventUncheckedCreateWithoutMatchesInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutMatchesInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutMatchesInput, EventUncheckedUpdateWithoutMatchesInput>
  }

  export type EventUpdateWithoutMatchesInput = {
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    teams?: TeamUpdateManyWithoutEventsNestedInput
    alliances?: AllianceUpdateManyWithoutEventNestedInput
    pitEntrys?: PitEntryUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutMatchesInput = {
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    teams?: TeamUncheckedUpdateManyWithoutEventsNestedInput
    alliances?: AllianceUncheckedUpdateManyWithoutEventNestedInput
    pitEntrys?: PitEntryUncheckedUpdateManyWithoutEventNestedInput
  }

  export type AllianceUpsertWithWhereUniqueWithoutMatchInput = {
    where: AllianceWhereUniqueInput
    update: XOR<AllianceUpdateWithoutMatchInput, AllianceUncheckedUpdateWithoutMatchInput>
    create: XOR<AllianceCreateWithoutMatchInput, AllianceUncheckedCreateWithoutMatchInput>
  }

  export type AllianceUpdateWithWhereUniqueWithoutMatchInput = {
    where: AllianceWhereUniqueInput
    data: XOR<AllianceUpdateWithoutMatchInput, AllianceUncheckedUpdateWithoutMatchInput>
  }

  export type AllianceUpdateManyWithWhereWithoutMatchInput = {
    where: AllianceScalarWhereInput
    data: XOR<AllianceUpdateManyMutationInput, AllianceUncheckedUpdateManyWithoutMatchInput>
  }

  export type ScheduleUpsertWithWhereUniqueWithoutMatchInput = {
    where: ScheduleWhereUniqueInput
    update: XOR<ScheduleUpdateWithoutMatchInput, ScheduleUncheckedUpdateWithoutMatchInput>
    create: XOR<ScheduleCreateWithoutMatchInput, ScheduleUncheckedCreateWithoutMatchInput>
  }

  export type ScheduleUpdateWithWhereUniqueWithoutMatchInput = {
    where: ScheduleWhereUniqueInput
    data: XOR<ScheduleUpdateWithoutMatchInput, ScheduleUncheckedUpdateWithoutMatchInput>
  }

  export type ScheduleUpdateManyWithWhereWithoutMatchInput = {
    where: ScheduleScalarWhereInput
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyWithoutMatchInput>
  }

  export type ScheduleScalarWhereInput = {
    AND?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
    OR?: ScheduleScalarWhereInput[]
    NOT?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
    key?: IntFilter<"Schedule"> | number
    uname?: StringFilter<"Schedule"> | string
    position?: IntFilter<"Schedule"> | number
    matchId?: StringFilter<"Schedule"> | string
  }

  export type MatchCreateWithoutSchedulesInput = {
    key: string
    event: EventCreateNestedOneWithoutMatchesInput
    alliances?: AllianceCreateNestedManyWithoutMatchInput
  }

  export type MatchUncheckedCreateWithoutSchedulesInput = {
    key: string
    eventId: string
    alliances?: AllianceUncheckedCreateNestedManyWithoutMatchInput
  }

  export type MatchCreateOrConnectWithoutSchedulesInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutSchedulesInput, MatchUncheckedCreateWithoutSchedulesInput>
  }

  export type MatchUpsertWithoutSchedulesInput = {
    update: XOR<MatchUpdateWithoutSchedulesInput, MatchUncheckedUpdateWithoutSchedulesInput>
    create: XOR<MatchCreateWithoutSchedulesInput, MatchUncheckedCreateWithoutSchedulesInput>
    where?: MatchWhereInput
  }

  export type MatchUpdateToOneWithWhereWithoutSchedulesInput = {
    where?: MatchWhereInput
    data: XOR<MatchUpdateWithoutSchedulesInput, MatchUncheckedUpdateWithoutSchedulesInput>
  }

  export type MatchUpdateWithoutSchedulesInput = {
    key?: StringFieldUpdateOperationsInput | string
    event?: EventUpdateOneRequiredWithoutMatchesNestedInput
    alliances?: AllianceUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateWithoutSchedulesInput = {
    key?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    alliances?: AllianceUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type EventCreateWithoutAlliancesInput = {
    key: string
    name: string
    type?: $Enums.EventType
    start_date: Date | string
    end_date: Date | string
    updated?: Date | string
    created: Date | string
    teams?: TeamCreateNestedManyWithoutEventsInput
    matches?: MatchCreateNestedManyWithoutEventInput
    pitEntrys?: PitEntryCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutAlliancesInput = {
    key: string
    name: string
    type?: $Enums.EventType
    start_date: Date | string
    end_date: Date | string
    updated?: Date | string
    created: Date | string
    teams?: TeamUncheckedCreateNestedManyWithoutEventsInput
    matches?: MatchUncheckedCreateNestedManyWithoutEventInput
    pitEntrys?: PitEntryUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutAlliancesInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutAlliancesInput, EventUncheckedCreateWithoutAlliancesInput>
  }

  export type TeamCreateWithoutAllianceInput = {
    tba_key: string
    team_number: number
    nickname: string
    logo?: string | null
    events?: EventCreateNestedManyWithoutTeamsInput
    pitEntrys?: PitEntryCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutAllianceInput = {
    tba_key: string
    team_number: number
    nickname: string
    logo?: string | null
    events?: EventUncheckedCreateNestedManyWithoutTeamsInput
    pitEntrys?: PitEntryUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutAllianceInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutAllianceInput, TeamUncheckedCreateWithoutAllianceInput>
  }

  export type MatchCreateWithoutAlliancesInput = {
    key: string
    event: EventCreateNestedOneWithoutMatchesInput
    schedules?: ScheduleCreateNestedManyWithoutMatchInput
  }

  export type MatchUncheckedCreateWithoutAlliancesInput = {
    key: string
    eventId: string
    schedules?: ScheduleUncheckedCreateNestedManyWithoutMatchInput
  }

  export type MatchCreateOrConnectWithoutAlliancesInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutAlliancesInput, MatchUncheckedCreateWithoutAlliancesInput>
  }

  export type EventUpsertWithoutAlliancesInput = {
    update: XOR<EventUpdateWithoutAlliancesInput, EventUncheckedUpdateWithoutAlliancesInput>
    create: XOR<EventCreateWithoutAlliancesInput, EventUncheckedCreateWithoutAlliancesInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutAlliancesInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutAlliancesInput, EventUncheckedUpdateWithoutAlliancesInput>
  }

  export type EventUpdateWithoutAlliancesInput = {
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    teams?: TeamUpdateManyWithoutEventsNestedInput
    matches?: MatchUpdateManyWithoutEventNestedInput
    pitEntrys?: PitEntryUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutAlliancesInput = {
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    teams?: TeamUncheckedUpdateManyWithoutEventsNestedInput
    matches?: MatchUncheckedUpdateManyWithoutEventNestedInput
    pitEntrys?: PitEntryUncheckedUpdateManyWithoutEventNestedInput
  }

  export type TeamUpsertWithWhereUniqueWithoutAllianceInput = {
    where: TeamWhereUniqueInput
    update: XOR<TeamUpdateWithoutAllianceInput, TeamUncheckedUpdateWithoutAllianceInput>
    create: XOR<TeamCreateWithoutAllianceInput, TeamUncheckedCreateWithoutAllianceInput>
  }

  export type TeamUpdateWithWhereUniqueWithoutAllianceInput = {
    where: TeamWhereUniqueInput
    data: XOR<TeamUpdateWithoutAllianceInput, TeamUncheckedUpdateWithoutAllianceInput>
  }

  export type TeamUpdateManyWithWhereWithoutAllianceInput = {
    where: TeamScalarWhereInput
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyWithoutAllianceInput>
  }

  export type MatchUpsertWithoutAlliancesInput = {
    update: XOR<MatchUpdateWithoutAlliancesInput, MatchUncheckedUpdateWithoutAlliancesInput>
    create: XOR<MatchCreateWithoutAlliancesInput, MatchUncheckedCreateWithoutAlliancesInput>
    where?: MatchWhereInput
  }

  export type MatchUpdateToOneWithWhereWithoutAlliancesInput = {
    where?: MatchWhereInput
    data: XOR<MatchUpdateWithoutAlliancesInput, MatchUncheckedUpdateWithoutAlliancesInput>
  }

  export type MatchUpdateWithoutAlliancesInput = {
    key?: StringFieldUpdateOperationsInput | string
    event?: EventUpdateOneRequiredWithoutMatchesNestedInput
    schedules?: ScheduleUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateWithoutAlliancesInput = {
    key?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    schedules?: ScheduleUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type AllianceCreateWithoutTeamsInput = {
    color: $Enums.AllianceColor
    matchColor: string
    event: EventCreateNestedOneWithoutAlliancesInput
    match: MatchCreateNestedOneWithoutAlliancesInput
  }

  export type AllianceUncheckedCreateWithoutTeamsInput = {
    id?: number
    eventId: string
    matchId: string
    color: $Enums.AllianceColor
    matchColor: string
  }

  export type AllianceCreateOrConnectWithoutTeamsInput = {
    where: AllianceWhereUniqueInput
    create: XOR<AllianceCreateWithoutTeamsInput, AllianceUncheckedCreateWithoutTeamsInput>
  }

  export type EventCreateWithoutTeamsInput = {
    key: string
    name: string
    type?: $Enums.EventType
    start_date: Date | string
    end_date: Date | string
    updated?: Date | string
    created: Date | string
    matches?: MatchCreateNestedManyWithoutEventInput
    alliances?: AllianceCreateNestedManyWithoutEventInput
    pitEntrys?: PitEntryCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutTeamsInput = {
    key: string
    name: string
    type?: $Enums.EventType
    start_date: Date | string
    end_date: Date | string
    updated?: Date | string
    created: Date | string
    matches?: MatchUncheckedCreateNestedManyWithoutEventInput
    alliances?: AllianceUncheckedCreateNestedManyWithoutEventInput
    pitEntrys?: PitEntryUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutTeamsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutTeamsInput, EventUncheckedCreateWithoutTeamsInput>
  }

  export type PitEntryCreateWithoutTeamInput = {
    id?: string
    drive_type: number
    auto_pts: number
    hang_cap: boolean
    trap_cap: boolean
    gp_level: number
    comments: string
    mercy?: boolean
    updated?: Date | string
    created?: Date | string
    event: EventCreateNestedOneWithoutPitEntrysInput
  }

  export type PitEntryUncheckedCreateWithoutTeamInput = {
    id?: string
    drive_type: number
    auto_pts: number
    hang_cap: boolean
    trap_cap: boolean
    gp_level: number
    comments: string
    mercy?: boolean
    event_key: string
    updated?: Date | string
    created?: Date | string
  }

  export type PitEntryCreateOrConnectWithoutTeamInput = {
    where: PitEntryWhereUniqueInput
    create: XOR<PitEntryCreateWithoutTeamInput, PitEntryUncheckedCreateWithoutTeamInput>
  }

  export type PitEntryCreateManyTeamInputEnvelope = {
    data: PitEntryCreateManyTeamInput | PitEntryCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type AllianceUpsertWithWhereUniqueWithoutTeamsInput = {
    where: AllianceWhereUniqueInput
    update: XOR<AllianceUpdateWithoutTeamsInput, AllianceUncheckedUpdateWithoutTeamsInput>
    create: XOR<AllianceCreateWithoutTeamsInput, AllianceUncheckedCreateWithoutTeamsInput>
  }

  export type AllianceUpdateWithWhereUniqueWithoutTeamsInput = {
    where: AllianceWhereUniqueInput
    data: XOR<AllianceUpdateWithoutTeamsInput, AllianceUncheckedUpdateWithoutTeamsInput>
  }

  export type AllianceUpdateManyWithWhereWithoutTeamsInput = {
    where: AllianceScalarWhereInput
    data: XOR<AllianceUpdateManyMutationInput, AllianceUncheckedUpdateManyWithoutTeamsInput>
  }

  export type EventUpsertWithWhereUniqueWithoutTeamsInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutTeamsInput, EventUncheckedUpdateWithoutTeamsInput>
    create: XOR<EventCreateWithoutTeamsInput, EventUncheckedCreateWithoutTeamsInput>
  }

  export type EventUpdateWithWhereUniqueWithoutTeamsInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutTeamsInput, EventUncheckedUpdateWithoutTeamsInput>
  }

  export type EventUpdateManyWithWhereWithoutTeamsInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutTeamsInput>
  }

  export type EventScalarWhereInput = {
    AND?: EventScalarWhereInput | EventScalarWhereInput[]
    OR?: EventScalarWhereInput[]
    NOT?: EventScalarWhereInput | EventScalarWhereInput[]
    key?: StringFilter<"Event"> | string
    name?: StringFilter<"Event"> | string
    type?: EnumEventTypeFilter<"Event"> | $Enums.EventType
    start_date?: DateTimeFilter<"Event"> | Date | string
    end_date?: DateTimeFilter<"Event"> | Date | string
    updated?: DateTimeFilter<"Event"> | Date | string
    created?: DateTimeFilter<"Event"> | Date | string
  }

  export type PitEntryUpsertWithWhereUniqueWithoutTeamInput = {
    where: PitEntryWhereUniqueInput
    update: XOR<PitEntryUpdateWithoutTeamInput, PitEntryUncheckedUpdateWithoutTeamInput>
    create: XOR<PitEntryCreateWithoutTeamInput, PitEntryUncheckedCreateWithoutTeamInput>
  }

  export type PitEntryUpdateWithWhereUniqueWithoutTeamInput = {
    where: PitEntryWhereUniqueInput
    data: XOR<PitEntryUpdateWithoutTeamInput, PitEntryUncheckedUpdateWithoutTeamInput>
  }

  export type PitEntryUpdateManyWithWhereWithoutTeamInput = {
    where: PitEntryScalarWhereInput
    data: XOR<PitEntryUpdateManyMutationInput, PitEntryUncheckedUpdateManyWithoutTeamInput>
  }

  export type TeamCreateWithoutPitEntrysInput = {
    tba_key: string
    team_number: number
    nickname: string
    logo?: string | null
    alliance?: AllianceCreateNestedManyWithoutTeamsInput
    events?: EventCreateNestedManyWithoutTeamsInput
  }

  export type TeamUncheckedCreateWithoutPitEntrysInput = {
    tba_key: string
    team_number: number
    nickname: string
    logo?: string | null
    alliance?: AllianceUncheckedCreateNestedManyWithoutTeamsInput
    events?: EventUncheckedCreateNestedManyWithoutTeamsInput
  }

  export type TeamCreateOrConnectWithoutPitEntrysInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutPitEntrysInput, TeamUncheckedCreateWithoutPitEntrysInput>
  }

  export type EventCreateWithoutPitEntrysInput = {
    key: string
    name: string
    type?: $Enums.EventType
    start_date: Date | string
    end_date: Date | string
    updated?: Date | string
    created: Date | string
    teams?: TeamCreateNestedManyWithoutEventsInput
    matches?: MatchCreateNestedManyWithoutEventInput
    alliances?: AllianceCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutPitEntrysInput = {
    key: string
    name: string
    type?: $Enums.EventType
    start_date: Date | string
    end_date: Date | string
    updated?: Date | string
    created: Date | string
    teams?: TeamUncheckedCreateNestedManyWithoutEventsInput
    matches?: MatchUncheckedCreateNestedManyWithoutEventInput
    alliances?: AllianceUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutPitEntrysInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutPitEntrysInput, EventUncheckedCreateWithoutPitEntrysInput>
  }

  export type TeamUpsertWithoutPitEntrysInput = {
    update: XOR<TeamUpdateWithoutPitEntrysInput, TeamUncheckedUpdateWithoutPitEntrysInput>
    create: XOR<TeamCreateWithoutPitEntrysInput, TeamUncheckedCreateWithoutPitEntrysInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutPitEntrysInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutPitEntrysInput, TeamUncheckedUpdateWithoutPitEntrysInput>
  }

  export type TeamUpdateWithoutPitEntrysInput = {
    tba_key?: StringFieldUpdateOperationsInput | string
    team_number?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    alliance?: AllianceUpdateManyWithoutTeamsNestedInput
    events?: EventUpdateManyWithoutTeamsNestedInput
  }

  export type TeamUncheckedUpdateWithoutPitEntrysInput = {
    tba_key?: StringFieldUpdateOperationsInput | string
    team_number?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    alliance?: AllianceUncheckedUpdateManyWithoutTeamsNestedInput
    events?: EventUncheckedUpdateManyWithoutTeamsNestedInput
  }

  export type EventUpsertWithoutPitEntrysInput = {
    update: XOR<EventUpdateWithoutPitEntrysInput, EventUncheckedUpdateWithoutPitEntrysInput>
    create: XOR<EventCreateWithoutPitEntrysInput, EventUncheckedCreateWithoutPitEntrysInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutPitEntrysInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutPitEntrysInput, EventUncheckedUpdateWithoutPitEntrysInput>
  }

  export type EventUpdateWithoutPitEntrysInput = {
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    teams?: TeamUpdateManyWithoutEventsNestedInput
    matches?: MatchUpdateManyWithoutEventNestedInput
    alliances?: AllianceUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutPitEntrysInput = {
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    teams?: TeamUncheckedUpdateManyWithoutEventsNestedInput
    matches?: MatchUncheckedUpdateManyWithoutEventNestedInput
    alliances?: AllianceUncheckedUpdateManyWithoutEventNestedInput
  }

  export type MatchCreateManyEventInput = {
    key: string
  }

  export type AllianceCreateManyEventInput = {
    id?: number
    matchId: string
    color: $Enums.AllianceColor
    matchColor: string
  }

  export type PitEntryCreateManyEventInput = {
    id?: string
    team_number: number
    drive_type: number
    auto_pts: number
    hang_cap: boolean
    trap_cap: boolean
    gp_level: number
    comments: string
    mercy?: boolean
    updated?: Date | string
    created?: Date | string
  }

  export type TeamUpdateWithoutEventsInput = {
    tba_key?: StringFieldUpdateOperationsInput | string
    team_number?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    alliance?: AllianceUpdateManyWithoutTeamsNestedInput
    pitEntrys?: PitEntryUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutEventsInput = {
    tba_key?: StringFieldUpdateOperationsInput | string
    team_number?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    alliance?: AllianceUncheckedUpdateManyWithoutTeamsNestedInput
    pitEntrys?: PitEntryUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateManyWithoutEventsInput = {
    tba_key?: StringFieldUpdateOperationsInput | string
    team_number?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MatchUpdateWithoutEventInput = {
    key?: StringFieldUpdateOperationsInput | string
    alliances?: AllianceUpdateManyWithoutMatchNestedInput
    schedules?: ScheduleUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateWithoutEventInput = {
    key?: StringFieldUpdateOperationsInput | string
    alliances?: AllianceUncheckedUpdateManyWithoutMatchNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateManyWithoutEventInput = {
    key?: StringFieldUpdateOperationsInput | string
  }

  export type AllianceUpdateWithoutEventInput = {
    color?: EnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor
    matchColor?: StringFieldUpdateOperationsInput | string
    teams?: TeamUpdateManyWithoutAllianceNestedInput
    match?: MatchUpdateOneRequiredWithoutAlliancesNestedInput
  }

  export type AllianceUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: StringFieldUpdateOperationsInput | string
    color?: EnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor
    matchColor?: StringFieldUpdateOperationsInput | string
    teams?: TeamUncheckedUpdateManyWithoutAllianceNestedInput
  }

  export type AllianceUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    matchId?: StringFieldUpdateOperationsInput | string
    color?: EnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor
    matchColor?: StringFieldUpdateOperationsInput | string
  }

  export type PitEntryUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    drive_type?: IntFieldUpdateOperationsInput | number
    auto_pts?: IntFieldUpdateOperationsInput | number
    hang_cap?: BoolFieldUpdateOperationsInput | boolean
    trap_cap?: BoolFieldUpdateOperationsInput | boolean
    gp_level?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
    mercy?: BoolFieldUpdateOperationsInput | boolean
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutPitEntrysNestedInput
  }

  export type PitEntryUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    team_number?: IntFieldUpdateOperationsInput | number
    drive_type?: IntFieldUpdateOperationsInput | number
    auto_pts?: IntFieldUpdateOperationsInput | number
    hang_cap?: BoolFieldUpdateOperationsInput | boolean
    trap_cap?: BoolFieldUpdateOperationsInput | boolean
    gp_level?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
    mercy?: BoolFieldUpdateOperationsInput | boolean
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PitEntryUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    team_number?: IntFieldUpdateOperationsInput | number
    drive_type?: IntFieldUpdateOperationsInput | number
    auto_pts?: IntFieldUpdateOperationsInput | number
    hang_cap?: BoolFieldUpdateOperationsInput | boolean
    trap_cap?: BoolFieldUpdateOperationsInput | boolean
    gp_level?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
    mercy?: BoolFieldUpdateOperationsInput | boolean
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AllianceCreateManyMatchInput = {
    id?: number
    eventId: string
    color: $Enums.AllianceColor
    matchColor: string
  }

  export type ScheduleCreateManyMatchInput = {
    key?: number
    uname: string
    position: number
  }

  export type AllianceUpdateWithoutMatchInput = {
    color?: EnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor
    matchColor?: StringFieldUpdateOperationsInput | string
    event?: EventUpdateOneRequiredWithoutAlliancesNestedInput
    teams?: TeamUpdateManyWithoutAllianceNestedInput
  }

  export type AllianceUncheckedUpdateWithoutMatchInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: StringFieldUpdateOperationsInput | string
    color?: EnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor
    matchColor?: StringFieldUpdateOperationsInput | string
    teams?: TeamUncheckedUpdateManyWithoutAllianceNestedInput
  }

  export type AllianceUncheckedUpdateManyWithoutMatchInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: StringFieldUpdateOperationsInput | string
    color?: EnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor
    matchColor?: StringFieldUpdateOperationsInput | string
  }

  export type ScheduleUpdateWithoutMatchInput = {
    uname?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
  }

  export type ScheduleUncheckedUpdateWithoutMatchInput = {
    key?: IntFieldUpdateOperationsInput | number
    uname?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
  }

  export type ScheduleUncheckedUpdateManyWithoutMatchInput = {
    key?: IntFieldUpdateOperationsInput | number
    uname?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
  }

  export type TeamUpdateWithoutAllianceInput = {
    tba_key?: StringFieldUpdateOperationsInput | string
    team_number?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    events?: EventUpdateManyWithoutTeamsNestedInput
    pitEntrys?: PitEntryUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutAllianceInput = {
    tba_key?: StringFieldUpdateOperationsInput | string
    team_number?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    events?: EventUncheckedUpdateManyWithoutTeamsNestedInput
    pitEntrys?: PitEntryUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateManyWithoutAllianceInput = {
    tba_key?: StringFieldUpdateOperationsInput | string
    team_number?: IntFieldUpdateOperationsInput | number
    nickname?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PitEntryCreateManyTeamInput = {
    id?: string
    drive_type: number
    auto_pts: number
    hang_cap: boolean
    trap_cap: boolean
    gp_level: number
    comments: string
    mercy?: boolean
    event_key: string
    updated?: Date | string
    created?: Date | string
  }

  export type AllianceUpdateWithoutTeamsInput = {
    color?: EnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor
    matchColor?: StringFieldUpdateOperationsInput | string
    event?: EventUpdateOneRequiredWithoutAlliancesNestedInput
    match?: MatchUpdateOneRequiredWithoutAlliancesNestedInput
  }

  export type AllianceUncheckedUpdateWithoutTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    color?: EnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor
    matchColor?: StringFieldUpdateOperationsInput | string
  }

  export type AllianceUncheckedUpdateManyWithoutTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    color?: EnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor
    matchColor?: StringFieldUpdateOperationsInput | string
  }

  export type EventUpdateWithoutTeamsInput = {
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    matches?: MatchUpdateManyWithoutEventNestedInput
    alliances?: AllianceUpdateManyWithoutEventNestedInput
    pitEntrys?: PitEntryUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutTeamsInput = {
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    matches?: MatchUncheckedUpdateManyWithoutEventNestedInput
    alliances?: AllianceUncheckedUpdateManyWithoutEventNestedInput
    pitEntrys?: PitEntryUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutTeamsInput = {
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PitEntryUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    drive_type?: IntFieldUpdateOperationsInput | number
    auto_pts?: IntFieldUpdateOperationsInput | number
    hang_cap?: BoolFieldUpdateOperationsInput | boolean
    trap_cap?: BoolFieldUpdateOperationsInput | boolean
    gp_level?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
    mercy?: BoolFieldUpdateOperationsInput | boolean
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutPitEntrysNestedInput
  }

  export type PitEntryUncheckedUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    drive_type?: IntFieldUpdateOperationsInput | number
    auto_pts?: IntFieldUpdateOperationsInput | number
    hang_cap?: BoolFieldUpdateOperationsInput | boolean
    trap_cap?: BoolFieldUpdateOperationsInput | boolean
    gp_level?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
    mercy?: BoolFieldUpdateOperationsInput | boolean
    event_key?: StringFieldUpdateOperationsInput | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PitEntryUncheckedUpdateManyWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    drive_type?: IntFieldUpdateOperationsInput | number
    auto_pts?: IntFieldUpdateOperationsInput | number
    hang_cap?: BoolFieldUpdateOperationsInput | boolean
    trap_cap?: BoolFieldUpdateOperationsInput | boolean
    gp_level?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
    mercy?: BoolFieldUpdateOperationsInput | boolean
    event_key?: StringFieldUpdateOperationsInput | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use EventCountOutputTypeDefaultArgs instead
     */
    export type EventCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MatchCountOutputTypeDefaultArgs instead
     */
    export type MatchCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MatchCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AllianceCountOutputTypeDefaultArgs instead
     */
    export type AllianceCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AllianceCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeamCountOutputTypeDefaultArgs instead
     */
    export type TeamCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventDefaultArgs instead
     */
    export type EventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MatchDefaultArgs instead
     */
    export type MatchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MatchDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScheduleDefaultArgs instead
     */
    export type ScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScheduleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AllianceDefaultArgs instead
     */
    export type AllianceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AllianceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeamDefaultArgs instead
     */
    export type TeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MatchEntryDefaultArgs instead
     */
    export type MatchEntryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MatchEntryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PitEntryDefaultArgs instead
     */
    export type PitEntryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PitEntryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServerDefaultArgs instead
     */
    export type ServerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServerDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}