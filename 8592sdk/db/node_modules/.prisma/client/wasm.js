
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  key: 'key',
  fname: 'fname',
  lname: 'lname',
  uname: 'uname',
  pass: 'pass'
};

exports.Prisma.EventScalarFieldEnum = {
  key: 'key',
  name: 'name',
  type: 'type',
  start_date: 'start_date',
  end_date: 'end_date',
  updated: 'updated',
  created: 'created'
};

exports.Prisma.MatchScalarFieldEnum = {
  key: 'key',
  eventId: 'eventId'
};

exports.Prisma.ScheduleScalarFieldEnum = {
  key: 'key',
  uname: 'uname',
  position: 'position',
  matchId: 'matchId'
};

exports.Prisma.AllianceScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  matchId: 'matchId',
  color: 'color',
  matchColor: 'matchColor'
};

exports.Prisma.TeamScalarFieldEnum = {
  tba_key: 'tba_key',
  team_number: 'team_number',
  nickname: 'nickname',
  logo: 'logo'
};

exports.Prisma.MatchEntryScalarFieldEnum = {
  id: 'id',
  match_num: 'match_num',
  name: 'name',
  team_number: 'team_number',
  scouter_num: 'scouter_num',
  a_start_posit: 'a_start_posit',
  a_left_start: 'a_left_start',
  a_coral_first: 'a_coral_first',
  a_coral_second: 'a_coral_second',
  a_coral_third: 'a_coral_third',
  a_coral_fourth: 'a_coral_fourth',
  a_net: 'a_net',
  a_proc: 'a_proc',
  t_coral_first: 't_coral_first',
  t_coral_second: 't_coral_second',
  t_coral_third: 't_coral_third',
  t_coral_fourth: 't_coral_fourth',
  t_net: 't_net',
  t_proc: 't_proc',
  t_climb: 't_climb',
  t_endgame: 't_endgame',
  t_ground_coral: 't_ground_coral',
  t_ground_algae: 't_ground_algae',
  failed: 'failed',
  ground_pickup: 'ground_pickup',
  defense: 'defense',
  driver_perf: 'driver_perf',
  tippiness: 'tippiness',
  comments: 'comments',
  updated: 'updated',
  created: 'created'
};

exports.Prisma.PitEntryScalarFieldEnum = {
  id: 'id',
  team_number: 'team_number',
  drive_type: 'drive_type',
  auto_pts: 'auto_pts',
  hang_cap: 'hang_cap',
  trap_cap: 'trap_cap',
  gp_level: 'gp_level',
  comments: 'comments',
  mercy: 'mercy',
  event_key: 'event_key',
  updated: 'updated',
  created: 'created'
};

exports.Prisma.ServerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  team: 'team',
  desc: 'desc',
  api: 'api',
  endpoint: 'endpoint',
  auth_required: 'auth_required'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.EventType = exports.$Enums.EventType = {
  DISTRICT: 'DISTRICT',
  REGIONAL: 'REGIONAL',
  WORLD: 'WORLD',
  SCRIMMAGE: 'SCRIMMAGE',
  OTHER: 'OTHER'
};

exports.AllianceColor = exports.$Enums.AllianceColor = {
  BLUE: 'BLUE',
  RED: 'RED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Event: 'Event',
  Match: 'Match',
  Schedule: 'Schedule',
  Alliance: 'Alliance',
  Team: 'Team',
  MatchEntry: 'MatchEntry',
  PitEntry: 'PitEntry',
  Server: 'Server'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
